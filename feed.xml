<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>Kevin's Blog</title>
    <link>https://kevingal.com</link>
    <description>Maths, computers and stuff.</description>
    <pubDate>Fri, 27 Nov 2020 00:00:00 GMT</pubDate>
    <lastBuildDate>Fri, 27 Nov 2020 00:00:00 GMT</lastBuildDate>
    <atom:link href="https://kevingal.com/feed.xml" rel="self" type="application/rss+xml" />
    
    <item>
        <title>Recreating grep in Python</title>
        <description>&lt;p&gt;Let&#39;s make our own version of grep, nicknamed dumbgrep. Along the way, we&#39;ll learn about 19th-century Russian literature and how to make command line interface (CLI) tools in Python.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep existence &amp;lt;/tmp/war-and-peace.txt
in this part of the house and did not even know of the existence of
even wish to know of his existence but would now have been offended
[...]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Why Python? Python&#39;s &lt;code&gt;argparse&lt;/code&gt; package makes it easy to handle the parsing side of things. And using the Python Package Index (PyPI), you can easily deliver a CLI tool to the writhing masses of humanity.&lt;/p&gt;
&lt;h3 id=&#34;baby-steps&#34;&gt;Baby steps 👶&lt;/h3&gt;
&lt;p&gt;You&#39;ll need Python 3 if you want to follow along. For reference, the full program is available &lt;a href=&#34;https://github.com/Kevinpgalligan/dumbgrep&#34;&gt;here&lt;/a&gt;. Shamefully, I&#39;ve only tested it on Linux, so there might be extra hoop-jumping required to set it up on Windows.&lt;/p&gt;
&lt;p&gt;Here&#39;s the skeleton of our project.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dumbgrep/
├── scripts
│   └── dumbgrep
├── setup.py
└── src
    └── dumbgrepcli
            └── __init__.py
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dumbgrep&lt;/strong&gt; is the Python script that a user can call from the CLI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;setup.py&lt;/strong&gt; contains the information we need to package our project and upload it to PyPI for distribution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;__init__.py&lt;/strong&gt; contains the actual functionality of dumbgrep. If you didn&#39;t know, a folder that contains a file called &lt;strong&gt;__init__.py&lt;/strong&gt; is a Python package. That package&#39;s code is saved in the &lt;strong&gt;__init__.py&lt;/strong&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why not dump all of our Python code into the &lt;strong&gt;dumbgrep&lt;/strong&gt; file? This more complicated structure allows us to split the code into multiple files and even multiple subpackages, which will be useful if the codebase grows too big. It&#39;s also easier to add tests this way, if you&#39;re boring like that.&lt;/p&gt;
&lt;p&gt;Let&#39;s write the &lt;strong&gt;dumbgrep&lt;/strong&gt; script. All it does is call the &lt;code&gt;main()&lt;/code&gt; function of the &lt;code&gt;dumbgrepcli&lt;/code&gt; package, which we&#39;ll write later.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;dumbgrepcli&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dumbgrepcli&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only thing about this that might possibly be unusual to a Python afficionado is the so-called &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_(Unix)&#34;&gt;shebang&lt;/a&gt; line at the start, which basically informs Unix-like systems that the script should be run using Python 3.&lt;/p&gt;
&lt;p&gt;Next, here&#39;s what we might write in &lt;strong&gt;setup.py&lt;/strong&gt;. This determines how to build the package and how to upload it to PyPI.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;setuptools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;setuptools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find_packages&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;dumbgrep-cli&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;The best grep I ever did see.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;long_description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;The best grep I ever did see.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;https://github.com/Kevinpgalligan/dumbgrep&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Kevin Galligan&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;author_email&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;galligankevinp@gmail.com&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;scripts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;scripts/dumbgrep&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_packages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;package_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;classifiers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;quot;Programming Language :: Python :: 3&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;quot;License :: OSI Approved :: MIT License&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;install_requires&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Most of the fields are self-explanatory. &#34;name&#34; is the package&#39;s name on PyPI, which must be unique. The files under the &#34;scripts&#34; field will be installed to a place where the user can call them from the command line.&lt;/p&gt;
&lt;p&gt;As an aside: if you add a Markdown-formatted README to your project, then a useful trick is to reuse it as the long description of your package on PyPI.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;long_description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;long_description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;long_description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;long_description_content_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;text/markdown&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&#39;s the boring stuff out of the way! Now we can move on to plagiarising grep.&lt;/p&gt;
&lt;h3 id=&#34;globally-search-for-a-regular-expression-and-print-matching-lines&#34;&gt;G(lobally search for a) R(egular) E(xpression and) P(rint matching lines)&lt;/h3&gt;
&lt;p&gt;Here&#39;s how we start our implementation of grep in &lt;strong&gt;__init__.py&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;argparse&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argparse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;A replacement for grep.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;the pattern to search for&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We import Python&#39;s &lt;code&gt;argparse&lt;/code&gt; module, which we&#39;ll use for argument-parsing. We define the long-awaited &lt;code&gt;main()&lt;/code&gt; function. There&#39;s boilerplate code at the bottom that calls &lt;code&gt;main()&lt;/code&gt; when we execute the file directly, just so we can test it. Within &lt;code&gt;main()&lt;/code&gt;, we create an &lt;code&gt;ArgumentParser&lt;/code&gt;, add a string argument called &#34;pattern&#34; to it, parse the command line arguments, and finally, print out the value of the &#34;pattern&#34; argument.&lt;/p&gt;
&lt;p&gt;This already gets us a lot of stuff. We have nicely-formatted help, by default.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 src/dumbgrepcli/__init__.py -h
usage: __init__.py [-h] pattern

A replacement for grep.

positional arguments:
  pattern     the pattern to search for

optional arguments:
  -h, --help  show this help message and exit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If a user forgets to provide a pattern, they get a nice error message.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 src/dumbgrepcli/__init__.py
usage: __init__.py [-h] pattern
__init__.py: error: the following arguments are required: pattern
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can access the value of the &#34;pattern&#34; argument through &lt;code&gt;args.pattern&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 src/dumbgrepcli/__init__.py hello
hello
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All that remains is to code up the logic of grep. This is rather easy in Python, since it has a built-in regex package.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;argparse&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;re&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argparse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;A replacement for grep.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;the pattern to search for&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;            &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We create a &lt;code&gt;Pattern&lt;/code&gt; object based on the pattern provided by the user, and all lines of input that match this pattern are printed to standard output.&lt;/p&gt;
&lt;p&gt;And that&#39;s it! We&#39;ve recreated grep. Let&#39;s set up a virtual environment where we can install this bad boy and test it out. (A virtual environment is a self-contained Python installation that you can experiment on without mucking up your main Python installation).&lt;/p&gt;
&lt;h5 id=&#34;create-and-activate-the-environment&#34;&gt;Create and activate the environment&lt;/h5&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pwd
/home/kevingal/proyectos/dumbgrep
$ mkdir env
$ python3 -m venv env/
$ source env/bin/activate
(env) $ which python3
/home/kevingal/proyectos/dumbgrep/env/bin/python3
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;install-dumbgrep&#34;&gt;Install dumbgrep&lt;/h5&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(env) $ pip install .
running install
running bdist_egg
running egg_info
[...]
(env) $ which dumbgrep
/home/kevingal/proyectos/dumbgrep/env/bin/dumbgrep
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;test-it-out-then-deactivate-the-environment&#34;&gt;Test it out, then deactivate the environment&lt;/h5&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(env) $ dumbgrep existence &amp;lt;/tmp/war-and-peace.txt
in this part of the house and did not even know of the existence of
even wish to know of his existence but would now have been offended
[...]
(env) $ deactivate
$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the next section we&#39;ll explore &lt;code&gt;argparse&lt;/code&gt; a bit more by adding some bells and whistles to dumbgrep.&lt;/p&gt;
&lt;h3 id=&#34;milk-and-sugar&#34;&gt;Milk and sugar&lt;/h3&gt;
&lt;p&gt;Let&#39;s say we want to recreate grep&#39;s &#34;-v&#34; flag, which means that only lines NOT matching the input pattern are printed. All we have to do is add a boolean flag to our argument parser to check whether we should invert the matches. And then tweak the matching logic to use that flag.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;-v&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;invert&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;invert matches&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;invert&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yippee.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 src/dumbgrepcli/__init__.py -v existence &amp;lt;/tmp/war-and-peace.txt
The Project Gutenberg EBook of War and Peace, by Leo Tolstoy
This eBook is for the use of anyone anywhere at no cost and with almost
[...]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How about the &#34;--max-count&#34; parameter, which limits the number of lines that grep prints out? We accept the limit as an integer argument, and count the number of matched lines so that we can exit early once the limit has been reached.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;math&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;--max-count&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;max number of matches to print&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;invert&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;            &lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works!&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 src/dumbgrepcli/__init__.py -m 1 existence &amp;lt;/tmp/war-and-peace.txt
in this part of the house and did not even know of the existence of
$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, okay. That&#39;s enough of that. There&#39;s one last trick I&#39;d like to share before we finish, however: colour highlighting in the terminal. If we want to highlight the matching part of a line, then we can use escape codes to modify font colour in the terminal. First we store the &lt;code&gt;Match&lt;/code&gt; object returned by &lt;code&gt;regex.search(...)&lt;/code&gt; in its own variable, since we&#39;ll need it later to isolate the part of the line that matches the pattern. And we call a new function, &lt;code&gt;highlight()&lt;/code&gt;, to format the output.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;invert&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;            &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;highlight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&#39;s the &lt;code&gt;highlight()&lt;/code&gt; function. Main things to note: 1) to avoid having ugly escape codes in our output when we write to a file, we check whether we&#39;re writing to a terminal through &lt;code&gt;sys.stdout.isatty()&lt;/code&gt;; 2) the first escape code we write changes the colour of all following text to red, and it&#39;s only after we write the reset escape code that this effect is undone.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;highlight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isatty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()]&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;[31m&amp;quot;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# change to red&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()]&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;[0m&amp;quot;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# reset&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the result:
&lt;figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/cli-tools/existence.png&#34;
     alt=&#34;Highlighted text from War &amp; Peace, output of dumbgrep in the terminal.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;figcaption&gt;Heavy stuff.&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h3 id=&#34;distribute-to-the-clammering-public&#34;&gt;Distribute to the clammering public&lt;/h3&gt;
&lt;p&gt;If we&#39;re feeling particularly benevolent and charitable, then we can upload our nifty tool to PyPI. After all, why would anyone want to use the original grep when they could use our version?&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ time python3 src/dumbgrepcli/__init__.py existence &amp;lt;/tmp/war-and-peace.txt &amp;gt;/dev/null
user    0m0.086s
$ time grep existence &amp;lt;/tmp/war-and-peace.txt &amp;gt;/dev/null
user    0m0.000s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, right...&lt;/p&gt;
&lt;p&gt;Anyway, here&#39;s an excellent guide that describes the whole process: &lt;a href=&#34;https://packaging.python.org/tutorials/packaging-projects/&#34;&gt;https://packaging.python.org/tutorials/packaging-projects/&lt;/a&gt;. There&#39;s no point in duplicating the instructions here, since the guide is thorough and straightforward. Once dumbgrep is on PyPI, anyone can download it by running &lt;code&gt;pip3 install dumbgrep-cli&lt;/code&gt;, as per the package name we defined in &lt;strong&gt;setup.py&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That&#39;s it. The full dumbgrep code is available &lt;a href=&#34;https://github.com/Kevinpgalligan/dumbgrep&#34;&gt;here&lt;/a&gt;. You can use it as a template for your own CLI tools. I&#39;ve also created 2 actually kinda useful CLI tools that you can check out for inspiration: &lt;a href=&#34;https://github.com/Kevinpgalligan/pseu&#34;&gt;pseu&lt;/a&gt; and &lt;a href=&#34;https://github.com/Kevinpgalligan/bs&#34;&gt;bs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pseu pick &amp;quot;good life choice&amp;quot; &amp;quot;bad life choice&amp;quot;
bad life choice
$ pseu roll 1d6
3
$ bs FFFE
[from hexadecimal]
  decimal     65534
  binary      1111111111111110
  octal       177776
&lt;/pre&gt;&lt;/div&gt;</description>
        <link>https://kevingal.com/blog/cli-tools.html</link>
        <pubDate>Fri, 27 Nov 2020 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/cli-tools.html</guid>
    </item>
    <item>
        <title>Can your granny beat Michael Jordan at basketball? A probabilistic answer</title>
        <description>&lt;p&gt;I played a lot of basketball during lockdown. I had free time, there was a basketball hoop outside my house, and I had recently watched The Last Dance, the hit basketball documentary about Michael Jordan and the Chicago Bulls. The time was ripe for my basketball ascendance.&lt;/p&gt;
&lt;p&gt;Yet my father still managed to beat me at Around the World. Around the World is a basketball game where your objective is to score from each of several positions around the hoop. And my father beat me at it, despite all my practice, and despite the fact that he had never played much basketball in his life.&lt;/p&gt;
&lt;p&gt;This made me wonder -- how much better than someone do you need to be in order to beat them consistently at Around the World? That&#39;s the question we&#39;re going to answer in this article, using tools from probability. By the end, we&#39;ll have produced some cool graphs (if you&#39;re into that sort of thing), and we&#39;ll have definitively answered the question of whether your granny can beat Michael Jordan at basketball.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/basketball/around-the-world.png&#34;
     alt=&#34;A variation of Around the World. 7 shooting positions, evenly spaced in a semi-circle around the hoop.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Around the World is a race. Players take turns shooting from set positions around the hoop. A player&#39;s turn ends when they miss a shot. The winner is the first player to score a shot from all positions. In my variant, we had to score 7 shots, spaced at regular intervals in a semi-circle around the hoop (see above).&lt;/p&gt;
&lt;p&gt;Another way to look at it is that the winner is the person who misses the fewest shots before scoring 7 times. And this can be modelled using what is known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Negative_binomial_distribution&#34;&gt;Pascal distribution&lt;/a&gt;. Given that a player scores each shot with probability $p$, the probability that they miss $k$ shots before finishing the game is&lt;/p&gt;
&lt;p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;P(X=k)={k+7-1 \choose 7-1}(1-p)^k p^7.&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Where did this ugly-looking expression come from? Well, there are ${k+7-1 \choose 7-1}$ sequences of shots (&lt;a href=&#34;https://en.wikipedia.org/wiki/Binomial_coefficient&#34;&gt;binomial coefficient formula&lt;/a&gt;) where the player misses $k$ shots before finishing. Why that many!? The player takes $k+7$ shots in total. The last shot has to be a success, as that&#39;s when the player finishes the game. This leaves $k+7-1$ shots, of which we &lt;em&gt;choose&lt;/em&gt; $7-1=6$ to be successes. As for $(1-p)^k p^7$, it&#39;s the probability of a single sequence of shots where the player misses $k$ shots before scoring 7.&lt;/p&gt;
&lt;p&gt;Now that we&#39;ve hand-wavingly derived the probability formula, what does the distribution look like for different values of $p$? How many shots should you expect to miss at different skill levels?&lt;/p&gt;
&lt;p&gt;Here&#39;s the distribution when $p=0.1$. This is roughly granny-level shooting ability. A granny musters enough energy to hurl the ball in the general direction of the hoop, and it happens to go in, about 1 in 10 times. On average, it takes more than 60 misses before granny finishes the game (indicated by the red line).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/basketball/pascal-p0.1.png&#34;
     alt=&#34;The distribution for p=0.1; 9/10 shots are misses. A curve that peaks at around 55 missed shots. The mean is just over 60 missed shots.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Michael Jordan&#39;s average free throw percentage over his career was 83.5% (&lt;a href=&#34;https://stats.nba.com/player/893/career/&#34;&gt;ref&lt;/a&gt;), so let&#39;s look at $p=0.835$. We see that it would be common (3/10 games) for MJ to not miss a single shot, and the other player wouldn&#39;t even touch the ball if MJ was the starting player. On average, we&#39;d expect MJ to miss slightly more than 1 shot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/basketball/pascal-p0.835.png&#34;
     alt=&#34;The distribution for p=0.835.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally, between the two extremes, here&#39;s $p=0.5$. This player misses an average of 7 shots before finishing. It&#39;s like me on a good day.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/basketball/pascal-p0.5.png&#34;
     alt=&#34;The distribution for p=0.5.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our goal is to estimate the win probability of one player versus another. Me versus my dad. Michael Jordan versus your granny. Michael Jordan versus Michael Jordan. And so on. To do that, we&#39;ll have to define some new variables. Let $W$ be the event of a win for the first player, let $F$ be the number of shots they miss, and let $S$ be the same but for the second player. Also let $p_F$ and $p_S$ be the shot success probabilities of each player. We can now state the probability of the first player winning:&lt;/p&gt;
&lt;p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;
P(W) = \sum_{s=0}^\infty P(S=s) P(F \leq S).
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;We know the value of $P(S=s)$ from above, except that $p$ is swapped for $p_S$. And we get $P(F \leq s)$ by summing up $P(F=f)$ for all $f \leq s$:&lt;/p&gt;
&lt;p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;
P(F \leq s) = \sum_{f=0}^s P(F=f).
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Why $\leq$ and not $&amp;lt;$? This is because the first player wins if they miss the same amount of shots as the second player, as the game ends before the second player can finish their shots.&lt;/p&gt;
&lt;p&gt;With that out of the way, here&#39;s a heat map of the first player&#39;s win probability, for varying values of $p_F$ and $p_S$&lt;sup id=&#34;fnref:infinite&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:infinite&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. It ranges from black (the first player will almost certainly lose) to white (the first player will almost certainly win). When we compare Michael Jordan as the first player ($p_F=0.835$) to a granny as the second player ($p_S=0.1$), the result is blindingly white. Granny doesn&#39;t stand a chance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/basketball/heatmap.png&#34;
     alt=&#34;Heatmap of win probability of first player. p_F and p_S are varied between 0.1 and 0.9. &#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another observation: the pixel in the bottom left corner is a reddy orange, which is close to a 50% win rate for the first player. The pixel in the top right corner is an orangey yellow, around 70%. It seems that going first gives a bigger advantage to more skillful players.&lt;/p&gt;
&lt;p&gt;Here&#39;s similar data in table format, with results rounded to 4 decimal places. $p_F$ increases as you go down the table, while $p_S$ increases as you go left to right.&lt;/p&gt;
&lt;div class=&#34;cooltablewrap&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
  &lt;th&gt;p&lt;sub&gt;F&lt;/sub&gt;/p&lt;sub&gt;S&lt;/sub&gt;&lt;/th&gt;
  &lt;th&gt;0.1&lt;/th&gt;
  &lt;th&gt;0.25&lt;/th&gt;
  &lt;th&gt;0.4&lt;/th&gt;
  &lt;th&gt;0.5&lt;/th&gt;
  &lt;th&gt;0.6&lt;/th&gt;
  &lt;th&gt;0.835&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;0.1&lt;/th&gt;
  &lt;td&gt;0.5059&lt;/td&gt;
  &lt;td&gt;0.0374&lt;/td&gt;
  &lt;td&gt;0.0032&lt;/td&gt;
  &lt;td&gt;0.0007&lt;/td&gt;
  &lt;td&gt;0.0002&lt;/td&gt;
  &lt;td&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;0.25&lt;/th&gt;
  &lt;td&gt;0.9665&lt;/td&gt;
  &lt;td&gt;0.5162&lt;/td&gt;
  &lt;td&gt;0.162&lt;/td&gt;
  &lt;td&gt;0.0654&lt;/td&gt;
  &lt;td&gt;0.0245&lt;/td&gt;
  &lt;td&gt;0.0016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;0.4&lt;/th&gt;
  &lt;td&gt;0.9974&lt;/td&gt;
  &lt;td&gt;0.8637&lt;/td&gt;
  &lt;td&gt;0.5291&lt;/td&gt;
  &lt;td&gt;0.3208&lt;/td&gt;
  &lt;td&gt;0.1726&lt;/td&gt;
  &lt;td&gt;0.0234&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;0.5&lt;/th&gt;
  &lt;td&gt;0.9994&lt;/td&gt;
  &lt;td&gt;0.9499&lt;/td&gt;
  &lt;td&gt;0.7382&lt;/td&gt;
  &lt;td&gt;0.54&lt;/td&gt;
  &lt;td&gt;0.3514&lt;/td&gt;
  &lt;td&gt;0.0738&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;0.6&lt;/th&gt;
  &lt;td&gt;0.9998&lt;/td&gt;
  &lt;td&gt;0.9833&lt;/td&gt;
  &lt;td&gt;0.8742&lt;/td&gt;
  &lt;td&gt;0.7311&lt;/td&gt;
  &lt;td&gt;0.554&lt;/td&gt;
  &lt;td&gt;0.1736&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;0.835&lt;/th&gt;
  &lt;td&gt;0.9999&lt;/td&gt;
  &lt;td&gt;0.9993&lt;/td&gt;
  &lt;td&gt;0.9894&lt;/td&gt;
  &lt;td&gt;0.965&lt;/td&gt;
  &lt;td&gt;0.9124&lt;/td&gt;
  &lt;td&gt;0.6235&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This confirms our observation that going first gives a bigger advantage to stronger players. When a granny plays a granny, the first granny has only a small advantage -- a 50.59% chance of winning. Whereas a Michael Jordan who plays first has a 62.35% chance of beating a second Michael Jordan. The game tends to end in fewer turns at higher levels of play, which makes the extra turn at the start count for more.&lt;/p&gt;
&lt;p&gt;Let&#39;s say that my father, a mediocre player, has a score rate of 40%. And that I, a slightly less mediocre player, have a score rate of 50%. Then my father would still be expected to beat me in about 3/10 games. I guess this explains my humiliating defeats.&lt;/p&gt;
&lt;p&gt;As for the scenario we posed at the beginning of the article: it&#39;s almost impossible for a granny to beat Michael Jordan. But there&#39;s a chance.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;See the code &lt;a href=&#34;https://github.com/Kevinpgalligan/around-the-world&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;footnote&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:infinite&#34;&gt;
&lt;p&gt;As you might have guessed, we don&#39;t compute the entire infinite sum to generate this graph. We stop after enough terms have been added that the error in the result is small.&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:infinite&#34; title=&#34;Jump back to footnote 1 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        <link>https://kevingal.com/blog/basketball.html</link>
        <pubDate>Thu, 22 Oct 2020 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/basketball.html</guid>
    </item>
    <item>
        <title>A short review of A Short History of Nearly Everything</title>
        <description>&lt;p&gt;If everyone on Earth owned a copy of &lt;em&gt;A Short History of Nearly Everything&lt;/em&gt;, and they stacked their copies one on top of the other, then that stack would touch the Moon&lt;sup id=&#34;fnref:moon&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:moon&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;That&#39;s the sort of thought experiment you&#39;ll find in Bill Bryson&#39;s popular science book, &lt;em&gt;A Short History of Nearly Everything&lt;/em&gt;, in which Bryson (BB for short) tackles all of the Big Questions that might occur to a curious resident of our planet. Questions like &#34;What&#39;s the Universe?&#34;, &#34;Where Did We Come From?&#34;, and &#34;How Do Scientists Know That the Earth Weighs 6 Million Yottagrams?&#34;.&lt;/p&gt;
&lt;p&gt;There&#39;s a lot to cover in a history of the Universe. BB&#39;s story begins with the Big Bang and ends with the plight of modern humans, but along the way, he makes forays into such varied topics as quantum mechanics, cell biology and species extinction. He manages to arrange these large subject areas into a somewhat coherent narrative, never getting too bogged down by details. And, unlike a dry textbook, each victory of science is presented as a story: the dumb theories that came first, the scientists, the breakthrough, what we still don&#39;t understand, and so on.&lt;/p&gt;
&lt;p&gt;BB cherishes any opportunity to diverge from the main thread of the story and write about scientists. While he panders a bit to the mad genius stereotype, it makes for fun reading. Isaac Newton is the prototypical eccentric scientist. His vision experiments included poking a metal needle around his eye socket and staring at the sun. By BB&#39;s account, Newton was also surprisingly coy with his research. It took an incidental encounter with Edmund Halley, one of his peers, before he launched into writing the famous &lt;em&gt;Principia Mathematica&lt;/em&gt; and introduced the world to gravity and calculus.&lt;/p&gt;
&lt;p&gt;Henry Cavendish is another curious character mentioned in the book. He was the first person to accurately measure the Earth&#39;s mass, using a contraption that looked a bit like a Rube Goldberg machine. BB writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] he was particularly devoted to the weekly scientific soirées of the great naturalist Sir Joseph Banks. It was always made clear to the other guests that Cavendish was on no account to be approached or even looked at. Those who sought his views were advised to wander into his vicinity as if by accident and to talk as it were into vacancy. If their remarks were scientifically worthy they might receive a mumbled reply, but more often than not they would hear a peeved squeak (his voice appears to have been high pitched) and turn to find an actual vacancy and the sight of Cavendish fleeing for a more peaceful corner.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My favourite eccentric described in the book is J.B.S. Haldane, who conducted experiments on the dangers of deep-sea exploration. His test subjects, who ranged from himself and his wife to a former prime minister of Spain, underwent rather perilous experiments in a decompression chamber that Haldane referred to as &#34;the pressure pot&#34;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sent on a simulated descent, his wife once had a fit that lasted thirteen minutes. When at last she stopped bouncing across the floor, she was helped to her feet and sent home to cook dinner.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oxygen poisoning, collapsed lungs and burst eardrums were among the risks undertaken by his test subjects. But, on the topic of burst eardrums, Haldane hedged that...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...the drum generally heals up; and if a hole remains in it, although one is somewhat deaf, one can blow tobacco smoke out of the ear in question, which is a social accomplishment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BB makes frequent use of analogy to convey scales that are outside the realm of human experience, like the volume of an atom. There are no figures like &#34;6 million yottagrams&#34; here, thank you very much. BB says that an atom lying next to a line of 1 millimeter is comparable to an A4 sheet of paper lying next to the Empire State Building. This is one of at least 4 analogies based on the Empire State Building. Then, to demonstrate that an atom is mostly empty space, he asks the reader to imagine inflating its nucleus to the size of a pea; to keep the scale consistent, you&#39;d have to inflate the atom&#39;s shell to the size of a football stadium.&lt;/p&gt;
&lt;p&gt;Another example, which you&#39;ll recognise if you&#39;ve seen Carl Sagan&#39;s &lt;em&gt;Cosmos&lt;/em&gt;, is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cosmic_Calendar&#34;&gt;Cosmic Calendar&lt;/a&gt;. The idea is to imagine the entire history of the Universe as a 365-day calendar. On that calendar, modern humans exist for only the last 10 minutes of December 31st. Way more evocative than saying &#34;humans have existed for only 0.002% of the history of the Universe&#34;.&lt;/p&gt;
&lt;p&gt;Even science types might discover some gaps in their knowledge. As for me, I was surprised at the number of possible events that could wipe humanity from existence, including but not limited to meteor collisions, supervolcanoes and gamma rays. These catastrophic processes happen on a regular basis. The catch, however, is that they&#39;re regular on a planetary or universal timescale. BB relates a further analogy that might illustrate what I mean: lift your arms until they&#39;re horizontal to the ground and consider their span to be the entire history of the Universe. If someone now scrapes a file against one of your fingernails, it&#39;s equivalent to wiping humanity from existence. Even if civilisation-ending events happen at tiny intervals along your arm span, they&#39;re unlikely to happen during a single human lifetime. Extinction is unlikely to threaten contemporary humans, unless we manufacture it ourselves.&lt;/p&gt;
&lt;p&gt;Science has advanced since &lt;em&gt;A Short History of Everything&lt;/em&gt; was published in 2003, outdating some of its information. Pluto has been demoted to the rank of dwarf planet, the existence of the Higgs Boson particle has been confirmed experimentally, and what BB referred to as &#34;junk DNA&#34; is now believed to serve a purpose after all. The book also contains information that&#39;s just plain wrong, like the myth that church windows are thicker at the bottom due to the gradual flow of glass - they were just built like that. BB also gives credence to the popular myth that Albert Einstein was in any way an &#34;average&#34; student, when by Einstein&#39;s own account, he had mastered integral and differential calculus by the age of 14. There&#39;s obviously something seductive about the notion that there&#39;s a little Einstein buried deep inside all of us, if only we applied ourselves.&lt;/p&gt;
&lt;p&gt;Most disgracefully, BB buys into the old sailor myth of divers literally being sucked up and squished into the helmet of their diving suits, a phenomenon known as The Squeeze. Of course, this is a ridiculous flight of fancy, probably fabricated by J.B.S. Haldane after a rough session in the pressure pot. I don&#39;t understand how BB could ever be taken in by such an obviously fake story&lt;sup id=&#34;fnref:myth&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:myth&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Anyone who fixates on these minor inaccuracies is missing the Universe for the atoms, however. I happily recommend &lt;em&gt;A Short History of Everything&lt;/em&gt; to anyone with even a passing interest in science. It&#39;s packed with entertaining anecdotes and eye-opening analogies.&lt;/p&gt;
&lt;div class=&#34;footnote&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:moon&#34;&gt;
&lt;p&gt;The Moon is 384,400,000-ish metres from Earth; a page is roughly 0.00012 metres thick; there are 544 pages in A Short History of Nearly Everything (including many pages of references); 384,400,000/(0.00012x544)=~6 billion copies would be required to touch the moon; and there are 7-8 billion people on Earth. The stack would overshoot by tens of thousands of kilometres, but that&#39;s the best Bill Bryson-esque analogy I could come up with.&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:moon&#34; title=&#34;Jump back to footnote 1 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:myth&#34;&gt;
&lt;p&gt;This phenomenon was proved in an episode of Mythbusters. They created a &#34;meat man&#34; out of dead animal parts, sent him deep underwater in an old-fashioned diving suit, and cut off his air supply. The resulting pressure differential in the suit caused his entire body to be sucked up into his helmet. Yuck. (For reference, it&#39;s season 7, episode 19, &#34;Dumpster Diving&#34;. &lt;a href=&#34;https://www.dailymotion.com/video/x2n8zuu&#34;&gt;Here&#39;s a copy of the episode&lt;/a&gt; that might disappear by the time you read this).&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:myth&#34; title=&#34;Jump back to footnote 2 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        <link>https://kevingal.com/blog/shorthistory.html</link>
        <pubDate>Sat, 18 Jul 2020 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/shorthistory.html</guid>
    </item>
    <item>
        <title>Obese websites and planet-sized metronomes</title>
        <description>&lt;p&gt;As you may have heard, we&#39;re in the middle of a crisis.&lt;/p&gt;
&lt;p&gt;No, not that one. I&#39;m talking about the &lt;a href=&#34;https://idlewords.com/talks/website_obesity.htm&#34;&gt;website obesity crisis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The homepage of the &lt;a href=&#34;http://info.cern.ch/hypertext/WWW/TheProject.html&#34;&gt;first ever website&lt;/a&gt;, published by Tim Berners-Lee in 1991, was 2.2KB in size. It was a sparse list of links. Pure, aerodynamic HTML. The internet users of the time would have viewed it through black-screened terminals with green text.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/metronome/firstpage.png&#34;
     alt=&#34;The first ever webpage, published by Tim Berners-Lee in 1991. Black background, green text.&#34;
     class=&#34;centered&#34;&gt;

&lt;figcaption&gt;The first webpage.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Our expectations of the World Wide Web have grown since then, and so have websites. The median webpage size in 2020 is 2MB, and it has been increasing at a rate of about 165KB per year for the past 10 years&lt;sup&gt;&lt;a href=&#34;https://httparchive.org/reports/state-of-the-web&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. It is now 800 times larger than Tim&#39;s original homepage.&lt;/p&gt;
&lt;p&gt;In what follows, we&#39;ll explore the cause of this newfound corpulence, its repercussions, and my own struggles with website weight as I attempted to create a metronome web app in less than 1KB.&lt;/p&gt;
&lt;h3 id=&#34;weight-of-the-web&#34;&gt;Weight of the web&lt;/h3&gt;
&lt;p&gt;Why is the web so much heavier, these days? That&#39;s one of the questions that the &lt;a href=&#34;https://httparchive.org&#34;&gt;HTTP Archive&lt;/a&gt; attempts to answer. It&#39;s a community-run initiative to capture the state of the web over time. They catalogue millions of websites every month and publish the results as a database.&lt;/p&gt;
&lt;p&gt;After removing the smallest 10% and largest 10% of webpages from the HTTP Archive database for April 2020, we see that images account for almost 60% of the collective mass of the web. A further 25% is taken up by JavaScript, 6% by custom fonts, 5% by CSS, and 3% by video, until finally, a mere 2% of the pie is left for HTML.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/metronome/breakdown.png&#34;
     alt=&#34;Bar chart showing the web&#39;s mass by resource type. HTML 2.01%, videos 2.75%, CSS 4.93%, fonts 6.35%, JavaScript 24.95%, images 59.01%.&#34;
     class=&#34;centered&#34;&gt;

&lt;figcaption&gt;Percentage of the web&#39;s total mass taken up by common data types. More details on this chart are available in Appendix A.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Most websites don&#39;t have this exact breakdown of weight, but it&#39;s roughly what you can expect to download when you spend a lot of time on the web, depending on which sites you visit.&lt;/p&gt;
&lt;p&gt;The &#34;average&#34; 2MB webpage, then -- which, in fact, &lt;a href=&#34;https://www.igvita.com/2016/01/12/the-average-page-is-a-myth/&#34;&gt;doesn&#39;t exist&lt;/a&gt;, but is useful to think about -- comes with 1.2MB of image data (60% of 2MB). That&#39;s rather a lot of eyeball stimulation. The below portrait of William Howard Taft, the most voluminous ever president of the United States and the basis of the &lt;a href=&#34;https://tafttest.com/&#34;&gt;Taft Test&lt;/a&gt;, uses up just 2% of a 1.2MB budget. We can only assume either that modern websites include a &lt;em&gt;lot&lt;/em&gt; of Taft-sized images, or that their images are absurdly heavy.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/metronome/taft.jpg&#34;
     alt=&#34;A picture of President Taft, in black &amp; white. He appears to be a good-humoured man. He has a moustache. He&#39;s sitting in a chair. He&#39;s rotund.&#34;
     class=&#34;centered&#34;&gt;

&lt;figcaption&gt;President Taft, 1857-1930.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And let&#39;s be honest with ourselves: most images on the internet have less utility and aesthetic value than Taft. If you&#39;ve ever read a Medium article about a technical subject, headed by a high-resolution photograph of a windmill, then you know what I&#39;m talking about.&lt;/p&gt;
&lt;p&gt;More offensive still, the &#34;average&#34; webpage is now bundled with 500KB of JavaScript. If you wrote 200 lines of code per day at 80 characters per line, it would take a whole month to write a 500KB program. This is surprising to me, considering that the average website is less interactive than a tree stump. You could fit 15 copies of the original Super Mario Bros into 500KB. Yet, rather than a delightful platforming adventure worth hours of fun, we are instead subjected to ads, tracking scripts, and &lt;a href=&#34;http://lea.verou.me/2020/05/todays-javascript-from-an-outsiders-perspective/&#34;&gt;mountains of garbage&lt;/a&gt; pulled in from the JavaScript ecosystem.&lt;/p&gt;
&lt;p&gt;To summarise our survey of the modern web: it&#39;s fat. Unhealthily so.&lt;/p&gt;
&lt;h3 id=&#34;the-cost-of-the-fat-web&#34;&gt;The cost of the fat web&lt;/h3&gt;
&lt;p&gt;While some of us live in parts of the world with affordable, fast internet, others are not so fortunate. As of May 2020, the download of a 2MB webpage in Mauritania is worth approximately 6 minutes of labour. More specifically, &lt;a href=&#34;https://whatdoesmysitecost.com/#gniCost&#34;&gt;whatdoesmysitecost.com&lt;/a&gt; estimates that the download would cost 1.29% of Mauritania&#39;s daily gross national income per capita, and 1.29% of an 8-hour workday is ~6 minutes.&lt;/p&gt;
&lt;p&gt;Obviously, there are more pressing issues in Mauritania than fat websites, but it pays to consider that by playing fast and loose with the weight of your website, you may be making it inaccessible to large numbers of people. &lt;a href=&#34;https://blog.chriszacharias.com/page-weight-matters&#34;&gt;This post&lt;/a&gt; by an ex-YouTube engineer explains how a lightweight version of YouTube&#39;s video player made the site accessible to users in remote regions of Siberia.&lt;/p&gt;
&lt;p&gt;The overweight web also has an environmental impact. The internet as a whole consumes more electricity than the entire United Kingdom&lt;sup&gt;&lt;a href=&#34;https://www.websitecarbon.com/&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. So, if you&#39;re the sort of person who gets excited about recycling, then you should also consider shedding some of that dead weight from your website.&lt;/p&gt;
&lt;h3 id=&#34;making-an-earth-sized-web-app&#34;&gt;Making an Earth-sized web app&lt;/h3&gt;
&lt;p&gt;Recently, with this glum state of affairs at the back of my mind, I found myself in need of a metronome web app. A metronome, if you didn&#39;t know, is a tool that ticks at regular intervals.&lt;/p&gt;
&lt;p&gt;I didn&#39;t like any of the apps I found. They were grotesquely overweight (as large as 11.35MB), mobile-unfriendly (I can&#39;t express the horror of trying to set precise numeric values with a slider), and full of trackers (hi Google!).&lt;/p&gt;
&lt;p&gt;As a result, I set myself a challenge: to make my own, mobile-friendly, slider-free metronome app, with the constraint that it be less than 1KB in size. That&#39;s half the size of Tim Berners-Lee&#39;s original webpage. A tight margin, for sure, but this would be small fry compared to the &lt;a href=&#34;https://js1k.com/&#34;&gt;1KB JavaScript games&lt;/a&gt; that some people make for fun.&lt;/p&gt;
&lt;p&gt;The finished product is &lt;a href=&#34;/apps/metronome.html&#34;&gt;here&lt;/a&gt;. The first version was over 2.5KB, but by applying various dirty tricks (detailed in Appendix B, along with technical details of the app), I managed to shrink it down to 981 bytes, or ~3.5 tweets.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Metronome&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;viewport&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;width=device-width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;max-width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;line-height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=!&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AudioContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;)&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createOscillator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createGain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setValueAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exponentialRampToValueAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.05&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;linearRampToValueAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;stop&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;play&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;240&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))),&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,()=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))));&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;100&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c();&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;play&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The purpose of this exercise? Mostly as a point of comparison for other online metronome apps, which I believe are symptomatic of the horrid state of the web, and which we will examine in the next section.&lt;/p&gt;
&lt;h3 id=&#34;comparing-size&#34;&gt;Comparing size&lt;/h3&gt;
&lt;p&gt;Here&#39;s a size comparison of my metronome versus the top 7 metronomes, labelled A-G, that come up when you search &#34;metronome online&#34; with Generic Search Engine. The y-axis is on a logarithmic scale, which means that it counts from 1 to 10 to 100, instead of 1 to 2 to 3. Otherwise, some of the bars would be microscopically tiny. Metronome A is 11.35MB (around 10&lt;sup&gt;8&lt;/sup&gt; bytes), metronome G is 217.56KB (10&lt;sup&gt;6&lt;/sup&gt;), and my metronome is 981 bytes (10&lt;sup&gt;3&lt;/sup&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/metronome/size.png&#34;
     alt=&#34;Bar chart comparing sizes of various metronome apps to mine.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Yes, folks, you heard it here first: mine is smaller. To get a sense of how much smaller, consider this depiction of Earth and Jupiter (&lt;a href=&#34;https://theplanets.org/jupiter/&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/metronome/planets.jpg&#34;
     alt=&#34;todo&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Quoting universetoday.com&lt;sup&gt;&lt;a href=&#34;https://www.universetoday.com/37124/volume-of-the-planets/&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The largest planet in our Solar System, Jupiter’s size is astounding. Jupiter has a volume of 1.43 x 1015 cubic kilometers. To show what this number means, you could fit 1321 Earths inside of Jupiter. It is hard to imagine how large that actually is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If my metronome app were Earth, then Metronome A would have the volume of &lt;strong&gt;eight Jupiters&lt;/strong&gt;. As the article says, it is hard to imagine how large that actually is.&lt;/p&gt;
&lt;p&gt;Keep in mind that none of the larger metronomes offer any features besides ticking. Admittedly, they&#39;re much prettier, but my point is that the weight of these web apps is massively disproportionate to the functionality that they offer. And the same can be said for much of the modern web.&lt;/p&gt;
&lt;h3 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;I&#39;m not suggesting that we become leather-clad monks, purging strips of fat from our websites with puritan fury. While fun, compressing a website takes a lot of effort, and the end result tends to &lt;a href=&#34;/apps/metronome.html&#34;&gt;look like shit&lt;/a&gt;. Let&#39;s just try to keep our websites Earth-sized, please. Or even Neptune-sized. Not everyone can afford to download Jupiter.&lt;/p&gt;
&lt;h3 id=&#34;appendix-a-page-weight-breakdown&#34;&gt;Appendix A: Page weight breakdown&lt;/h3&gt;
&lt;p&gt;After loading the HTTP Archive database into Google BigQuery (it&#39;s free and takes 5 minutes, instructions &lt;a href=&#34;https://github.com/HTTPArchive/httparchive.org/blob/master/docs/gettingstarted_bigquery.md&#34;&gt;here&lt;/a&gt;), I ran this query to fetch the data I needed for my bar chart. &lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesHtml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesJS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;js&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesCSS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;css&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesImg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesFont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesVideo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesTotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;httparchive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary_pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_04_01_desktop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;bytesTotal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;456601&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bytesTotal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7363789&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The bounds on bytesTotal are the p10 and p90 values of page size, plucked from &lt;a href=&#34;https://httparchive.org/reports/page-weight&#34;&gt;here&lt;/a&gt;. They&#39;re intended to remove outliers. The bar heights are then &lt;code&gt;bytes/total*100&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;html 188774196140
js 2337263808937
css 462249675219
img 5528893867126
font 595097490698
video 257342218994
total 9405167424348
count 3728058
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might complain that this distribution is skewed, even after we&#39;ve removed outliers. &lt;em&gt;Some&lt;/em&gt; websites may have super heavy images, but &lt;em&gt;most&lt;/em&gt; websites don&#39;t. In response to that quibble, here&#39;s another query we can run. It shows the number of webpages that load images.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;httparchive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary_pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_04_01_desktop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;bytesImg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The answer turns out to be 4,658,956. There are ~4,660,072 webpages in the database, meaning that more than 99.9% of webpages have image data. And, according to the reports of the HTTP Archive, the median image weight of webpages is 950KB, or thereabouts. This means that 50% of webpages have 950KB or more of image data, and our figure of 1.2MB isn&#39;t far off the mark, skewed though it may be.&lt;/p&gt;
&lt;h3 id=&#34;appendix-b-clocks-and-golf&#34;&gt;Appendix B: clocks and golf&lt;/h3&gt;
&lt;p&gt;Here I&#39;ll describe how the &lt;a href=&#34;/apps/metronome.html&#34;&gt;metronome web app&lt;/a&gt; works, and also the series of gruesome hacks I employed to shrink it below 1KB.&lt;/p&gt;
&lt;p&gt;Humans are &lt;a href=&#34;https://meowni.ca/posts/metronomes/&#34;&gt;highly sensitive&lt;/a&gt; to audio delay, so it&#39;s important for a metronome app to tick as reliably as a Swiss clock. If you play audio directly in the main thread, which is what I tried before &lt;a href=&#34;https://www.html5rocks.com/en/tutorials/audio/scheduling/&#34;&gt;finding enlightenment&lt;/a&gt;, then you&#39;re going to suffer from unacceptable delays in sound whenever you lose control to the browser&#39;s UI and book-keeping functions.&lt;/p&gt;
&lt;p&gt;Instead, when you start the metronome, it kicks off a scheduling function in the main thread that runs every 25 milliseconds. The scheduling function calls JavaScript&#39;s WebAudio interface to schedule any beeps that are due to play in the next 100 milliseconds. WebAudio plays the beeps in a separate thread. Even if the scheduling function is delayed by 50ms or so, there&#39;s enough of a buffer that the next beep can still be scheduled on time.&lt;/p&gt;
&lt;p&gt;Apparently, this technique can also be applied to animation, making it useful for game development.&lt;/p&gt;
&lt;p&gt;As for making the app smaller, here are some of the things I tried:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.notryan.com/013.txt&#34;&gt;Removing unnecessary HTML&lt;/a&gt;. My favourite bits: 1) attributes don&#39;t need quotes if the value doesn&#39;t contain spaces, making &lt;code&gt;&amp;lt;p id=x&amp;gt;&lt;/code&gt; the same as &lt;code&gt;&amp;lt;p id=&#34;x&#34;&amp;gt;&lt;/code&gt;; and 2) if you omit &amp;lt;html&amp;gt;, &amp;lt;head&amp;gt; and &amp;lt;body&amp;gt; tags, they&#39;ll be generated for you by the browser.&lt;/li&gt;
&lt;li&gt;Various &lt;a href=&#34;https://dev.to/emnudge/js-code-golfing-how-to-ruin-everyone-s-day-40h3&#34;&gt;JavaScript golf techniques&lt;/a&gt;, such as replacing regular functions with arrow functions, replacing local variables with global ones, and reducing names to 1 letter.&lt;/li&gt;
&lt;li&gt;Running the HTML, CSS and JavaScript through minifiers to remove whitespace. The &lt;a href=&#34;https://javascript-minifier.com/&#34;&gt;JavaScript one&lt;/a&gt; in particular introduced some neat abbreviations, like replacing &lt;code&gt;false&lt;/code&gt; with &lt;code&gt;!1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Programmatically generating some of the buttons on page load, saving about 50 bytes.&lt;/li&gt;
&lt;/ul&gt;</description>
        <link>https://kevingal.com/blog/metronome.html</link>
        <pubDate>Sun, 07 Jun 2020 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/metronome.html</guid>
    </item>
    <item>
        <title>Did the Beatles love &#34;you&#34;?</title>
        <description>&lt;p&gt;On page 3 of &lt;em&gt;Help! 50 Songwriting, Recording and Career Tips used by the Beatles&lt;/em&gt;, author David Rowley suggests that songwriters should put the word &#34;you&#34; in the first line of their songs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Around half of all Lennon-McCartney lyrics use the magic songwriting words &#39;you&#39; or &#39;your&#39; in the first line.&lt;/p&gt;
&lt;p&gt;These words, especially when used with the words &#39;I&#39; or &#39;me&#39;, allow the listener to imagine that the song is about them and allow the listener to imagine that they are singing the song to another person.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For Beatles fans, this raises some incredibly unimportant questions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exactly how many Beatles songs refer to &#34;you&#34; in the first line?&lt;/li&gt;
&lt;li&gt;Are there any other words that appear often in Beatles songs?&lt;/li&gt;
&lt;li&gt;Does &#34;you&#34; lead to some measurable increase in song quality, or is the author of this book blowing hot steam out of his &lt;a href=&#34;https://www.youtube.com/watch?v=l-ekNlk5VDM&#34;&gt;honey pie&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To answer these questions, we&#39;ll do some analysis on the lyrics of Lennon-McCartney (because who cares about Ringo), and we&#39;ll see how the use of &#34;you&#34; (a.k.a. the second person perspective) has affected the success of songs in the Billboard music charts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/beatles-and-you/sad-ringo.jpeg&#34;
     alt=&#34;Ringo Starr with a sad expression on his face in black &amp; white.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;how-many-lennon-mccartney-songs-are-addressed-to-you&#34;&gt;How many Lennon-McCartney songs are addressed to &#34;you&#34;?&lt;/h3&gt;
&lt;p&gt;I downloaded the lyrics of the Beatles&#39; &#34;core catalogue&#34; studio albums (&lt;a href=&#34;https://github.com/Kevinpgalligan/BeatlesAndYou/blob/master/beatles_lyrics_scraper.py&#34;&gt;code&lt;/a&gt;). Instrumental songs, cover songs and songs credited to Ringo Starr / George Harrison were removed manually. This left a total of 138 songs, about 3/4 of the full ~180 songs published by Lennon-McCartney.&lt;/p&gt;
&lt;p&gt;Analysis of the lyrics (&lt;a href=&#34;https://github.com/Kevinpgalligan/BeatlesAndYou/blob/master/lyrics_analysis.py&#34;&gt;code&lt;/a&gt;) shows that &lt;strong&gt;29%&lt;/strong&gt; of the songs contain &#34;you&#34; in the first line (or any of its related forms: &#34;your&#34;, &#34;yours&#34; and &#34;yourself&#34;). This is somewhat short of &#34;around half&#34;, as claimed by David Rowley, but since &lt;strong&gt;82%&lt;/strong&gt; of the songs contain &#34;you&#34; &lt;em&gt;somewhere&lt;/em&gt; in the lyrics, I&#39;m willing to give him a pass. Lennon-McCartney did, in fact, love &#34;you&#34;.&lt;/p&gt;
&lt;p&gt;Here&#39;s a comparison with some other words. Surprisingly, Lennon-McCartney&#39;s love of the second person was outstripped by their love of themselves, as &lt;strong&gt;86%&lt;/strong&gt; of lyrics contain the word &#34;I&#34; (or &#34;me&#34;, or &#34;my&#34;, or &#34;myself&#34;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/beatles-and-you/word-freq-beatles.png&#34;
     alt=&#34;Percentage of Lennon-McCartney songs that various words appear in; I 86.2%, you 81.9%, love 44.2%, day 23.9%, friend 8.7%, life 7.2%, road 5.1%, guitar 0.7%, mustard 0.7%, beatle 0.0%.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Other observations: in 138 songs, they never once mentioned the Beatles. Not even in Glass Onion. And roads, or the things that are done in them, are almost as popular a theme as life itself.&lt;/p&gt;
&lt;h3 id=&#34;chart-success-and-you&#34;&gt;Chart success and you&lt;/h3&gt;
&lt;p&gt;Lennon-McCartney loved &#34;you&#34;, evidently, but can we show that this aspect of their style is worth copying? Does it lead to more successful songs?&lt;/p&gt;
&lt;p&gt;To this end, I downloaded the songs in the weekly &lt;a href=&#34;https://en.wikipedia.org/wiki/Billboard_Hot_100&#34;&gt;Billboard Hot 100&lt;/a&gt; from the start of 1962 until the start of 1970 (&lt;a href=&#34;https://github.com/Kevinpgalligan/BeatlesAndYou/blob/master/chart_scrape.py&#34;&gt;code&lt;/a&gt;). That&#39;s the active period of the Beatles, roughly speaking, spanning 417 weeks and a total of 5681 unique songs in the charts. On average, ~86% of the songs on the Billboard Hot 100 were actually repeats from previous weeks.&lt;/p&gt;
&lt;p&gt;As a measure of success, I assigned a score to each of the songs: 100 points for a week in the #1 position on the charts, 99 points for #2, and so on. For example, a song that charted at #50, #76 and #98 over a period of 3 weeks would receive a total of (101-50)+(101-76)+(101-98) = 51+25+3 = 79 points.&lt;/p&gt;
&lt;p&gt;I then gathered the lyrics of 5184 (91.3%) of those songs (&lt;a href=&#34;https://github.com/Kevinpgalligan/BeatlesAndYou/blob/master/chart_lyrics_scrape.py&#34;&gt;code&lt;/a&gt;, &lt;a href=&#34;https://github.com/Kevinpgalligan/BeatlesAndYou/blob/master/google_lyrics_scrape.py&#34;&gt;more code&lt;/a&gt;, &lt;a href=&#34;https://github.com/Kevinpgalligan/BeatlesAndYou/blob/master/general_lyrics_scrape.py&#34;&gt;even more code&lt;/a&gt;). The ones I left out were by the Beatles, instrumental, or had lyrics that were difficult to track down on the internet.&lt;/p&gt;
&lt;p&gt;Here are the success scores of the songs with lyrics, as a cumulative frequency plot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/beatles-and-you/success-scores-cumulative.png&#34;
     alt=&#34;Cumulative frequency graph of song success, as per the metric described above.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;From left to right, the curve increases as the success score overtakes more and more songs. The curve starts off with a sharp rise, gobbling up songs that barely made it onto the chart, such as the slightly creepy Father Knows Best by the Radiants: &#34;Whenever I&#39;m in trouble I ask my dad / For his advice / ... / He said to make your girl love ya / ... / You got to get tough / And treat her wrong / And if she cries, so what / She&#39;s trying to put you to a test&#34;. It then has a long tail of extremely successful and enduring songs, such as Everyday People by Sly &amp;amp; The Family Stone and...&lt;/p&gt;
&lt;p&gt;...&lt;a href=&#34;https://www.youtube.com/watch?v=p13yZAjhU0M&#34;&gt;Wipe Out&lt;/a&gt;!? That&#39;s right. Wipe Out is, by our metric, and among the songs we have selected, the most successful song of the 60s, at a total of 2019 points. And its 1-line lyrics are a mocking rejection of the second person perspective: &#34;Ah ha ha ha ha ha ha ha ha ha ha ha, wipe out!&#34;. The 60s certainly were wild.&lt;/p&gt;
&lt;p&gt;Analysing the lyrics of all the songs, we see that Lennon-McCartney were not at all exceptional in their love of the second person perspective. &lt;strong&gt;27%&lt;/strong&gt; of the songs contain &#34;you&#34; in the first line, while &lt;strong&gt;88%&lt;/strong&gt; contain &#34;you&#34; somewhere in the lyrics.&lt;/p&gt;
&lt;p&gt;Finally, to see if there&#39;s a relationship between use of the second person perspective and chart success, let&#39;s look at the distribution of success scores for songs that contain &#34;you&#34; (n=4564) versus songs that don&#39;t (n=620).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/beatles-and-you/you-vs-notyou-boxplot.png&#34;
     alt=&#34;box plot comparing success scores of songs containing you vs songs that don&#39;t; the distributions are similar but with the &#39;not you&#39; songs having a slightly higher median / middle value.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;The coloured boxes show the range of success scores you would be left with if you dropped the 25% least successful and 25% most successful songs. The horizontal dark blue line is the median success score, which is better than exactly 50% of songs. The whiskers extending from the boxes represent the full range of the success scores -- except for outliers, which are represented by circles. Wipe Out sits triumphantly above them all.&lt;/p&gt;
&lt;p&gt;As it turns out, songs that don&#39;t contain &#34;you&#34; have a higher median success score by 13% (278 vs 316), contrary to what we would expect if we believed David Rowley&#39;s songwriting tip.&lt;/p&gt;
&lt;p&gt;Here&#39;s the distribution of songs that contain &#34;you&#34; in the first line (n=1412) versus those that don&#39;t (n=3772).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/beatles-and-you/youfirstline-vs-notyoufirstline-boxplot.png&#34;
     alt=&#34;box plot comparing success scores of songs containing you in the first line vs songs that don&#39;t; the distributions are similar, but the songs with you in the first line have a slightly higher median.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Songs with &#34;you&#34; in the first line actually have a 9% higher median success score than those without (302 vs 276). It seems that there are a number of lower-scoring &#34;you&#34; songs that don&#39;t have &#34;you&#34; in the first line, which drag down the median of whichever category they&#39;re in.&lt;/p&gt;
&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;We have seen that the second person perspective was overwhelmingly common in 60s song lyrics. More than Lennon-McCartney secret sauce, it was standard songwriting practice. Furthermore, our overanalysis hasn&#39;t shown the use of &#34;you&#34; to have a correlation with chart success. Considering that it was used in almost 90% of chart songs, however, there has to be something of secret sauce about it. Chart-hitting 60s songwriters must have known what they were doing... right?&lt;/p&gt;
&lt;h3 id=&#34;fun-bonus-reads&#34;&gt;Fun bonus reads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaylinpavlik.com/50-years-of-pop-music/&#34;&gt;50 Years of Pop Music&lt;/a&gt; (cool data analysis and visualisation of song lyrics)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aeon.co/ideas/why-are-pop-songs-getting-sadder-than-they-used-to-be&#34;&gt;Why are pop songs getting sadder than they used to be?&lt;/a&gt; (sentiment analysis)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@latenightfroyo/the-6-types-of-billboard-hits-e0cb2987abf&#34;&gt;The 6 Types of Billboard Hits&lt;/a&gt; (song clustering)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npr.org/sections/allsongs/2013/05/29/187168874/the-good-listener-whats-more-important-lyrics-or-music?t=1585780553905&#34;&gt;The Good Listener: What&#39;s More Important, Lyrics Or Music?&lt;/a&gt; (relevant NPR article)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-code&#34;&gt;The code&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Kevinpgalligan/BeatlesAndYou&#34;&gt;It&#39;s all here&lt;/a&gt;.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/beatles-and-you.html</link>
        <pubDate>Wed, 01 Apr 2020 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/beatles-and-you.html</guid>
    </item>
    <item>
        <title>Counting the number of days until your birthday and why it&#39;s a useful programming trick</title>
        <description>&lt;p&gt;Spot quiz! See how many of these calculations you get right. No calculator necessary.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Today is March 2nd, your birthday is March 28th. How many days remain until your birthday, not including today and not including your birthday?&lt;/li&gt;
&lt;li&gt;You have an array with 100 elements. How many elements are there between index 3 and index 97, not including the element at index 3 and including the element at index 97?&lt;/li&gt;
&lt;li&gt;If you have 10 cabbages in a row, how many cabbages are there between the 2nd cabbage and the 9th cabbage, including the 2nd cabbage but not the 9th one?&lt;/li&gt;
&lt;li&gt;A group of citizens in the Dystopian city of Fencepostia, with ID numbers from 50 to 60, have been selected for thought purging. How many citizens have been selected, including both citizen #50 and citizen #60?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Answers in 5...&lt;/p&gt;
&lt;p&gt;4...&lt;/p&gt;
&lt;p&gt;3...&lt;/p&gt;
&lt;p&gt;2...&lt;/p&gt;
&lt;p&gt;1...&lt;/p&gt;
&lt;p&gt;&lt;small&gt;spoiler: 25, 94, 7 and 11.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;If you got all of them correct without finger-counting, without drops of nervous sweat rolling down your neck, and without asking any questions on StackOverflow, then congratulations. You are an Übermensch of calculation, and there is nothing for you to learn here.&lt;/p&gt;
&lt;p&gt;If not, then you&#39;ve fallen victim to one of the 2 hard problems&lt;sup id=&#34;fnref:joke&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:joke&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; in computer science: the off-by-1 error.&lt;/p&gt;
&lt;p&gt;Off-by-1 errors have been written about since before Jesus Christ. At the latest, they were mentioned by &lt;a href=&#34;https://web.archive.org/web/20160305221341/http://www.dsm.fordham.edu/~moniot/Opinions/fencepost-error-history.shtml&#34;&gt;a Roman named Vitruvius&lt;/a&gt;, who served in the army of Julius Caesar. He was talking about the number of fenceposts around a temple, but the principle is the same. The problem is old, and you shouldn&#39;t feel bad if it caught you out.&lt;/p&gt;
&lt;p&gt;The good news is that there&#39;s a simple, easy-to-remember formula that applies to all of the above calculations. Once you&#39;ve learned it, you&#39;ll never again suffer from this particular brand of off-by-1 horror. Nor will you miscount the number of days until Aunt Catherine&#39;s birthday.&lt;/p&gt;
&lt;h3 id=&#34;give-me-the-formula&#34;&gt;Give me the formula!&lt;/h3&gt;
&lt;p&gt;Let&#39;s reconsider all of the above problems as calculations of interval length.&lt;/p&gt;
&lt;p&gt;What&#39;s an interval? It&#39;s a set of integers that lies between a lower and upper bound. For example, the interval &lt;code&gt;[3, 7]&lt;/code&gt; contains the numbers 3, 4, 5, 6 and 7. It&#39;s a set, so we write it using the set notation &lt;code&gt;{3,4,5,6,7}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The bounds of an interval can be &lt;em&gt;open&lt;/em&gt; or &lt;em&gt;closed&lt;/em&gt;. If a bound is open, it means that the bound itself is excluded from the interval. If a bound is closed, it&#39;s included. In the above example, both bounds were closed. The same interval with open bounds, written &lt;code&gt;(3, 7)&lt;/code&gt;, is the set &lt;code&gt;{4,5,6}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The bounds can also be half-open. The half-open intervals &lt;code&gt;(3, 7]&lt;/code&gt; and &lt;code&gt;[3, 7)&lt;/code&gt; are &lt;code&gt;{4,5,6,7}&lt;/code&gt; and &lt;code&gt;{3,4,5,6}&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Now, let&#39;s rephrase the problems from before in terms of intervals.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Birthday: the open interval &lt;code&gt;(2, 28)&lt;/code&gt;, contains 25=28-2-1 elements.&lt;/li&gt;
&lt;li&gt;Array: the half-open interval &lt;code&gt;(3, 97]&lt;/code&gt;, contains 94=97-3 elements.&lt;/li&gt;
&lt;li&gt;Cabbages: the half-open interval &lt;code&gt;[2, 9)&lt;/code&gt;, contains 7=9-2 elements.&lt;/li&gt;
&lt;li&gt;Dystopia: the closed interval &lt;code&gt;[50, 60]&lt;/code&gt;, contains 11=60-50+1 elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have all 3 types of interval here: open, half-open and closed. If you look closely, you&#39;ll notice a pattern in how we calculate the number of elements: subtract the lower bound from the upper bound, then add -1, 0 or +1 depending on the type of interval.&lt;/p&gt;
&lt;p&gt;Here it is more explicitly. If you have an open interval &lt;code&gt;(L, U)&lt;/code&gt;, then the number of elements is &lt;code&gt;U-L-1&lt;/code&gt;. If you have a half-open interval &lt;code&gt;(L, U]&lt;/code&gt; or &lt;code&gt;[L, U)&lt;/code&gt;, then it&#39;s &lt;code&gt;U-L&lt;/code&gt;. And finally, if you have a closed interval &lt;code&gt;[L, U]&lt;/code&gt;, it&#39;s &lt;code&gt;U-L+1&lt;/code&gt;. They&#39;re all the same formula, you just have to add 1 if both bounds are closed and subtract 1 if they&#39;re both open.&lt;/p&gt;
&lt;p&gt;This is the reason why programming interfaces use half-open bounds for ranges. In Python, for example, you say &lt;code&gt;mylist[L:L+N]&lt;/code&gt; to copy the list items with indexes in the interval &lt;code&gt;[L, L+N)&lt;/code&gt;. That&#39;s (L+N)-L=N elements. Much neater than having rogue +1s and -1s floating around the place.&lt;/p&gt;
&lt;p&gt;That&#39;s it. I was going to make this into a whole big thing, but it&#39;s really that simple. I used to come up with small example cases and finger-count in order to figure out interval length. This way is easier.&lt;/p&gt;
&lt;!-- Fuck Shane! --&gt;

&lt;h3 id=&#34;farewell-to-fencepostia&#34;&gt;Farewell to Fencepostia&lt;/h3&gt;
&lt;p&gt;You should now be able to count the number of days until your birthday with full confidence, and perhaps more usefully, avoid annoying off-by-1 errors in your programming. Happy counting, and say hello to Aunt Catherine.&lt;/p&gt;
&lt;div class=&#34;footnote&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:joke&#34;&gt;
&lt;p&gt;From the over-used joke: &#34;There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors.&#34;&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:joke&#34; title=&#34;Jump back to footnote 1 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        <link>https://kevingal.com/blog/interval-length.html</link>
        <pubDate>Sat, 01 Feb 2020 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/interval-length.html</guid>
    </item>
    <item>
        <title>Finding Mona Lisa in the Game of Life</title>
        <description>&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;&gt;Game of Life&lt;/a&gt; is a 2d, grid-shaped petri dish. Each grid square in the dish is a cell that can be either alive or dead.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/some-life.gif&#34;
     alt=&#34;Evolution of Life for a number of states.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;The petri dish changes state according to simple rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A dead cell comes to life if it has 3 adjacent cells (or &#34;neighbours&#34;) that are alive, through reproduction.&lt;/li&gt;
&lt;li&gt;A live cell with more than 3 live neighbours dies due to overcompetition.&lt;/li&gt;
&lt;li&gt;A live cell with fewer than 2 live neighbours dies due to loneliness.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every cell in the above animation lives and dies according to these rules.&lt;/p&gt;
&lt;p&gt;Besides resulting in cool-looking patterns, it has been proven that the Game of Life (&#34;Life&#34; for short) can simulate anything that can be done by a computer, whether that&#39;s summing numbers or captioning images of cats. Not bad for a petri dish.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/spaceship.gif&#34;
     alt=&#34;Spaceship pattern moving along in Life&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;What does this have to do with Mona Lisa? It&#39;s easy to load a black &amp;amp; white picture as a Life state, where black pixels are live cells and white pixels are dead cells. This allows us to run a Life simulation with a state that looks like Mona Lisa. The dark regions die off immediately due to overpopulation, leaving an outline, which then melts away further and leaves only hints of the original picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/mona-start.gif&#34;
     alt=&#34;Evolution of Life with Mona Lisa picture as starting state&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;This looks kinda cool, but what if we want to find a Life state that eventually, after following the rules of Life for a few rounds, reaches a state that looks like Mona Lisa? This requires working backwards instead of forwards from the target picture, which is a &lt;strong&gt;much&lt;/strong&gt; more difficult problem.&lt;/p&gt;
&lt;p&gt;In this article, we&#39;re going to explore just how difficult this problem is, and how it can be attempted using what are known as &#34;SAT solvers&#34;. We&#39;ll then look at animations of flowers, Steve Buscemi, and other objects of interest that we can generate with the solution.&lt;/p&gt;
&lt;h3 id=&#34;life-the-universe-and-sat-solvers&#34;&gt;Life, the Universe and SAT Solvers&lt;/h3&gt;
&lt;p&gt;We call Life state A the &#34;parent&#34; of state B if A turns into B by following the rules of Life. The reason that it&#39;s difficult to find the parent of a state is that the rules of Life are non-reversible. There&#39;s no direct way to go from a Life state to its parent, and in fact, it&#39;s possible for a state to have multiple parents or even no parents.&lt;/p&gt;
&lt;p&gt;What we &lt;em&gt;can&lt;/em&gt; do is construct a boolean equation that captures the conditions that any parent state of our target state must satisfy, then solve it to find a parent, if a parent exists.&lt;/p&gt;
&lt;p&gt;(Note: a boolean equation is an equation where the variables take on true / false values, and where the operators, instead of the pluses and minuses that we usually see, are replaced by boolean operators such as AND and OR. For example, the equation &lt;code&gt;sour AND (NOT sweet)&lt;/code&gt; is solved by setting &lt;code&gt;sour:=true&lt;/code&gt; and &lt;code&gt;sweet:=false&lt;/code&gt;. &lt;a href=&#34;https://en.wikipedia.org/wiki/Boolean_algebra&#34;&gt;Read more here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/scream.gif&#34;
     alt=&#34;Evolution of the Scream painting as a Life state&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the boolean equation that we construct, each variable corresponds to a cell and the value of the variable indicates the health of the cell. False means that the cell is dead, while true means that it&#39;s alive. If we find a set of variable assignments that causes the equation to evaluate to true, then the corresponding Life state (with false/true variables corresponding to dead/live cells) is a parent of our target state.&lt;/p&gt;
&lt;p&gt;What will the equation look like? Let&#39;s consider a 3x3 Life grid as an example.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  1 2 3
a o x x
b x x x
c x o x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The middle cell, b2, is alive. For it to be alive in this state, one of the following must be true:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It was alive in the previous state and 2-3 of its neighbours were also alive.&lt;/li&gt;
&lt;li&gt;It was dead in the previous state and 3 of its neighbours were alive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keeping in mind that true means alive and false means dead, this can be translated to a boolean equation in a fairly literal way.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(b2 AND ((a1 AND a2 AND !a3 AND !b1 AND !b3 AND !c1 AND !c2 AND !c3)
         OR (a1 AND !a2 AND a3 AND !b1 AND !b3 AND !c1 AND !c2 AND !c3)
         OR ...repeat 82 more times for other valid neighbour combinations))
OR
(!b2 AND ((a1 AND a2 AND a3 AND !b1 AND !b3 AND !c1 AND !c2 AND !c3)
          OR ...repeat 55 more times for other valid neighbour combinations))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we repeat this construction for every cell in the grid and chain them together using ANDs, we end up with an equation that we can solve to find a parent of the target state. And, as it happens, there are many &#34;SAT-solving&#34; programs that search for solutions to boolean equations. Once we have our equation, we can ship it off to our SAT solver of choice and sit back, relaxedly sipping our lattes until it gets back to us with a result.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/girl-with-a-pearl-earring.gif&#34;
     alt=&#34;Evolution of the Girl With a Pearl Earring painting as a Life state&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;great-lets-move-on-to-the-pretty-pictures&#34;&gt;Great, let&#39;s move on to the pretty pictures&lt;/h3&gt;
&lt;p&gt;WAIT. While this is nice in theory, there are significant &#34;buts&#34;.&lt;/p&gt;
&lt;p&gt;The first &#34;but&#34; is that, as we touched on in the previous section, &lt;em&gt;not all Life states have parents&lt;/em&gt;. Such states are known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Garden_of_Eden_(cellular_automaton)&#34;&gt;Gardens of Eden&lt;/a&gt;. Here&#39;s an example of a Garden of Eden from Wikipedia. It&#39;s impossible to reach this state from any other 9x33 Life state.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/garden-of-eden-example.png&#34;
     alt=&#34;An example of a Garden of Eden&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;If our target picture happens to be a Garden of Eden in Life, then the SAT solver will definitely fail to find a parent, because no parent will exist. And the larger a Life state, the more likely it is to be a Garden of Eden, because it has more sub-sections that can possibly be in impossible configurations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/starry-night.gif&#34;
     alt=&#34;Evolution of Starry Night as a Life state&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;The second &#34;but&#34; is that, as the number of cells increases, so too does the difficulty of the problem. Trying to generate a SAT equation for ~1800 cells blew up my program by consuming the entire 1GB of memory that was available to it. The time taken to find the parent of a Life state also starts to become prohibitive with more than ~400 cells. &lt;a href=&#34;https://en.wikipedia.org/wiki/Boolean_satisfiability_problem&#34;&gt;SAT problems&lt;/a&gt;, after all, are in the NP-complete class of problems, which means that they are damn hard to solve with current methods.&lt;/p&gt;
&lt;p&gt;To demonstrate this, below are the timings I got after running backsearch on random Life states of varying sizes, backsearch being the process of finding a Life state&#39;s parent. This includes the time taken to generate the SAT encoding. For the record, my processor is a wimpy i3-8130U 2.20GHz.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/cells-vs-backsearch-time.png&#34;
     alt=&#34;Time for backsearch vs number of cells, seems to grow exponentially&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;As a result of these &#34;buts&#34;, any pictures we use in this article will be 20x20 or less (&amp;lt;=400 cells). Beyond that, the problems take a long time for my computer to solve, and there is often no solution.&lt;/p&gt;
&lt;p&gt;Here&#39;s the output of backsearch on a modest 13x11 sad face. It manages to find 2 previous states before landing in a Garden of Eden. Interestingly, there&#39;s no hint of the sad face in the first state, and not much more in the second state, although the live cells do seem to converge towards their final positions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/sadface.gif&#34;
     alt=&#34;Life state becomes sad face, found using backsearch&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-results&#34;&gt;The results&lt;/h3&gt;
&lt;p&gt;Here&#39;s the result of running backsearch on Mona Lisa&#39;s face. The parent we find looks nothing like Mona Lisa. It&#39;s also a Garden of Eden, so we&#39;ve run into a dead-end and can&#39;t backsearch any further.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/mona.gif&#34;
     alt=&#34;Life becomes Mona Lisa&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;More results, this time on a flower. The parent state found by the SAT solver is, once again, a Garden of Eden. It contains a faint outline of the flower.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/flower.gif&#34;
     alt=&#34;Life becomes a flower&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Marilyn Monroe and her Garden of Eden parent.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/marilyn.gif&#34;
     alt=&#34;Life becomes Marilyn Monroe&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Steve Buscemi, who looks like a pissed-off &lt;a href=&#34;https://www.smbc-comics.com/&#34;&gt;SMBC&lt;/a&gt; character when in black and white.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/buscemi.gif&#34;
     alt=&#34;Life becomes Steve Buscemi&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Aaaaand a puppy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/puppy.gif&#34;
     alt=&#34;Life becomes a puppy&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, besides the sad face, we only ever manage a single successful backsearch before running into a dead-end.&lt;/p&gt;
&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;It&#39;s possible to find parents of Game of Life states, although it&#39;s a difficult problem for computers to solve. We could possibly speed up the search by using a different SAT encoding of the problem. We could also replace MiniSAT with a different SAT solver.&lt;/p&gt;
&lt;p&gt;The parents found by our backsearch barely resemble the target picture and often turn out to be Gardens of Eden. To find longer chains of Life states that gradually turn into the target picture, we could identify multiple parent states and pick the one that a) most resembles the target picture, and b) has some property that&#39;s less common in Gardens of Eden (more clustered live cells, perhaps?).&lt;/p&gt;
&lt;p&gt;Finally, the Game of Life is just one of &lt;a href=&#34;https://en.wikipedia.org/wiki/Cellular_automaton&#34;&gt;many possible rulesets&lt;/a&gt; that define the behaviour of petri dishes. It would be interesting to experiment with different rulesets and see if they&#39;re more amenable to the goal of gradually evolving chaos into a picture.&lt;/p&gt;
&lt;p&gt;On that note, here&#39;s a parting gift. Run this Life state through a 19x19 &lt;a href=&#34;https://www.dcode.fr/game-of-life&#34;&gt;Life simulator&lt;/a&gt; and see what happens.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/message.png&#34;
     alt=&#34;Secret message&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;technical-details&#34;&gt;Technical details&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Kevinpgalligan/MonaLisaGameOfLife&#34;&gt;Here&#39;s the code&lt;/a&gt; to run Life simulations, do backsearch and create GIFs. It&#39;s all in Common Lisp. I&#39;ve only tested it using the SBCL implementation of Common Lisp. The cl-sat library was used as a wrapper to call the MiniSat SAT solver, while the skippy library was used to create GIFs. Credit to the #lispgames IRC community for helping me with my silly questions.&lt;/p&gt;
&lt;h3 id=&#34;addendum-july-18th-2020&#34;&gt;Addendum (July 18th 2020)&lt;/h3&gt;
&lt;p&gt;On further reflection, the main limit on size seemed to be cl-sat, both because it was slow to convert the SAT expression to the form expected by SAT solvers and because it exhausted memory rather easily. I imagine it would be possible to handle much larger Life grids by cutting out cl-sat and writing the SAT constraints directly to a file, which could then be passed to your SAT solver of choice.&lt;/p&gt;
&lt;p&gt;Also, based on Reddit conversation, it seems that you can avoid Gardens of Eden by searching multiple generations into the past in the same SAT expression. To clarify: if you go original -&amp;gt; parent -&amp;gt; grandparent, then parent can turn out to be a Garden of Eden. The proposal is to go directly from original -&amp;gt; grandparent. I don&#39;t know to what extent this would increase the complexity of the expression.&lt;/p&gt;
&lt;p&gt;Maybe I&#39;ll come back to this some day and find a giant Life state that turns into a detailed portrait of John Conway.&lt;/p&gt;
&lt;h3 id=&#34;further-reading&#34;&gt;Further reading&lt;/h3&gt;
&lt;p&gt;Some fun stuff I came across while researching this article.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My first idea was to use evolutionary algorithms for finding patterns in Life, but &lt;a href=&#34;https://pdfs.semanticscholar.org/ba77/59e4d871d09459e3751d110137a8434591f6.pdf&#34;&gt;this turned out to have been done already&lt;/a&gt; in a paper titled &#34;Generating Interesting Patterns in Conway’s Game of Life Through a Genetic Algorithm&#34; by Alfaro, Mendoza and Tice.&lt;/li&gt;
&lt;li&gt;I then had the idea to look for specific patterns, such as pictures. I wasted a bunch of time on trying to do this using evolutionary algorithms until realising that the problem could be solved directly using SAT. A brief search brings up multiple backsearch programs for Life &lt;a href=&#34;https://github.com/flopp/gol-sat&#34;&gt;[1]&lt;/a&gt;&lt;a href=&#34;https://www.conwaylife.com/forums/viewtopic.php?f=9&amp;amp;t=3247&#34;&gt;[2]&lt;/a&gt;. They don&#39;t seem to have been applied to find pictures, however.&lt;/li&gt;
&lt;li&gt;Backwards solver #2 (from the previous point) mentions The Art of Computer Science, Volume 4, Fascicle 6 as a source of information and exercises on backsearch in Life. In particular, it describes a more efficient SAT encoding. I haven&#39;t been able to get my hands on the full text, though.&lt;/li&gt;
&lt;li&gt;A cool thing: &lt;a href=&#34;https://codegolf.stackexchange.com/questions/38573/paint-a-still-life-or-a-moving-one-draw-an-image-in-the-game-of-life&#34;&gt;still life paintings in Life&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Another cool thing: &lt;a href=&#34;http://tlrobinson.net/blog/2009/02/game-of-life-generator/&#34;&gt;text &amp;amp; image generator in Life&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/programming/comments/ev5nv2/finding_mona_lisa_in_the_game_of_life/&#34;&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=22552006&#34;&gt;Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/mona-lisa-gol/venus.gif&#34;
     alt=&#34;Life state becomes the Birth of Venus&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;tiny&#34;&gt;&lt;a href=&#34;/static/img/mona-lisa-gol/message.gif&#34;&gt;parting gift spoiler&lt;/a&gt;&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/mona-lisa-gol.html</link>
        <pubDate>Tue, 28 Jan 2020 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/mona-lisa-gol.html</guid>
    </item>
    <item>
        <title>Random RGB values that average to N; or, Pointlessness and Probability</title>
        <description>&lt;p&gt;On this episode of Problems That Don&#39;t Need to Be Solved, we have &lt;a href=&#34;https://www.reddit.com/r/computerscience/comments/a1ea1s/create_program_to_generate_random_rgb_values_that/&#34;&gt;a doozy from r/computerscience&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generate a random RGB value where the average of R, G and B is A, A being an integer from 0-255.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, we have to generate a random RGB value so that (R+G+B)/3=A, or equivalently, R+G+B=3A. We&#39;ll solve this problem using the Python programming language and learn some neat &lt;a href=&#34;https://en.wikipedia.org/wiki/Combinatorics&#34;&gt;combinatorics&lt;/a&gt; along the way.&lt;/p&gt;
&lt;h3 id=&#34;an-attempt&#34;&gt;An attempt&lt;/h3&gt;
&lt;p&gt;The first algorithm that might come to mind is to generate R, G and B one at a time, ensuring that we satisfy the constrants of the problem at each step. Being RGB, they have to be in the range 0-255. We must also ensure that it remains possible to satisfy R+G+B=3A. If we stay within these constraints, then we will always end up with a valid RGB value with an average of A, no matter what value A has. Note that there&#39;s always at least one solution to R+G+B=3A, and that&#39;s the RGB value (A,A,A).&lt;/p&gt;
&lt;p&gt;Here&#39;s this simple algorithm in Python code.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;rd&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate_rgb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# Generate a random value for R, ensuring that:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#  1) 0 &amp;lt;= R &amp;lt;= 255&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#  2) R &amp;lt;= 3A&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#  3) R &amp;gt;= 3A - 2*255&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# We need #3 because otherwise, even with G=B=255, we&amp;#39;d&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# have R+G+B&amp;lt;3A and the average of R, G, B would be less than A.&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# Similar conditions to satisfy for G.&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;G&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This approach seems reasonable, and if we run a test that checks whether the resulting RGB values have an average of A (for A=1), it passes with &lt;font color=&#34;red&#34;&gt;flyi&lt;/font&gt;&lt;font color=&#34;green&#34;&gt;ng c&lt;/font&gt;&lt;font color=&#34;blue&#34;&gt;olours&lt;/font&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;rgbs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_rgb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;PASS&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rgb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rgb&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rgbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;FAIL&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# output: PASS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, this doesn&#39;t give us the full picture. Besides ensuring that R+G+B=3A, we also need to check that all of the possible RGB values are equally likely to appear, since the problem statement requires randomness. Graphing the frequency of the possible values, we see that this is not the case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/rgb-average/rgb-value-distribution-broken.png&#34;
     alt=&#34;distribution of RGB values&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3,0,0) is the most likely value by far at ~25%. The pie chart below illustrates why this is the case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/rgb-average/first-algo-bug-visualisation.png&#34;
     alt=&#34;bug visualisation pie chart&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our algorithm picks an R value from 0, 1, 2 and 3 with equal probability, so 25% of the probability pie is assigned to each possible R value. The quarter slices of pie are then further divided by the number of possible GBs that satisfy R+G+B=3A. For R=3, the only valid GB value is (0,0), and so the RGB value (3,0,0) ends up with a whole 25% slice of probability. For R=1, the possible GBs are (0,2), (2,0) and (1,1), so the 25% slice is divided between the RGB values of (1,0,2), (1,2,0) and (1,1,1), giving them each a probability of ~8.3%.&lt;/p&gt;
&lt;h3 id=&#34;well-ill-be-damned-whats-the-darn-tootin-solution-then&#34;&gt;Well, I&#39;ll be damned! What&#39;s the darn-tootin&#39; solution, then?&lt;/h3&gt;
&lt;p&gt;The issue with the first algorithm is our false assumption that all possible R values are equally likely. In the case of A=1, P(R=3) -- the probability that R is 3 -- is 0.1, since 1/10 of the possible RGB values have R=3. Meanwhile, P(R=1)=0.3, since 3/10 of the possible RGB values have R=1.&lt;/p&gt;
&lt;p&gt;Hence, before picking R at random, we have to calculate the probability of each of its possible values.&lt;/p&gt;
&lt;p&gt;P(R=r) for some r is given by:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#{GB values that sum to 3A-r} / #{RGB values that average to A}&lt;/p&gt;
&lt;p&gt;(Syntax note: #{blah} here means &#34;the number of blah&#34;, so #{GB values that sum to 3A-r} is the same as saying &#34;the number of GB values that sum to 3A-r&#34;).&lt;/p&gt;
&lt;p&gt;You can see why this gives P(R=3)=0.1 and P(R=1)=0.3, given that #{GB values that sum to 2}=3, #{GB values that sum to 0}=1, and #{RGB values that average to 1}=10.&lt;/p&gt;
&lt;p&gt;How do we calculate this for any &#39;r&#39; and any &#39;A&#39;? Let&#39;s consider the numerator and the denominator separately.&lt;/p&gt;
&lt;h3 id=&#34;prr-the-numerator&#34;&gt;P(R=r): the numerator&lt;/h3&gt;
&lt;p&gt;Here&#39;s the value of #{GB values that sum to 3A-r}:&lt;/p&gt;
&lt;p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;
\text{min}(3A-r,255) - \text{max}(3A-r-255,0)+1.
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;G and B can be any value in the interval $[\text{max}(3A-r-255, 0), \text{min}(3A-r, 255)]$, so all we&#39;re doing is calculating the length of this interval. It&#39;s similar to what we did in the first algorithm.&lt;/p&gt;
&lt;p&gt;To convince yourself that it&#39;s correct, consider the case where A=87, 3A=261 and r=1. We have 3A-r=260. The GB values that sum to 260 are (255,5), (254,6), ..., (5,255). There are 255-5+1=251 such values. This agrees with the expression above. Repeat for various values of A and r.&lt;/p&gt;
&lt;h3 id=&#34;prr-the-denominator&#34;&gt;P(R=r): the denominator&lt;/h3&gt;
&lt;p&gt;The expression for #{RGB values that average to A} is below. It looks scary, but we&#39;ll explain each part in an intuitive manner.&lt;/p&gt;
&lt;p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;
{3A+3-1 \choose 2} \color{blue}{-3{3A+3-1-256 \choose 2}} \color{red}{+3{3A+3-1-2\cdot 256 \choose 2}}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;(Syntax note: () is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Binomial_coefficient&#34;&gt;&#34;binomial coefficient&#34; function&lt;/a&gt;, which can also be written as nCk: &#34;the number of combinations of k things that you can choose from n things&#34;. For example, 10C2 is the number of possible pairs of socks you could make from 10 socks).&lt;/p&gt;
&lt;p&gt;The first part, &lt;strong&gt;in black&lt;/strong&gt;, gives the number of ways that R, G and B can add up to 3A. Using the nCk syntax, we can write it as &lt;strong&gt;{3A+3-1}C{2}&lt;/strong&gt;, or &#34;the number of ways to choose 2 things from 3A+3-1 things&#34;.&lt;/p&gt;
&lt;p&gt;But why is &#34;the number of ways that R, G and B can add up to 3A&#34; the same as &#34;the number of ways to choose 2 things from 3A+3-1 things&#34;?&lt;/p&gt;
&lt;p&gt;Let&#39;s consider an example where A=2, 3A=6. Imagine that we have the numbers 1-6 lined up with spaces between them. We have to put &#34;partitions&#34; in 2 of the spaces in order to divide 3A=6 between R, G and B, as seen below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/rgb-average/comb-explained-1.png&#34;
     alt=&#34;visualisation of partitioning of 3A&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here, R=2, G=3 and B=1. We have 3A-1=5 spaces, and we have to insert partitions into 2 of them, which gives {3A-1}C{2} possible combinations.&lt;/p&gt;
&lt;p&gt;HOWEVER, to complete the &lt;strong&gt;first part&lt;/strong&gt; we also have to account for the case where any of R, G or B are 0. For that reason, we need 3 extra spaces acting as flags that let us set each of R, G and B to 0. If we put a partition in one of these spaces, it means that the corresponding R/G/B is set to 0.&lt;/p&gt;
&lt;p&gt;Here we see how to set G=0.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/rgb-average/comb-explained-2.png&#34;
     alt=&#34;visualisation of partitioning of 3A, part 2&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;And here, R=0 and B=0.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/rgb-average/comb-explained-3.png&#34;
     alt=&#34;visualisation of partitioning of 3A, part 3&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;To conclude: including the zero flags, we need 3A-1+3 spaces, of which we pick 2. And like that, we can make sense of the &lt;strong&gt;first part&lt;/strong&gt; of the expression, &lt;strong&gt;{3A-1+3}C{2}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We need the &lt;font color=&#34;blue&#34;&gt;second part&lt;/font&gt; of the expression because, in the &lt;strong&gt;first part&lt;/strong&gt;, we unwittingly allowed R&amp;gt;255, G&amp;gt;255 and B&amp;gt;255. The intuition is the same as the &lt;strong&gt;first part&lt;/strong&gt;, except we remove 256 numbers and assign them to one of R, G or B. The remaining 3A-1+3-256 spaces are divided among R, G and B like before, by inserting partitions into 2 spaces, and there are &lt;font color=&#34;blue&#34;&gt;{3A-1+3-256}C{2}&lt;/font&gt; ways to do so. And we multiply by 3 for the 3 cases: R&amp;gt;255, G&amp;gt;255 and B&amp;gt;255.&lt;/p&gt;
&lt;p&gt;Here&#39;s an example where 3A=264. We set aside 256 numbers for R, then partition the remaining ones like we did before. If we &#34;enabled&#34; the R=0 flag, then the final value of R would just be 256.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/rgb-average/comb-explained-4-r-gt-255.png&#34;
     alt=&#34;partitioning of 3A when R&gt;255&#34;
     class=&#34;centered&#34;&amp;gt;&lt;/p&gt;
&lt;p&gt;The &lt;font color=&#34;red&#34;&gt;final part&lt;/font&gt; of the expression for #{RGB values that average to A} is needed because, in the &lt;font color=&#34;blue&#34;&gt;second part&lt;/font&gt;, we double-subtracted the case where more than one of R, G and B are greater than 255, so we have to re-add them. First we subtracted combinations where R&amp;gt;255, which includes combinations where G&amp;gt;255. Then we subtracted combinations where G&amp;gt;255, which includes combinations where R&amp;gt;255. In the end, we&#39;ve double-subtracted the combinations where R&amp;gt;255 as well as G&amp;gt;255.&lt;/p&gt;
&lt;p&gt;In this example, A=173 and 3A=519. We set aside 256 numbers for R and 256 numbers for G, then partition the remaining 7 numbers between R, G &amp;amp; B like before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/rgb-average/comb-explained-5-rg-gt-255.png&#34;
     alt=&#34;partitioning of 3A when R&gt;255 and G&amp;gt;255&#34;
     class=&#34;centered&#34;&amp;gt;&lt;/p&gt;
&lt;p&gt;There are 3A+3-1-2*256 spaces, of which we pick 2. There are &lt;font color=&#34;red&#34;&gt;{3A+3-1-2*256}C{2}&lt;/font&gt; ways to do this. Multiply by 3 because there are 3 different pairs of R, G &amp;amp; B that can both be &amp;gt;255, and out pops the &lt;font color=&#34;red&#34;&gt;final part&lt;/font&gt;.&lt;/p&gt;
&lt;p&gt;And with that, we understand how to calculate #{RGB values that average to A}. Which, in turn, allows us to calculate P(R=r)!&lt;/p&gt;
&lt;h3 id=&#34;putting-it-all-together-using-prr-to-generate-random-rgb-values&#34;&gt;Putting it all together: using P(R=r) to generate random RGB values&lt;/h3&gt;
&lt;p&gt;The hardest part is done. Now we pick R randomly based on P(R=r). After that, G and B can be determined from a random choice with uniform probability like in the &#34;first attempt&#34; algorithm.&lt;/p&gt;
&lt;p&gt;Here it is in Python code.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;rd&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;scipy.special&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comb&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate_rgbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;num_rgbs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_rgbs_that_sum_to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# R can&amp;#39;t be smaller than 3A - 2*255. Otherwise, even with G=B=255, we will have:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#   R + G + B = (3A - 2*255 - blah) + 255 + 255 = 3A - blah &amp;lt; 3A.&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# Similarly, R can&amp;#39;t be bigger than 3A.&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# We also need to ensure that R is in the range [0, 255].&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;R_possible_values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;R_probabilities&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_gbs_that_sum_to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_rgbs&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R_possible_values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_rgb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R_possible_values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R_probabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;num_rgbs_that_sum_to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Outputs number of RGB tuples that sum to &amp;#39;S&amp;#39;.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# R, G, B&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;comb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# Remove cases where R, G or B are &amp;gt;255, since&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# these are not allowed.&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# Re-add the case where &amp;gt;1 of R, G and B are &amp;gt;255, since&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# they were subtracted twice in the previous bit.&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;num_gbs_that_sum_to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate_rgb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R_possible_values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R_probabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Generates R,G,B that sum to S given pre-computed probabilities&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    for possible R values.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# Weighted random choice based on P(R=r).&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;population&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R_possible_values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weights&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R_probabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;G&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Besides generating valid RGB values, all of the possible RGB values seem to have an equal probability of being generated (here, for A=245).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/rgb-average/rgb-value-distribution.png&#34;
     alt=&#34;distribution of RGB values&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We&#39;ve battled through the combinatorics and come out the other side with a working algorithm. An extension to the algorithm that might be interesting would be to make it work for the &#34;general&#34; case. That is, generate a random tuple V = (V1, V2, ..., Vn) such that the average (V1+...+Vn)/n is A, and where Bl &amp;lt;= Vi, A &amp;lt;= Bu. The combinatorics behind this would be similar to what we did above.&lt;/p&gt;
&lt;p&gt;A different approach to the problem would be to generate random RGB values directly from the sequence of valid values rather than going through the rigmarole of calculating probability distributions. In other words, if there are N possible RGB values, we generate a random number &#39;k&#39; between 1 and N and pass it to our magic function &#39;f&#39; so that f(k) outputs the kth RGB value with the target average.&lt;/p&gt;
&lt;p&gt;That&#39;s all for now. Tune in for the next episode of Problems That Don&#39;t Need to Be Solved, where we&#39;ll be looking at Rubix Cubes.&lt;/p&gt;
&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/programming/comments/e03k3p/random_rgb_values_that_average_to_n_or/&#34;&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=21607401&#34;&gt;Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        <link>https://kevingal.com/blog/rgb-average.html</link>
        <pubDate>Fri, 22 Nov 2019 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/rgb-average.html</guid>
    </item>
    <item>
        <title>Solving all 42 versions of the Harry Potter potions puzzle</title>
        <description>&lt;p&gt;There&#39;s a neat puzzle near the end of &lt;em&gt;Harry Potter and the Philosopher&#39;s Stone&lt;/em&gt; (aka &lt;em&gt;Sorcerer&#39;s Stone&lt;/em&gt;). Harry and Hermione enter a chamber, the entrances are blocked by magic fire, and only by decoding the following riddle will they be able to escape:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Danger lies before you, while safety lies behind,&lt;br /&gt;
Two of us will help you, whichever you would find,&lt;br /&gt;
One among us seven will let you move ahead,&lt;br /&gt;
Another will transport the drinker back instead,&lt;br /&gt;
Two among our number hold only nettle wine,&lt;br /&gt;
Three of us are killers, waiting hidden in line.&lt;br /&gt;
Choose, unless you wish to stay here for evermore,&lt;br /&gt;
To help you in your choice, we give you these clues four:&lt;br /&gt;
First, however slyly the poison tries to hide&lt;br /&gt;
You will always find some on nettle wine’s left side;&lt;br /&gt;
Second, different are those who stand at either end,&lt;br /&gt;
But if you would move onwards, neither is your friend;&lt;br /&gt;
Third, as you see clearly, all are different size,&lt;br /&gt;
Neither dwarf nor giant holds death in their insides;&lt;br /&gt;
Fourth, the second left and the second on the right&lt;br /&gt;
Are twins once you taste them, though different at first sight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;Some potions&#34; src=&#34;/static/img/potter-puzzle/some-potions.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Put simply, they have to figure out which potions are in which bottles.&lt;/p&gt;
&lt;p&gt;In this post, we&#39;re going to solve all 42 possible versions of the puzzle via programming and create a diagram of the results. A diagram like the picture above, but much bigger.&lt;/p&gt;
&lt;h3 id=&#34;wait-why-are-there-42-versions&#34;&gt;Wait, why are there 42 versions?&lt;/h3&gt;
&lt;p&gt;It&#39;s because the positions of the &#34;giant&#34; and &#34;dwarf&#34; potion bottles are not specified. There are 7 possible positions for the giant, and for each of those, there are 6 remaining positions for the dwarf, which gives &lt;code&gt;7 * 6 = 42&lt;/code&gt;. There&#39;s no way to know which one J.K. Rowling had in mind when she wrote the puzzle, unless she retcons it through Twitter. We could pick a random version and have a crack at it, but there would be no guarantee that the version we picked would be solvable. That&#39;s why we&#39;re performing the public service of solving, or proving unsolvable, all 42 versions.&lt;/p&gt;
&lt;h3 id=&#34;just-solve-it&#34;&gt;JUST SOLVE IT&lt;/h3&gt;
&lt;p&gt;First, here are the constraints of the puzzle, reworded in plainer terms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There are 2 harmless potions, 3 poison ones, 1 that lets you move forward and 1 that lets you move backward.&lt;/li&gt;
&lt;li&gt;There is a poison potion directly to the left of both of the harmless potions.&lt;/li&gt;
&lt;li&gt;The potions at the extreme ends are different, neither lets us move forward.&lt;/li&gt;
&lt;li&gt;Neither the biggest nor the smallest bottle contains poison potion.&lt;/li&gt;
&lt;li&gt;The second bottle on the left and the second on the right have the same contents.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How do we tackle it? Consider this version. Note that, as stated in the puzzle, there&#39;s 1 bottle smaller than all the others (the dwarf) and 1 bottle bigger than all the others (the giant).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Example version&#34; src=&#34;/static/img/potter-puzzle/solve-1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s take the bottles one at a time and try all of their possible contents. This approach is known as brute-force search.&lt;/p&gt;
&lt;p&gt;The first bottle, for example, can&#39;t contain the move-forward potion because of constraint #3 that we mentioned above. Neither can it contain a harmless potion, due to constraint #2 -- it would be impossible for there to be a poison potion to its left. That leaves us with a poison potion and the move-backward potion as possible contents. We try both of these.&lt;/p&gt;
&lt;p&gt;Note: in the pictures that follow, green potions = poison, orange = harmless, blue = move-backward, purple = move-forward.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Example with first potion filled in&#34; src=&#34;/static/img/potter-puzzle/solve-2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Example with first potion filled in&#34; src=&#34;/static/img/potter-puzzle/solve-3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We repeat this process for both of the WIP (work in progress) solutions above, taking the second bottle and trying all valid contents. This gives us:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Example with second potion filled in&#34; src=&#34;/static/img/potter-puzzle/solve-4a.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Example with second potion filled in&#34; src=&#34;/static/img/potter-puzzle/solve-4b.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Example with second potion filled in&#34; src=&#34;/static/img/potter-puzzle/solve-4c.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Example with second potion filled in&#34; src=&#34;/static/img/potter-puzzle/solve-4d.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And eventually, by continuing like this and discarding WIP solutions if they reach a state where one of the bottles can&#39;t be filled without breaking a constraint, we end up with a single valid solution:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Solution of example&#34; src=&#34;/static/img/potter-puzzle/some-potions.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Of course, we weren&#39;t guaranteed to find a solution. There might have been no solution, or multiple solutions. Having multiple solutions is equivalent to the puzzle being unsolvable because you can&#39;t tell which is the correct one.&lt;/p&gt;
&lt;p&gt;Applying our algorithm to all puzzle versions gives us the following solutions. 8 versions of the puzzle are solvable, 8 have no solutions and 26 have multiple solutions.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;All solutions&#34; src=&#34;/static/img/potter-puzzle/potions-puzzle-solutions.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;a-closer-look-at-the-solutions&#34;&gt;A closer look at the solutions&lt;/h3&gt;
&lt;p&gt;Is there something that all of the solvable variations of the puzzle have in common? Yes! Notice that either the small bottle or the big bottle have to be in 2nd or 6th position. This allows us to deduce that the 2nd and 6th bottles contain harmless potion, due to constraints #4 and #5. Without this deductive step, we can&#39;t eliminate the possibility that those bottles contain poison and we end up with multiple possible solutions. The solvable variations also require that the other &#34;special&#34; bottle (small or big) is in 3rd or 4th position. Otherwise, we can&#39;t pin down the exact location of the move-forward potion.&lt;/p&gt;
&lt;h3 id=&#34;closing-comments&#34;&gt;Closing comments&lt;/h3&gt;
&lt;p&gt;I leave you with a quote I like from the book.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hermione let out a great sigh and Harry, amazed, saw that she was smiling, the very last thing he felt like doing. ‘Brilliant,’ said Hermione. ‘This isn’t magic – it’s logic – a puzzle. A lot of the greatest wizards haven’t got an ounce of logic, they’d be stuck in here for ever.’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;...but wait! Maybe we can identify the canon version of the puzzle based on dialogue from the book.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‘Got  it,’  she  said.  ‘The  smallest  bottle  will  get  us  through  the  black fire – towards the Stone.’ &lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;‘Which one will get you back through the purple flames?’&lt;/p&gt;
&lt;p&gt;Hermione pointed at a rounded bottle at the right end of the line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Drats. This still leaves 4 candidates:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Canonical versions, which match the dialogue from the book&#34; src=&#34;/static/img/potter-puzzle/canonical.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Time for J.K. to do some more retconning.&lt;/p&gt;
&lt;h3 id=&#34;the-code&#34;&gt;The code&lt;/h3&gt;
&lt;p&gt;If you&#39;re curious about the code for solving the puzzles / drawing the diagram of solutions, see &lt;a href=&#34;https://github.com/Kevinpgalligan/KevingalWebsite/blob/master/experiments/hp.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/programming/comments/deauxe/solving_all_42_versions_of_the_harry_potter/&#34;&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://habr.com/ru/post/471856/&#34;&gt;habr&lt;/a&gt; (Russian translation)&lt;/li&gt;
&lt;/ul&gt;</description>
        <link>https://kevingal.com/blog/potter-puzzle.html</link>
        <pubDate>Thu, 03 Oct 2019 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/potter-puzzle.html</guid>
    </item>
    <item>
        <title>The story of u/AnEmojipastaBot</title>
        <description>&lt;p&gt;u/AnEmojipastaBot was a Reddit bot inspired by &lt;a href=&#34;https://www.reddit.com/r/emojipasta&#34;&gt;r/emojipasta&lt;/a&gt;. The idea was simple: turn the comments of other users into emojipasta, on request.&lt;/p&gt;
&lt;p&gt;For example...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;u/JohnDoe1: it&#39;s getting hot in here&lt;/p&gt;
&lt;p&gt;u/JohnDoe2: &lt;span style=&#34;color: blue&#34;&gt;u/anemojipastabot&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;u/AnEmojipastaBot: it&#39;s getting hot 🔥😍 in 🔽👏 here 💪👏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The bot was a surprise hit, spreading across the entire website and acquiring 30k upvotes (or &#34;karma&#34;) in a handful of days. Reddit users and other bots broke it quickly in a number of surprising and amusing ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The bot didn&#39;t respond when its username was uncapitalised (&#34;u/anemojipastabot&#34; instead of &#34;u/AnEmojipastaBot&#34;).&lt;/li&gt;
&lt;li&gt;People got it to post in inappropriate subreddits, like r/suicidewatch.&lt;/li&gt;
&lt;li&gt;It entered infinite loops with other bots. The other bot would mention AnEmojipastaBot, then AnEmojipastaBot would mention the other bot, then the other bot would mention AnEmojipastaBot, and so on.&lt;/li&gt;
&lt;li&gt;It crashed if the target comment was deleted.&lt;/li&gt;
&lt;li&gt;It crashed if it was summoned in a subreddit where it had been banned.&lt;/li&gt;
&lt;li&gt;It didn&#39;t handle random network-related errors when calling the Reddit API.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These bugs were squashed, however, and everything began to run smoothly. Here are the most popular comments of the bot from those carefree days.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/FellowKids/comments/85ty5v/ah_yes_thats_an_appropriate_use_of_emojis/dw0aiam/&#34;&gt;🔫🔫🔫Shooting🔫🔫🔫At 🔫 Maryland🇺🇸High⬆️School📚🏫🎓&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Showerthoughts/comments/863ag0/if_getting_hurt_physically_can_leave_you_walking/dw259jx/&#34;&gt;Those limps are 🗑 called depression, anxiety, PTSD, and 💰😏 addiction. 💊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/copypasta/comments/85iurk/welcome_to_my_steam_profile/dvxqg19/&#34;&gt;Greetings travelers! Welcome to my profile!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/copypasta/comments/85658e/ultimate_roblox_scam/dvv41mm/&#34;&gt;I 👀 pretended to 💦👏 be a girl 🤰💃 in 🌤 the 🎁 new roblox 😮 server 🙅🏻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/me_irl/comments/85zd42/me_irl/dw1i2qo/&#34;&gt;shitty twitter memes ♀💩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/BlackPeopleTwitter/comments/86xtyf/what_happened_to_click_it_or_ticket/dw8t9bx/&#34;&gt;💂 anything illegal 😶 in 😍🔙 the car 🍳 👮&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/starterpacks/comments/867exf/that_one_girl_who_is_obsessed_with_being_positive/dw39nl9/&#34;&gt;Dooby brothers! 👬👬&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/HistoryMemes/comments/85zmhw/oc_as_a_history_buff_does_this_trigger_you_as/dw1flmj/&#34;&gt;physical 💏 and mental ⚖ pain 😧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventually, the bot made enemies with too many important people and its account was banned permanently. For being spammy and annoying, apparently. Nobody could have seen it coming.&lt;/p&gt;
&lt;p&gt;It was fun while it lasted, however, and rather than let the code go to waste, I recently resurrected it &lt;a href=&#34;/apps/emojipasta.html&#34;&gt;as a web app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the interested, here&#39;s a brief description of how it worked (and how it still works in the web app). I wrote a script to download a few thousand comments off r/emojipasta. These were used to create &#34;mappings&#34; from words to the emojis that tend to appear beside them. When it was summoned, the bot broke up comments into chunks of text and emojis were inserted randomly between the chunks using the word-&gt;emoji mappings, with a maximum of 2 emojis after each chunk. Only the alphanumeric prefix of each chunk of text was considered, so that &#34;I&#39;ll&#34; would give the same emoji mappings as &#34;I&#34;.&lt;/p&gt;
&lt;p&gt;That&#39;s about it. The code was pretty simple. The original source code of the bot, in Python, can be found &lt;a href=&#34;https://github.com/Kevinpgalligan/EmojipastaBot&#34;&gt;here&lt;/a&gt;. The JavaScript version that I ported recently can be found &lt;a href=&#34;https://github.com/Kevinpgalligan/KevingalWebsite/blob/master/static/js/apps/emojipasta/emojipasta.js&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/emojipasta.html</link>
        <pubDate>Sun, 29 Sep 2019 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/emojipasta.html</guid>
    </item>
</channel>
</rss> 