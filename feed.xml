<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>Kevin's Blog</title>
    <link>https://kevingal.com</link>
    <description>Maths, computers and stuff.</description>
    <pubDate>Fri, 15 Mar 2024 00:00:00 GMT</pubDate>
    <lastBuildDate>Fri, 15 Mar 2024 00:00:00 GMT</lastBuildDate>
    <atom:link href="https://kevingal.com/feed.xml" rel="self" type="application/rss+xml" />
    
    <item>
        <title>A Visit to the Center for Computing History</title>
        <description>&lt;p&gt;I recently had the opportunity to visit the &lt;a href=&#34;https://www.computinghistory.org.uk/&#34;&gt;Center for Computing History&lt;/a&gt; in Cambridge, England. Since it turned out to be one of my favourite museums ever, I wanted to document the experience and encourage people to go see it if they can. My motive is selfish: I want it to be successful so I can return some day!&lt;/p&gt;
&lt;p&gt;The Center has a large collection of computers, from ancient arcade machines, to videogame consoles, to 80s office computers. Most of them are running and interactive. As such, it&#39;s accessible and fun even for non-techies.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/outside.jpg&#34;
     alt=&#34;The outside of the museum: blue/grey/glass and a sign with the name of the museum.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;When you see &#34;Hello, World&#34;, you know you&#39;re in the right place.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In the lobby, visitors are greeted by a room-filling computer called the &lt;a href=&#34;https://www.megaprocessor.com/&#34;&gt;Megaprocessor&lt;/a&gt;. It was hand-assembled using finger-sized transistors, and the state of each transistor is shown by LEDs. Theoretically, you can watch binary addition unfold before your eyes! I didn&#39;t understand the architecture of the computer at all, but it was still cool to see, and you can play Tetris on it.&lt;/p&gt;
&lt;figure&gt;
&lt;video class=&#34;centered&#34; controls title=&#34;The Megaprocessor computer in action, with arcade machine noises in the background.&#34;&gt;
    &lt;source src=&#34;/static/video/center-computing/megaprocessor.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;figcaption&gt;Those are noisy arcade machines in the background.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In a side room there&#39;s a selection of computers from the 80s. The interface for many of them is a keyboard and a BASIC terminal, rather than the graphical user interfaces and mice that we&#39;re used to today. I wrote a FizzBuzz-like BASIC program on one of the computers, with the aid of a bulky instruction manual.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/fizzbuzz-program.jpg&#34;
     alt=&#34;Fizzbuzz program.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/fizzbuzz.jpg&#34;
     alt=&#34;And its execution.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;figcaption&gt;The FizzBuzz(ish) program and its output.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I think the monitor is CRT-based, which could be why the screen appears to be faded. If that&#39;s the case, my camera picked up on the rapid refreshing of the screen that our puny human brains are too slow to perceive.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/manual-1.jpg&#34;
     alt=&#34;The Manual.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/manual-2.jpg&#34;
     alt=&#34;The Manual.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/manual-3.jpg&#34;
     alt=&#34;The Manual.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/basic-graphics.jpg&#34;
     alt=&#34;The Manual.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;figcaption&gt;The manual. Includes: basics of BASIC, assembly language, music, graphics...&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here&#39;s a transcription of the BASIC program I wrote:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nl&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;LET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;LET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;REPEAT&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;PROCTEST&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;IF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;PRINT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;FIZZ&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;PROCTEST&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;IF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;PRINT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;BUZZ&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;110&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;120&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNTIL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;il&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;130&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;DEF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;PROCTEST&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;140&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;LET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Y&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;il&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;160&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;REPEAT&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;170&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;IF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Y&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;190&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNTIL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;X&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;ENDPROC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This BASIC dialect is surprisingly advanced, and allows the definition of procedures &amp;amp; functions (with arguments!). In my ugly implementation, however, everything gets passed around through global variables. Woops. There was an even worse prototype that had GOTOs everywhere.&lt;/p&gt;
&lt;p&gt;The development process is interesting. At least, it&#39;s interesting for someone who didn&#39;t cut their teeth programming at a BASIC REPL. Here are some key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You enter one line of code at a time, with a line number at the start of each line. If you don&#39;t include a line number, the code gets executed as soon as you press the return key. Interactive development!&lt;/li&gt;
&lt;li&gt;The command &#34;LIST&#34; prints out all the lines of your program so far, ordered by line number. I&#39;m not sure what happens if your program is too long to fit on the screen.&lt;/li&gt;
&lt;li&gt;&#34;RENUMBER&#34; replaces all the line numbers so that they start at 10 and increase in multiples of 10. This is useful when you&#39;re missing a line of code somewhere but there&#39;s no space to put it.&lt;/li&gt;
&lt;li&gt;&#34;DELETE m,n&#34; deletes all the lines from number m to number n.&lt;/li&gt;
&lt;li&gt;When the program is ready, you type &#34;RUN&#34;.&lt;/li&gt;
&lt;li&gt;I think there&#39;s also a command to save the current program to disk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This computer&#39;s version of BASIC has built-in support for graphics and music programming. SuperCollider and p5js, watch out! There was another computer nearby that had a voice synthesizer, which was fun to mess around with.&lt;/p&gt;
&lt;p&gt;The final room, and the largest one, is the gallery, which is like an aircraft hangar full of computers, arcade machines, and exhibitions. As in the other rooms, most of the machines are interactive. My favourite part was probably the game consoles, ordered by release date and accompanied by a history of the games industry. All of the consoles were playable! I got to play Mario games on the NES and SNES, Sonic on a Sega, and Crash Bandicoot on a Playstation!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/crash.jpg&#34;
     alt=&#34;Crash Bandicoot on a PS1.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/mario.jpg&#34;
     alt=&#34;Mario on a SNES.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/spectrum.jpg&#34;
     alt=&#34;Some random game on a ZX Spectrum.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/mac.jpg&#34;
     alt=&#34;Some Mac computers.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;figcaption&gt;A selection of consoles and computers from the gallery: Crash Bandicoot on a PS1, Mario on a SNES, a ZX Spectrum, and some Macs&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There are much older machines on display, but the game consoles resonated the most for me because they&#39;ve seeped into my consciousness from popular culture.&lt;/p&gt;
&lt;p&gt;They have a Mac that belonged to Douglas Adams. They couldn&#39;t recover any files from the hard-drive, unfortunately.&lt;/p&gt;
&lt;p&gt;They also have the original (clay?) model of the &lt;a href=&#34;https://www.youtube.com/watch?v=Y-6DzI-krUQ&#34;&gt;Creatures&lt;/a&gt; game world, which was photographed / scanned to create the game assets! (That&#39;s a link to an awesome video about the AI in Creatures).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/creatures.jpg&#34;
     alt=&#34;The model for the Creatures game world.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;The level map of Creatures!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;10/10 museum experience. I would highly recommend checking it out if you ever find yourself in that part of the world.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/center-computing.html</link>
        <pubDate>Fri, 15 Mar 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/center-computing.html</guid>
    </item>
    <item>
        <title>Tiny Metronome now has a 903-byte sibling</title>
        <description>&lt;p&gt;With the help of Charlie from RC, I managed to make a &lt;a href=&#34;/apps/tuner.html&#34;&gt;tiny guitar tuner&lt;/a&gt; in 903 bytes. It uses the same code-golfing tricks as the &lt;a href=&#34;/blog/metronome.html&#34;&gt;tiny metronome&lt;/a&gt;: &lt;code&gt;!1&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, HTML attribute values don&#39;t need to be surrounded by quotes, ternary conditionals can be shorter than if-else statements (&lt;code&gt;p?(s1,s2):(s3,s4)&lt;/code&gt; saves 8 bytes over &lt;code&gt;if(p){s1;s2;}else{s3;s4;}&lt;/code&gt;), buttons are created dynamically with JavaScript, etc.&lt;/p&gt;
&lt;p&gt;It uses the WebAudio API to make sound. The most annoying part was making sure there were no pops or crackles in the audio output, especially when it was started and stopped abruptly. This was possible to resolve by ramping the gain (kinda like the volume) up and down, and by tweaking its max value.&lt;/p&gt;
&lt;p&gt;Here&#39;s the code, with newlines added so that it doesn&#39;t spill out of the page. Cower before its obscurity!&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Tuner&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;viewport&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;width=&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;device-width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;max-width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;line-height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;82&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;110&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;147&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;196&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;247&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;330&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;E,A,D,G,B,E&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=!&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;linearRampToValueAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AudioContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createOscillator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createGain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setValueAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;111&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;disconnect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;disconnect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}});&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;[...&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,()=&amp;gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=!&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=!&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))));&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <link>https://kevingal.com/blog/tuner.html</link>
        <pubDate>Thu, 22 Feb 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/tuner.html</guid>
    </item>
    <item>
        <title>Recurse Center, week 6</title>
        <description>&lt;h3 id=&#34;monday-february-5th&#34;&gt;Monday, February 5th&lt;/h3&gt;
&lt;p&gt;On the BitTorrent front, worker threads can now handshake and send each other messages over network sockets. Yippee!&lt;/p&gt;
&lt;p&gt;To get to that point, I had to refactor my code to work with streams instead of arrays, since that&#39;s the interface offered by the usocket library. This involved a frustrating amount of debugging -- I expected that calling &lt;code&gt;(read-sequence buffer stream)&lt;/code&gt; would read as many bytes as possible into &lt;code&gt;buffer&lt;/code&gt; until &lt;code&gt;stream&lt;/code&gt; is exhausted, but instead it quietly hangs if there&#39;s not enough data to fill up &lt;code&gt;buffer&lt;/code&gt;. The solution was to read byte-by-byte, checking &lt;code&gt;(listen stream)&lt;/code&gt; each time to see if there are any more bytes to read. Even this has a gotcha: if the peer closes the connection after sending some bytes, &lt;code&gt;(listen stream)&lt;/code&gt; will return &lt;code&gt;nil&lt;/code&gt; (false), even if there are still unprocessed bytes! I&#39;m willing to accept this wart in my code, however. Credit to gilberth in #lisp for helping me with that.&lt;/p&gt;
&lt;p&gt;The next step is to implement the Brain of the client. This will contain all the actual logic for talking to peers, since the worker threads only read and write messages from/to the network.&lt;/p&gt;
&lt;p&gt;Other than that, I added a couple of new primitive words to my Forth interpreter, and read through JonesForth trying to figure out what primitives I would need in order to write the interpreter loop in Forth itself. Whoever said that writing a Forth is easy left out &#34;...when you know how to do it&#34;.&lt;/p&gt;
&lt;h3 id=&#34;tuesday-february-6th&#34;&gt;Tuesday, February 6th&lt;/h3&gt;
&lt;p&gt;There are no more tricky design questions to solve on the BitTorrent front, and I just have to write a lot of Boring Code. I think I&#39;m 100-200 lines of  code from a finished client, and then I&#39;m sure there will be 1 million bugs to fix.&lt;/p&gt;
&lt;p&gt;I suggested a Forth discussion, and Reed ended up organising (most of) it. Surprisingly, 3 other people turned up, leading to a fun session. We programmed the factorial function in gForth, as a group. Here&#39;s my recollection of what we ended up with:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;fac&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;( n -- n! )&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;swap&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then we had a general chat about Forth stuff. Elias made a perceptive comment about the similarity of Forth and Lisp -- the syntax of both languages maps fairly closely to their representation in memory. Forth is laid out linearly, Lisp is a tree. I wonder if any other languages have this property!&lt;/p&gt;
&lt;p&gt;In the evening I had a generative art idea that I couldn&#39;t resist implementing: particles that spiral towards the center of the image, leaving a trail of colour. There are a lot of parameters to tweak (how much force is applied to the particles, their max speed, the number of particles and what colour each of them leaves behind, etc), but I&#39;m done playing with it for now.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/recurse/swirl.png&#34;
     alt=&#34;A swirl/spiral generative art pattern, many lines (green, gold, pinkish) spiral towards the center. Green background.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;A swirl!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;wednesday-february-7th&#34;&gt;Wednesday, February 7th&lt;/h3&gt;
&lt;p&gt;After a coding marathon, the BitTorrent client is now Code Complete™. And the code compiles! I guess I suck at estimating tasks, because it was way more than 100-200 lines of code. My brain is mush and I don&#39;t have the heart to run it and see all the runtime errors &amp;amp; protocol bugs, though, so I&#39;ll wait until tomorrow before testing it out. I&#39;ve also been daydreaming about the blog post &amp;amp; presentation I&#39;ll probably do to wrap up this project.&lt;/p&gt;
&lt;h3 id=&#34;thursday-february-8th&#34;&gt;Thursday, February 8th&lt;/h3&gt;
&lt;p&gt;Read a bit about the &lt;a href=&#34;https://gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html&#34;&gt;Common Lisp condition system&lt;/a&gt;. It&#39;s more flexible than try/catch and exceptions because you can control the error behaviour of low-level code from high-level code (e.g. &lt;code&gt;analyze-log-files&lt;/code&gt; can tell &lt;code&gt;parse-log-file&lt;/code&gt; to skip malformed entries in the log, or it can tell &lt;code&gt;parse-log-entry&lt;/code&gt; to return a default value for malformed entries, or it can just not bother to handle the error in the first place).&lt;/p&gt;
&lt;p&gt;To test the BitTorrent client, I set up a dummy HTTP server to act as the tracker (which lets you know the IP addresses of everyone who has the file(s) you want to download) and ran the client. This uncovered lots of easy-to-fix bugs. Also added logging so I can understand what the client is doing. For my next and (hopefully) final test,  I&#39;ll run 2 instances of the client and try to download a file from myself!&lt;/p&gt;
&lt;p&gt;I spent ages trying to debug why my hand-edited .torrent file wasn&#39;t loading properly. I correctly suspected that the character encoding might be to blame, i.e. vim messing things up by trying to interpret the file as UTF-8. The solution was to use &lt;code&gt;vim -b&lt;/code&gt; so that the .torrent file would be treated as a binary file.&lt;/p&gt;
&lt;p&gt;Paired with Jake to implement anti-aliasing in his ray tracer. Takeaways: pairing is fun, C is fun, vim can basically be made into an IDE, and .ppm is a cool image format.&lt;/p&gt;
&lt;p&gt;Attended the presentations. They were super interesting, as always. I liked how Dan applied CS theory to the mundane problem of hiking route planning: first, it was framed as the traveling salesman problem, and then as a subset cover problem. The ROM hacking presentation was also very fun, and Raunak&#39;s WASM interpreter was impressive. I need to start taking notes -- too much cool stuff to remember! After that was the graduation ceremony. Seven-ish days ago, we were asked to write nice things about graduating Recursers. These nice things were now read out, 1 per person. So sweet! I realised that I hadn&#39;t put enough thought into what I wrote about other people. I&#39;ll try harder next time!&lt;/p&gt;
&lt;h3 id=&#34;friday-february-9th&#34;&gt;Friday, February 9th&lt;/h3&gt;
&lt;p&gt;Worked on testing the BitTorrent client. The idea is to run 2 instances of the client, one with a copy of the data and one without, and download a file from myself. This test is mostly ready, but I&#39;ve run into a bug where my dummy tracker server is sometimes rejecting my HTTP requests depending on the random 20-byte ID I use. Probably related to character encoding, as usual.&lt;/p&gt;
&lt;h3 id=&#34;general-note&#34;&gt;General note&lt;/h3&gt;
&lt;p&gt;Further RC updates will not be included in my RSS feed, and will not be included in the tag count, because I don&#39;t want people to be spammed by what is essentially my diary. I&#39;ll still post the updates every week, however.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/rc6.html</link>
        <pubDate>Fri, 09 Feb 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/rc6.html</guid>
    </item>
    <item>
        <title>Recurse Center, week 5</title>
        <description>&lt;h3 id=&#34;monday-january-29th&#34;&gt;Monday, January 29th&lt;/h3&gt;
&lt;p&gt;I was tweaking my code for the L-system tree, turns out the tree was MUCH bigger than the window I was drawing it in. Looks better when zoomed out!  The code now uses recursion &amp;amp; depth-first expansion instead of a loop &amp;amp; breadth-first expansion -- goodbye memory exhaustion!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/recurse/lsystem-d4.png&#34;
     alt=&#34;An L-system tree, highly recursive structure, pink background and wheat-ish colour.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Revised L-system tree.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Paired with Adam to debug his chess engine, discovered that chess engines are much more complicated than I realised. I&#39;d recently watched &lt;a href=&#34;https://www.youtube.com/watch?v=Ne40a5LkK6A&#34;&gt;this video&lt;/a&gt; about a chessbot competition, but it didn&#39;t take the lid off the complexity of generating all the valid moves and handling the board state efficiently.&lt;/p&gt;
&lt;p&gt;Implemented message serialisation in my BitTorrent client, and wrote tests to make sure all the  message types survive a roundtrip (message -&amp;gt; bytes -&amp;gt; message). Now feeling much more confident that it&#39;ll work.&lt;/p&gt;
&lt;h3 id=&#34;tuesday-january-30th&#34;&gt;Tuesday, January 30th&lt;/h3&gt;
&lt;p&gt;BitTorrent client: Wrote code to stitch together a &#34;piece&#34; of data from accumulated network packets, verify its SHA1 hash, and write it to disk. Now ready to start writing the actual client logic, which is the last bit of the puzzle! Hopefully I&#39;ll be able to wrap up this project soon.&lt;/p&gt;
&lt;p&gt;Felt inspired after attending Zack&#39;s SuperCollider workshop. Also had a fun coffee chat with Charlie, where music programming once again raised its enticing head.&lt;/p&gt;
&lt;p&gt;While looking up Common Lisp bitwise operators, I randomly came across &lt;a href=&#34;https://pvk.ca/Blog/2014/03/15/sbcl-the-ultimate-assembly-code-breadboard/&#34;&gt;this cool article&lt;/a&gt; about implementing a Forth using the assembly language DSL (domain specific language) of SBCL (Steel Bank Common Lisp, the most popular implementation of CL). Spotted a fellow Recurser in the comment section!&lt;/p&gt;
&lt;p&gt;Finished the day by working on documentation for Sketch and discussing the API of a new feature.&lt;/p&gt;
&lt;h3 id=&#34;wednesday-january-31st&#34;&gt;Wednesday, January 31st&lt;/h3&gt;
&lt;p&gt;Didn&#39;t get much done today due to Real Life™ and once again overestimating my ability to work on public transport. Also had to miss the career workshop, bah. I did get a lot of reading done, however, and I finally feel confident in how to go about implementing a Forth interpreter, so tomorrow maybe I&#39;ll actually write some code for that! &lt;/p&gt;
&lt;h3 id=&#34;thursday-february-1st&#34;&gt;Thursday, February 1st&lt;/h3&gt;
&lt;p&gt;Started the day by working on Sketch&#39;s &lt;a href=&#34;https://github.com/vydd/sketch/pull/158&#34;&gt;documentation&lt;/a&gt;, because who doesn&#39;t love writing docs.&lt;/p&gt;
&lt;p&gt;Fixed a bug in how .torrent files are loaded in the BitTorrent client. My goal is to have it downloading files by the halfway point of the batch, which I think would be about the middle of Week 7. Hopefully that&#39;s not too ambitious!&lt;/p&gt;
&lt;p&gt;Finally got started on writing the Forth interpreter. Right now it&#39;s a glorified stack calculator and there&#39;s no way of defining/executing new &#34;words&#34;, which are basically the Forth equivalent of functions.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;interpret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I want to implement the interpreter &lt;em&gt;in Forth&lt;/em&gt; as much as possible, and it&#39;ll take some more reading and thinking to understand the minimal set of primitives I&#39;ll need.&lt;/p&gt;
&lt;p&gt;Here are some definitions of classic Forth words I&#39;ve implemented so far, nothing too crazy:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defcode&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;dup&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fpush&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fmemget&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*sp*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defcode&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;drop&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fpop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defcode&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;swap&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fpop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fpop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fpush&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fpush&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defcode&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;~a~%&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fpop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;friday-february-2nd&#34;&gt;Friday, February 2nd&lt;/h3&gt;
&lt;p&gt;Mostly worked on the BitTorrent client today, now at the point where I have &#34;worker threads&#34; that run in a loop accepting commands from the &#34;brain thread&#34; and reading messages from the network. Once I get that debugged, all I have left is to implement the &#34;brain thread&#34;.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/rc5.html</link>
        <pubDate>Fri, 02 Feb 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/rc5.html</guid>
    </item>
    <item>
        <title>Recurse Center, week 4</title>
        <description>&lt;h3 id=&#34;monday-january-22nd&#34;&gt;Monday, January 22nd&lt;/h3&gt;
&lt;p&gt;Did more work on my pull request for ~sketch~, feels like a disproportionate amount of effort to fix this bug.&lt;/p&gt;
&lt;p&gt;Read some &lt;a href=&#34;https://github.com/nornagon/jonesforth/blob/master/jonesforth.S&#34;&gt;jonesforth&lt;/a&gt; and &lt;a href=&#34;https://www.forth.com/starting-forth/11-forth-compiler-defining-words/&#34;&gt;Starting Forth&lt;/a&gt;, trying to understand Forth execution.&lt;/p&gt;
&lt;p&gt;My original plan was to write most of my Forth code in a Lisp DSL, like this. &lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defword&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;2dup&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dup&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Forth code is then just a list of Lisp symbols!&lt;/p&gt;
&lt;p&gt;However, this has various hairy edge cases. Consider the Forth words &lt;code&gt;(&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt;, neither of which are valid names for Lisp symbols. A possible solution is to expand these into Latin characters with some type of escape character in front of them: &lt;code&gt;^lparen&lt;/code&gt; and &lt;code&gt;^colon&lt;/code&gt;, for example. The escape character itself would have to be escaped, too, in case the user ever tries to define a word called &lt;code&gt;^lparen&lt;/code&gt; -- with escaping, this would become the Lisp symbol &lt;code&gt;^^lparen&lt;/code&gt;. And the Forth word &lt;code&gt;^(&lt;/code&gt; would become the symbol &lt;code&gt;^^^lparen&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another edge case to avoid: imagine I gave the symbol &lt;code&gt;|&lt;/code&gt; the expanded name &lt;code&gt;^lpar&lt;/code&gt;. Then the Forth word &lt;code&gt;|en&lt;/code&gt; would expand to &lt;code&gt;^lparen&lt;/code&gt;, clashing with the Lisp symbol for &lt;code&gt;(&lt;/code&gt;. So the expansions of banned symbols cannot be prefixes of each other. This probably comes up a lot when designing programming languages (string escaping!), so that could be interesting to look into.&lt;/p&gt;
&lt;p&gt;I think that solves the problem of weird Forth characters. However, there&#39;s also the problem that Forth words are able to hook into the parsing of the program they&#39;re part of. Famously, comments in Forth are implemented as the words &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;. Here&#39;s how they&#39;re used:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;someword&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;( this is a Forth comment )&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The definition of &lt;code&gt;(&lt;/code&gt; is basically: skip text until the next right parenthesis shows up. That wouldn&#39;t work with my &#34;list of symbols&#34; DSL because the symbols will be parsed by the Lisp reader and there will be no input stream of text to speak of.&lt;/p&gt;
&lt;p&gt;Another Problem Word is &lt;code&gt;&#34;.&lt;/code&gt;, which prints a string to the screen...&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;firstprogram&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&amp;quot;.&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;World&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...which might be defined in the DSL (with escaping for the &lt;code&gt;&#34;&lt;/code&gt; special character) as follows...&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defword&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;firstprogram&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;^quote.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;World&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;^quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But, again, &lt;code&gt;&#34;.&lt;/code&gt; needs access to the input stream of text. So, I think the DSL should allow Forth words to be defined as strings...&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defword&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;firstprogram&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;\&amp;quot;. Hello World \&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Anyway, this is all a distraction from the task of actually implementing a Forth. What&#39;s confusing me more is how to map the Forth &lt;a href=&#34;https://www.forth.com/starting-forth/9-forth-execution/#Forth_Geography&#34;&gt;memory model&lt;/a&gt; onto a running Lisp process. Forth seems to assume that it&#39;s operating on a giant contiguous block of memory, and it compiles itself by writing stuff into that memory. That&#39;s fine for assembly language, but I really don&#39;t get how to deal with that in Common Lisp or JavaScript or whatever. The Forth word &lt;code&gt;HERE&lt;/code&gt;, for example, points to the address space where the next dictionary entry should be written. What does that mean when the dictionary is a list data structure in JavaScript or Common Lisp or whatever? I think it would be straightforward in C: the dictionary is a big &lt;code&gt;malloc&lt;/code&gt;&#39;d block of memory, and we can push onto the stack the actual memory address where the next DictionaryEntry struct should be written.&lt;/p&gt;
&lt;p&gt;After some thought (and reading stuff, and pestering Reed), I think I should treat Forth memory as a giant array and write the dictionary (as well as text input and everything else) directly into it as bytes!&lt;/p&gt;
&lt;p&gt;My brain was mush from all the reading and thinking, so I finished the day by doing &#34;mindless&#34; coding: turning my &lt;code&gt;vec2&lt;/code&gt; implementation into &lt;code&gt;vec&lt;/code&gt;, for whenever I need to do physics or graphics stuff in more than 2 dimensions.&lt;/p&gt;
&lt;h3 id=&#34;tuesday-january-23rd&#34;&gt;Tuesday, January 23rd&lt;/h3&gt;
&lt;p&gt;I spent a lot of time working on ~sketch~ today (now using &#34;~&#34; to demarcate when I&#39;m talking about the Common Lisp graphics library called &#34;sketch&#34;). First, refactoring my pull request according to Gleefre&#39;s (one of my co-developers) feedback. Then testing a fix that Gleefre finished for drawing polygons. Then brainstorming various possible features and documenting them as issues in the repository. My testing did result in a kinda cool animation (&lt;strong&gt;EPILEPSY ALERT!&lt;/strong&gt;):&lt;/p&gt;
&lt;figure&gt;
&lt;video width=&#34;100&#34; height=&#34;100&#34; class=&#34;centered&#34; controls&gt;
    &lt;source src=&#34;/static/video/recurse/polygons.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;figcaption&gt;Drawing a random polygon with 10 vertices, many many times per second.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Since then I&#39;ve been catching up on my blogging and thinking a lot about how to implement a Forth interpreter (most of the brainstorming got dumped into DMs with Reed and into Monday&#39;s entry).&lt;/p&gt;
&lt;p&gt;I haven&#39;t been participating so much in social activities at RC! Partly because my projects don&#39;t currently overlap with most of the groups, and partly because I&#39;m feeling a little low on social energy to be pairing / chatting with people. Trying not to be too hard on myself over this.&lt;/p&gt;
&lt;h3 id=&#34;wednesday-january-24th&#34;&gt;Wednesday, January 24th&lt;/h3&gt;
&lt;p&gt;Had a nice call with David about programming and BitTorrent stuff.&lt;/p&gt;
&lt;p&gt;The rest of the day was consumed by Creative Coding, where the prompt was &#34;Impossible objects (undecided geometry)&#34;. I took the opportunity to draw some trees based on Coding Train videos: recursion trees, object trees (with leaves! 🍃), and L-system trees.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/recurse/recursive-tree.png&#34;
     alt=&#34;A recursive tree.&#34;
     class=&#34;centered&#34;&gt;
&lt;img src=&#34;/static/img/recurse/leaves-again.png&#34;
     alt=&#34;An object-oriented tree.&#34;
     class=&#34;centered&#34;&gt;
&lt;img src=&#34;/static/img/recurse/lsystem-tree.png&#34;
     alt=&#34;An L-system tree.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Trees!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The code is &lt;a href=&#34;https://github.com/Kevinpgalligan/sketches/blob/master/src/thesketches/trees.lisp&#34;&gt;here&lt;/a&gt;. There&#39;s a memory fault after more than 6 iterations of the L-system, with no backtrace. I think it allocates too much memory because the strings grow surprisingly quickly -- if my napkin calculations are correct, ~1GB after 7 iterations. The solution may be to do depth-first expansion of the rules, rather than breadth-first, so that no string allocation is necessary. (Although, it sounds like it would take forever to iterate through 1 billion symbols, so it may be impractical to go beyond a depth of 6 for this L-system, anyway).&lt;/p&gt;
&lt;p&gt;When I get that working, I may as well test out all the L-systems on the &lt;a href=&#34;https://en.wikipedia.org/wiki/L-system&#34;&gt;Wiki page&lt;/a&gt;, since the rules can be copy/pasted once you have an L-system implementation.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;def-lsystem&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\F&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;FF+[+F-F-F]-[-F+F+F]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;evaluate-lsystem&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;tree&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:axiom&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;F&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;thursday-january-25th&#34;&gt;Thursday, January 25th&lt;/h3&gt;
&lt;p&gt;Read through a paper on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Paxos_(computer_science)&#34;&gt;Paxos algorithm&lt;/a&gt;  with Chris, courtesy of the Pairing Bot. The paper was surprisingly entertaining! It&#39;s an algorithm for reaching consensus among distributed processes, but the author framed it as &#34;priests&#34; voting in a &#34;legislature&#34; on the island of Paxos.&lt;/p&gt;
&lt;p&gt;Spent some time on my generative trees (see above).&lt;/p&gt;
&lt;p&gt;Returned to the BitTorrent client! It feels less intimidating now that I&#39;ve broken the project into smaller pieces. After skimming &lt;a href=&#34;https://blog.jse.li/posts/torrent/&#34;&gt;this article&lt;/a&gt; shared with me by David, I&#39;ve kinda changed my mind about how to handle multi-threading in the client. I&#39;m leaning towards doing all thread-to-thread communication using queues, because it seems easier to reason about than sharing a big data structure with a lock on it.&lt;/p&gt;
&lt;p&gt;Today&#39;s main coding task was to write a buffer / parser for peer-to-peer messages (network bytes in, messages out). Almost at the point of writing unit tests for it. Other small tasks I&#39;ve identified:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A data structure to accumulate the blocks that form pieces, before they&#39;re stitched together.&lt;/li&gt;
&lt;li&gt;Validating the SHA1 hash of completed pieces.&lt;/li&gt;
&lt;li&gt;Writing pieces to the appropriate file on disk.&lt;/li&gt;
&lt;li&gt;Implement the bitmask for tracking which pieces have been downloaded.&lt;/li&gt;
&lt;li&gt;Make a flowchart for the lifecycle of the threads that talk to peers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I ended the day by attending the weekly presentations. They were all amazing, but particular highlights were: Tristan&#39;s singing computer (using a one-tone beeper to play music by beeping it at different frequencies), Jacob&#39;s custom MIDI device, and Julie&#39;s AI fishtank TV show (object and collision detection + a fish tank + games for the fish to unknowingly play = an automated version of an Adult Swim comedy show). I find myself getting very excited about music-related projects, so I should probably launch into music programming when my current projects are wrapped up.&lt;/p&gt;
&lt;h3 id=&#34;friday-january-26th&#34;&gt;Friday, January 26th&lt;/h3&gt;
&lt;p&gt;Inspired by Isaac, I went for a walk before doing any programming today. Also kicked off MemTest86 tests on my desktop, since it has suffered from intermittent freezes ever since I built it. If that doesn&#39;t turn up anything, I guess I&#39;ll open it up and make sure all the components are properly secured. Couldn&#39;t hurt to update Linux Mint, either.&lt;/p&gt;
&lt;p&gt;I finished my goal of implementing a message buffer interface for the BitTorrent client! It accumulates bytes from network packets, parses any peer-to-peer messages in that stream of bytes, and spits those messages back out! Also wrote a bunch of unit tests, which reminded me of my old job -- we had to write a lot of unit tests! In the process, I discovered that Common Lisp has built-in support for bitmasks, so I won&#39;t need to implement them myself.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;c1&#34;&gt;;; A bit vector of 7 bits!&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*bs*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;make-array&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:element-type&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;bit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bit-and&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*bs*&lt;/span&gt; &lt;span class=&#34;l l-Other&#34;&gt;#*1111000&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; make the last 3 bits 0!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I did remember another task I&#39;ll have to take on: serialising peer-to-peer messages for network transmission. I&#39;m sure there&#39;s a library I could&#39;ve used for defining the serialisation format rather than manually writing code to do the serialising AND deserialising. Oh well, it was nice to make some progress today.&lt;/p&gt;
&lt;p&gt;Besides that, I did a Forth deep dive with Reed, trying to figure out the execution model of Forth and how to model it in a higher-level language. He also shared some neat Emacs tips with me (&#34;use Doom&#34;).&lt;/p&gt;
&lt;p&gt;Plan for next week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More gradual progress on BitTorrent.&lt;/li&gt;
&lt;li&gt;Get to a point where I can actually start writing code for the Forth interpreter.&lt;/li&gt;
&lt;li&gt;Some generative art / ~sketch~ stuff.&lt;/li&gt;
&lt;/ul&gt;</description>
        <link>https://kevingal.com/blog/rc4.html</link>
        <pubDate>Fri, 26 Jan 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/rc4.html</guid>
    </item>
    <item>
        <title>Recurse Center, week 3</title>
        <description>&lt;h3 id=&#34;monday-january-15th&#34;&gt;Monday, January 15th&lt;/h3&gt;
&lt;p&gt;Had a nice chat with Julie, learned a lot about music and music programming! She&#39;s doing cool graphics stuff, and shared a bunch of cool links with me. She also remembered my EmojipastaBot that went viral on reddit, which was a blast from the past.&lt;/p&gt;
&lt;p&gt;Tried to optimise the &lt;a href=&#34;https://github.com/Kevinpgalligan/sketches/blob/master/src/thesketches/reaction-diffusion.lisp&#34;&gt;reaction diffusion animation&lt;/a&gt; that Tristan and I made on Friday, which basically consisted of adding type declarations to all the simulation code. It was still pretty slow, though. When I profiled the code, it turned out that the drawing part was the real bottleneck and was taking ~28 times longer than the simulation part! We &#34;manually&#34; draw each pixel as a rectangle, which, under the hood, involves pushing vertices to the GPU. I may look into a faster way of doing it.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/recurse/reaction.png&#34;
     alt=&#34;What kinda looks like a skull &amp; crossbones in black &amp; white.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;A still from the reaction diffusion animation.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Joined the TIC-80 tour given by Quinten, it&#39;s really cool! Was struck by the idea of writing a Forth compiler with WASM as a target, which could then be run on the TIC-80. First I&#39;d better do a Forth interpreter, though.&lt;/p&gt;
&lt;p&gt;Ended the day with a long debugging session, finally tracked down the bug that was causing my &lt;code&gt;sketch&lt;/code&gt; refactor to break. Though, when I fixed it, it unearthed several more broken behaviours that I&#39;ll have to investigate. Tomorrow I&#39;ll focus on BitTorrent stuff.&lt;/p&gt;
&lt;h3 id=&#34;tuesday-january-16th&#34;&gt;Tuesday, January 16th&lt;/h3&gt;
&lt;p&gt;Enjoyed part 2 of the SuperCollider workshop! Was also listening to a cool electronic music playlist that Julie shared with me!&lt;/p&gt;
&lt;p&gt;Wrote the skeleton of my BitTorrent client, hopefully I&#39;ll be handshaking with peers tomorrow! The only blocker is that most trackers are communicating over UDP, I&#39;ve only implemented the HTTP tracker protocol, and the HTTP tracker I&#39;ve been testing against was down today.&lt;/p&gt;
&lt;p&gt;Had a coffee chat with Alex, enjoyed hearing about his embedded projects! Looking forward to seeing his networked videogame and model train in action.&lt;/p&gt;
&lt;p&gt;I read most of &lt;a href=&#34;https://ratfactor.com/forth/the_programming_language_that_writes_itself.html&#34;&gt;this article&lt;/a&gt; about Forth, I&#39;m now pretty excited to write a Forth interpreter/compiler! Especially thinking about how Lisp macros can be used to express the Forth words in a DSL, and how code can be shared between an interpreter and a machine code-generating compiler.&lt;/p&gt;
&lt;h3 id=&#34;wednesday-january-17th&#34;&gt;Wednesday, January 17th&lt;/h3&gt;
&lt;p&gt;Figured out the OpenGL bug in my refactoring of the sketch graphics library. The way I had restructured the main class was causing resources to be created without the OpenGL context.&lt;/p&gt;
&lt;p&gt;Paired with Christopher to implement socket-based communication with other BitTorrent peers. I haven&#39;t done much byte-shuffling in Common Lisp, and I haven&#39;t done socket programming before, so this has been a slow process. I&#39;ve also discovered that the bytes of an individual peer-to-peer message are not guaranteed to arrive in the same network packet, adding an annoying layer of complexity.&lt;/p&gt;
&lt;p&gt;I feel bad that I&#39;ve been the driver in all of my pairing sessions -- I&#39;m almost at the point of begging the next person to let me be the navigator! &lt;/p&gt;
&lt;h3 id=&#34;thursday-january-18th&#34;&gt;Thursday, January 18th&lt;/h3&gt;
&lt;p&gt;This morning, I finally submitted a &lt;a href=&#34;https://github.com/vydd/sketch/pull/134&#34;&gt;pull request&lt;/a&gt; to fix a tricky bug in sketch. There are still some small changes required to ensure backwards compatibility, but I&#39;m counting this as a win!!&lt;/p&gt;
&lt;p&gt;Today was Impossible Day at RC, where everyone is supposed to attempt something that seems impossible to them. I couldn&#39;t participate, though, because I was traveling to Dublin in the evening for a Lisp meetup. Maybe Friday can be my Impossible Day.&lt;/p&gt;
&lt;p&gt;Tried to work on the bus but looking down was making me feel ill, ended up napping instead. Did manage to finish reading &lt;a href=&#34;https://ratfactor.com/forth/the_programming_language_that_writes_itself.html&#34;&gt;this overly-long article&lt;/a&gt; about Forth. Now feeling hyped about writing a Forth interpreter. Also read some Godot articles, inspired by Quinten.&lt;/p&gt;
&lt;h3 id=&#34;friday-january-19th&#34;&gt;Friday, January 19th&lt;/h3&gt;
&lt;p&gt;Read through some &lt;a href=&#34;https://kidscancode.org/godot_recipes/4.x/&#34;&gt;Godot tutorials&lt;/a&gt; that Quinten shared, excited to try Godot now! Also read about how other languages can interface with the engine, since that seems like it could be a fun project. They have a C API called GDExtension that has been used to, e.g., make Rust bindings. (This was actually at 3am last night when I couldn&#39;t sleep, lol).&lt;/p&gt;
&lt;p&gt;Reed&#39;s enthusiasm for Forth inspired me to shuffle my priorities! Read &lt;a href=&#34;https://ratfactor.com/forth/the_programming_language_that_writes_itself.html&#34;&gt;this&lt;/a&gt; overly-long but entertaining article, and am enjoying the &lt;a href=&#34;https://github.com/nornagon/jonesforth/blob/master/jonesforth.S&#34;&gt;jonesforth.S&lt;/a&gt; literate implementation of Forth. I&#39;ve also started writing a Forth interpreter. The plan is to implement Forth words in the order that they appear in &lt;a href=&#34;https://www.forth.com/starting-forth/&#34;&gt;Starting Forth&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Coffee chat with Kenneth, talked about shaders and graphics and how to handle motivation at RC.&lt;/p&gt;
&lt;p&gt;Tweaked my &lt;a href=&#34;https://github.com/vydd/sketch/pull/134/&#34;&gt;pull request&lt;/a&gt; for the sketch graphics library, trying to ensure backward compatibility even for users who rely too much on the implementation details.&lt;/p&gt;
&lt;p&gt;Making a tactical retreat from the BitTorrent client because my motivation was flagging. I think I was overwhelmed by the combined complexity of the client design, the network protocol, and all the new Common Lisp packages I&#39;m being exposed to. Next week I&#39;ll divide the remaining work into tiny chunks and hopefully that will make it feel more approachable.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/rc3.html</link>
        <pubDate>Fri, 19 Jan 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/rc3.html</guid>
    </item>
    <item>
        <title>Recurse Center, week 2</title>
        <description>&lt;h3 id=&#34;monday-january-8th&#34;&gt;Monday, January 8th&lt;/h3&gt;
&lt;p&gt;Finally read the rest of the BitTorrent &lt;a href=&#34;http://bittorrent.org/beps/bep_0003.html&#34;&gt;specification&lt;/a&gt;. Apparently, there&#39;s a better, &lt;a href=&#34;http://wiki.theory.org/BitTorrentSpecification&#34;&gt;unofficial document&lt;/a&gt;, but I wanted to start from the original.&lt;/p&gt;
&lt;p&gt;My understanding is that there are two basic entities considered in the BitTorrent protocol: peers and trackers. Peers download and share files, while trackers keep a list of all the peers. It seems that the next step after finishing my bencoding implementation (the text-based encoding scheme used by BitTorrent) will be to write a client that can communicate with a tracker and fetch the list of peers.&lt;/p&gt;
&lt;p&gt;First, though, I have two tasks to work on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take a look at sample BitTorrent traffic in Wireshark, and also peek at some .torrent files. There&#39;s a sample network traffic dump &lt;a href=&#34;https://wiki.wireshark.org/BitTorrent&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add unit tests for my bencoding implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the way, I&#39;m using &lt;a href=&#34;http://www.kristenwidman.com/blog/33/how-to-write-a-bittorrent-client-part-1/&#34;&gt;this article&lt;/a&gt; as a rough guide.&lt;/p&gt;
&lt;p&gt;After reading the Bittorrent spec, I joined the daily check-in meeting. Afterwards, had a chat with Sahil, Reed, and Vedashree about a data-modeling task that Vedashree is working on. Good to brush up on my intuitions about SQL and relational databases!&lt;/p&gt;
&lt;p&gt;Later: separate &#34;coffee&#34; chats (I don&#39;t drink coffee) with Raghav and Régis. Raghav has an interesting background! He learned how to program through contributing to private Runescape servers, which were made by reverse engineering the Runescape network protocol and recreating the necessary serverside code. He likes Clojure, hopefully I&#39;ll get to pair with him on a Lisp thing at some point. Régis is focused on machine learning projects, he gave me some nice suggestions about learning resources -- the homework exercises in Andrew Ng&#39;s course might be too easy, apparently.&lt;/p&gt;
&lt;p&gt;We had the Building Your Volitional Muscles workshop today, which was basically about the skill of figuring out what you really want to work on. We did an exercise where we wrote 3 columns: project ideas, why we wanted to do them, and which projects we were actually going to do. It was interesting to dig into my motivations, which ranged from &#34;I need this piece of software&#34; to &#34;seems fun&#34; to &#34;this will probably be useful for my future job&#34;. Ultimately, I think I&#39;ll place more emphasis on the FUN! part, though there aren&#39;t many ideas on my project list that wouldn&#39;t be at least a little bit fun.&lt;/p&gt;
&lt;p&gt;I&#39;d already implemented bdecoding (string -&amp;gt; data), but when it came to actual bencoding (data -&amp;gt; string) I ran into a tricky implementation detail. I needed to decide how to represent the dict data structure (which, when encoded, look like &#34;d4:blah4:spame&#34;). First I was going to use regular lists to represent bencoding lists, and &#34;alists&#34; (Lispspeak for lists of pairs) to represent dicts, but it would be difficult to distinguish between them, since they&#39;re both lists. I then considered Common Lisp&#39;s &lt;code&gt;hash-table&lt;/code&gt; type, but it doesn&#39;t maintain keys in insertion order, and the alphabetical order of bencoded dicts must be maintained. Finally, I settled on using binary search trees from the &lt;a href=&#34;https://github.com/froydnj/trees&#34;&gt;trees&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;Next, with a complete bencoding/bdecoding implementation in hand, it was time to write unit tests, because I was in no way confident that my implementation was correct. It was fairly straightforward to set up the &lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/testing.html&#34;&gt;fiveam&lt;/a&gt; test framework. The tests consist of either decoding a bencoded string and making sure the original string is recovered when it&#39;s bencoded again, or passing invalid data and making sure it errors out.&lt;/p&gt;
&lt;p&gt;Here&#39;s what fiveam unit tests look like!&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;single-digit-benteger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;is-reencodable&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;i1e&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;multi-digit-benteger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;is-reencodable&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;i12e&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;zero-benteger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;is-reencodable&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;i0e&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;minus-zero&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bencode:bdecode&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;i-0e&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another tricky implementation detail. When I tried to parse an actual .torrent file, I ran into trouble with character encodings. I couldn&#39;t even read the .torrent file as a string, because my Common Lisp implementation, by default, tries to interpret the file as UTF-8, when in fact a bencoded file consists mostly of ASCII but also sequences of raw bytes (such as raw SHA1 hashes). Basically, there were sequences of bytes that didn&#39;t correspond to any Unicode codepoint as represented by UTF-8. I couldn&#39;t load the file as ASCII, either, because it contains bytes outside the ASCII range (0-127). Spent a while spinning my wheels on this, eventually turned to the wonderful folks at the #lisp IRC, who suggested to decode using the ISO-8859-1 character encoding, which assigns a character to each of the 256 possible values of a byte. And it&#39;s compatible with ASCII. This suggestion worked, and I was finally able to parse the file. Thanks #lisp!&lt;/p&gt;
&lt;h3 id=&#34;tuesday-january-9th&#34;&gt;Tuesday, January 9th&lt;/h3&gt;
&lt;p&gt;The timezone difference is challenging. By the time I finish for the day at 10pm, my brain is frazzled and I find it hard to go to sleep.&lt;/p&gt;
&lt;p&gt;Joined the daily check-in call for the 2nd day in a row. It&#39;s nice to see people and hear what they&#39;re working on, though it does evoke dread-filled memories of the daily standups at my old job.&lt;/p&gt;
&lt;p&gt;Discovered that Emacs&#39;s &lt;code&gt;evil-mode&lt;/code&gt; (vi bindings) comes with interactive replacement enabled by default, which is very neat! It was under my nose all this time. Thanks to Detective Reed for figuring that out. To scratch my &#34;Emacs customisation&#34; itch, I later spent some time setting up Magit, a git interface for Emacs. I think this will finally enable me to do Lisp programming entirely from Emacs, instead of switching back and forth between Emacs and the terminal. It also appears to be a more pleasant interface than the git CLI.&lt;/p&gt;
&lt;p&gt;Had a nice coffee chat with Neda, courtesy of the chat-bot. Yet another person with an interesting background -- she majored in mathematical physics (or maths and physics?) with a minor in software engineering, eventually got a job as a backend software developer. She worked through Crafting Interpreters for most of her batch (should&#39;ve asked her more about that), now she&#39;s planning to grind Leetcode for job-hunting, which could be fun to pair on.&lt;/p&gt;
&lt;p&gt;Attended the SuperCollider workshop run by Zack, it made me really excited about music programming! Also attended the Emulators + VMs group, cool work being done there with WebAssembly and various CPU/console emulators. Finally, attended the Graphics Goblins group, where, as you might expect, there were cool graphics projects, including shadows in a terrain generation program, and a mosaic shader. Mostly a day of talking to people and seeing what they&#39;re working on. Tomorrow I&#39;ll try to focus on programming.&lt;/p&gt;
&lt;h3 id=&#34;wednesday-january-10th&#34;&gt;Wednesday, January 10th&lt;/h3&gt;
&lt;p&gt;Skipping the daily check-in today. While it&#39;s nice to see people, and it provides the opportunity for serendipitous interactions, it feels too much like my old job!! Goodbye daily structure, hello chaos. For accountability, I&#39;ll continue doing this weekly blog, and might post my written updates in the #checkins Zulip channel. Still experimenting with my routine, though.&lt;/p&gt;
&lt;p&gt;I haven&#39;t done any actual network programming so far, despite that ostensibly being the entire reason behind implementing a BitTorrent client. This changes today!&lt;/p&gt;
&lt;p&gt;Trackers are HTTP/HTTPS services, they provide information through HTTP GET requests about all the available peers. Those GET requests require various query parameters, e.g. &#34;https://mytracker.com:1337/announce?info_hash=blah&amp;amp;uploaded=0&#34;.&lt;/p&gt;
&lt;p&gt;I coded up a function to send a GET request with all the appropriate parameters. This involved various libraries: &lt;a href=&#34;https://github.com/fukamachi/dexador&#34;&gt;dexador&lt;/a&gt; for HTTP requests &lt;code&gt;(dex:get &#34;https://tracker.com&#34;)&lt;/code&gt;, &lt;a href=&#34;https://github.com/fukamachi/quri&#34;&gt;quri&lt;/a&gt; for URL manipulation (it also handles the percent encoding of query parameters), and &lt;a href=&#34;https://github.com/clibs/sha1&#34;&gt;sha1&lt;/a&gt; for computing hashes.&lt;/p&gt;
&lt;p&gt;I held my breath as I fired off a request to a tracker, only to get back this bencoded message:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;d14:failure reason25:provided invalid infohashe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Outbreath. It was too much to expect everything to work on the first try. The hash seems to match the one reported in qBitTorrent, though! I&#39;ll debug it tomorrow.&lt;/p&gt;
&lt;p&gt;Attended the Creative Coding session, where we were given the prompt &#34;Murphy&#39;s Law&#34;. My first thought was to make an animation of bouncing toast that only ever lands on the side with jam on it. Progress so far:&lt;/p&gt;
&lt;figure&gt;
&lt;video width=&#34;300&#34; height=&#34;300&#34; class=&#34;centered&#34; controls&gt;
    &lt;source src=&#34;/static/video/recurse/buggy-toast.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;figcaption&gt;My buggy toast animation! Includes a crappy, bug-ridden implementation of Verlet physics based on a Coding Train video I watched a while ago.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This ended up consuming the rest of my day, along with a coffee chat with Jake, who did physics in academia and then moved to data science / ML in industry. He wants to learn low-level computer stuff while at RC. Interesting to hear his perspective, since I&#39;m considering a data science career path myself.&lt;/p&gt;
&lt;h3 id=&#34;thursday-january-11th&#34;&gt;Thursday, January 11th&lt;/h3&gt;
&lt;p&gt;The toast now bounces, it doesn&#39;t stretch, and there&#39;s a mysterious force (something to do with a person called Murphy) that always makes it land on the jammy side.&lt;/p&gt;
&lt;figure&gt;
&lt;video width=&#34;530&#34; height=&#34;300&#34; class=&#34;centered&#34; controls&gt;
    &lt;source src=&#34;/static/video/recurse/toast.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;figcaption&gt;Murphy&#39;s Law and toast.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Submitted a &lt;a href=&#34;https://github.com/LispCookbook/cl-cookbook/pull/519&#34;&gt;pull request&lt;/a&gt; to the Common Lisp Cookbook, adding a description of how to load arbitrary bytes into a string with the SBCL implementation. The Common Lisp community is relatively small, so I think it&#39;s important to contribute to documentation efforts like the Cookbook. I&#39;m normally too lazy to do this, but trying to form good habits!&lt;/p&gt;
&lt;p&gt;Figured out that quri, the URL library, was inserting extra percent-encoded characters into the info hash, because it was re-encoding the strings as UTF-8. There&#39;s an option in quri to set the character encoding of the query string, but this is not exposed in the &lt;code&gt;make-uri&lt;/code&gt; interface -- hence, &lt;a href=&#34;https://github.com/fukamachi/quri/pull/85&#34;&gt;another pull request&lt;/a&gt;. Yay for yak-shaving! (Also, ended up closing the pull request because there&#39;s another way to do it).&lt;/p&gt;
&lt;p&gt;After this was fixed, I started getting 400 Bad Request responses from the server. Yet, when I copied the URL (including query parameters) into my web browser, it returned the list of peers! Likewise, when I copied the URL into a 1-line Python script that made a GET request using the &lt;code&gt;requests&lt;/code&gt; package...&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;url-here&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...it also returned a 200 and the peers list! Now the weirdest part: when I copy/pasted the URL into &lt;code&gt;(dex:get &#34;url-here&#34;)&lt;/code&gt;, instead of doing &lt;code&gt;(dex:get (quri:make-uri ...))&lt;/code&gt;, it worked! So my ugly fix was to convert the URI object to a string &lt;em&gt;before&lt;/em&gt; passing it to &lt;code&gt;dex:get&lt;/code&gt;. Maybe it&#39;s a bug in how dexador handles URI objects?&lt;/p&gt;
&lt;p&gt;The final task was to parse the list of peers, since it&#39;s stored in a binary format. Common Lisp doesn&#39;t have great built-in support for parsing binary formats, so I had to spend a while playing around with various libraries. Actually, there&#39;s an older format for the peers list I still have to add support for, which uses the bencoding format rather than a bytestring. Besides that, I&#39;m ready to start peer-to-peer communication!&lt;/p&gt;
&lt;p&gt;There was a 1-hour session today where people presented what they&#39;re working on. I&#39;ll have to think of something to share with the group. Maybe something about Lisp macros, or generative art stuff!&lt;/p&gt;
&lt;h3 id=&#34;friday-january-12th&#34;&gt;Friday, January 12th&lt;/h3&gt;
&lt;p&gt;Started refactoring &lt;a href=&#34;https://github.com/vydd/sketch&#34;&gt;sketch&lt;/a&gt; to change how the SDL2 window is handled. Currently, the main class in sketch inherits from an SDL2 window class. When creating an instance, the window gets initialized first with default dimensions, then the attributes of the sketch class are initialized, and then those attributes (like width and height) are assigned to the window. This causes the window to resize, and anything that&#39;s drawn in the first round of rendering is consistently getting lost as a result. The plan is to switch from inheritance to composition: store the window as a slot in the sketch class so that it can be created with the right dimensions from the start. This also helps to loosen the dependency on SDL2 in case we want to add a different backend in the future. It&#39;s not the most exciting work, but this bug has been annoying me for a while now.&lt;/p&gt;
&lt;p&gt;Stuck on an error with this (partial) stack trace, pinged the other sketch developers for help.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;The value
  -402557904
is not of type
  SB-INT:INDEX
   [Condition of type TYPE-ERROR]

Backtrace:
  0: (CL-OPENGL:GET-SHADER-INFO-LOG 0)
  1: (KIT.GL.SHADER:COMPILE-AND-LINK-PROGRAM NIL :VERTEX-SHADER &amp;quot; ..)
  2: (KIT.GL.SHADER::PROCESS-SOURCE #&amp;lt;KIT.GL.SHADER::SHADER-DICTIONARY-DEFINITION {1006829433}&amp;gt; #&amp;lt;KIT.GL.SHADER::PROGRAM-SOURCE :FILL-SHADER&amp;gt; #&amp;lt;KIT.GL.SHADER:PROGRAM {1003009FB3}&amp;gt;)
  3: ((:METHOD KIT.GL.SHADER:COMPILE-SHADER-DICTIONARY (KIT.GL.SHADER::SHADER-DICTIONARY-DEFINITION)) #&amp;lt;KIT.GL.SHADER::SHADER-DICTIONARY-DEFINITION {1006829433}&amp;gt;) [fast-method]
  4: (INITIALIZE-ENVIRONMENT #&amp;lt;TESTER {1002405A13}&amp;gt;)
  5: ((:METHOD INITIALIZE-INSTANCE :AFTER (SKETCH)) #&amp;lt;TES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Spent a while thinking through the design of the peer-to-peer part of my BitTorrent client, and asked in the #networking channel on Zulip for feedback. Here&#39;s the preliminary design I came up with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A master thread accepts requests to download a torrent, fetches the list of peers, and spins up threads to communicate with those peers.&lt;/li&gt;
&lt;li&gt;Another thread monitors for attempts to connect from new peers and spins up threads to deal with them.&lt;/li&gt;
&lt;li&gt;Once they&#39;re created, the threads that communicate with peers are completely independent, sending TCP messages back and forth. They hand off any data received to...&lt;/li&gt;
&lt;li&gt;The final type of thread, which accepts data from peers in a queue data structure and writes it to disk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only thing I&#39;m unsure of is how to co-ordinate the threads. Don&#39;t want to download the same piece of a file from multiple peers! So maybe there needs to be another type of thread that maintains a list of which peers have which block of data, and peer-threads query it to decide which block they should request next. It&#39;s fun to think about this! I think I&#39;ll capture the design in a diagram when it&#39;s further along.&lt;/p&gt;
&lt;p&gt;Wesley suggested storing all the state in a data structure and access it using a lock/mutex, rather than passing everything through queues. The main bottleneck will be the network, so there wouldn&#39;t likely be much contention for a mutex. Julian and Wesley also suggested writing directly to disk in the peer-threads, possibly using an async I/O interface like io_uring (which I never heard of before). Network transfer is much slower than disk access, so maybe the peer-threads can handle the disk writes themselves.&lt;/p&gt;
&lt;p&gt;Attended the feelings check-in. Everyone there was so open and emotionally intelligent! ✨ I&#39;m not sure what the protocol is for sharing what was discussed in the meeting, so... moving on.&lt;/p&gt;
&lt;p&gt;Later, I had a 2-/3-hour pairing session with Tristan, courtesy of the pairing bot. We worked on an animation of the &lt;a href=&#34;https://thecodingtrain.com/challenges/13-reaction-diffusion&#34;&gt;reaction diffusion&lt;/a&gt; model. We managed to finish it, but the animation is currently a bit slow, so I&#39;m going to optimise the program before sharing a video. Tristan and I talked about Common Lisp, the multi-threading design of my BitTorrent client, and his Rust compression algorithm project. I really enjoyed the experience! I think pairing with someone else really helps me to stay focused, as it forces me to not get distracted by doing dopamine-rich activities like playing chess.&lt;/p&gt;
&lt;p&gt;Next week, my goals are: (1) pair on more things, (2) get peer-to-peer communication working, and (3) finish fixing that bug in sketch. I think I want to pivot to another topic after the BitTorrent project is finished, like computer graphics or programming languages, which have more people working on them. It would be nice to try learning as part of a group.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/rc2.html</link>
        <pubDate>Fri, 12 Jan 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/rc2.html</guid>
    </item>
    <item>
        <title>Recurse Center, week 1</title>
        <description>&lt;h3 id=&#34;day-1-wednesday-january-3rd&#34;&gt;Day 1 (Wednesday, January 3rd)&lt;/h3&gt;
&lt;p&gt;Started with some presentations about the philosophy of the Recurse Center and how to get the most out of the experience. There&#39;s lots to learn about how RC works, from Zulip (their messaging system) to Virtual RC (a &#34;virtual space&#34; where you can move around your avatar and interact with other RCers). We also did some Chat Roulette-style meet-and-greets. Met maybe 15 people from my batch, but there are many others! Keeping a list of people with shared interests and who I think would be interesting to pair with. &lt;/p&gt;
&lt;p&gt;Between Zoom calls, I watched the first video in &lt;a href=&#34;https://www.youtube.com/watch?v=4b4MUYve_U8&amp;amp;list=PLoROMvodv4rMiGQp3WXShtMGgzqpfVfbU&amp;amp;index=2&#34;&gt;Andrew Ng&#39;s machine learning course&lt;/a&gt; on 2x speed. I&#39;m not sure yet if I want to work through that course while at RC, but it seemed like a fun way to spend an hour. Considering whether to do the homework exercises in J, but not very confident in my J skillz.&lt;/p&gt;
&lt;p&gt;Feeling tempted by people talking about their programming language projects, makes me want to dive into the &lt;em&gt;Crafting Interpreters&lt;/em&gt; book, or maybe &lt;em&gt;Engineering a Compiler&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;day-2-thursday-january-4th&#34;&gt;Day 2 (Thursday, January 4th)&lt;/h3&gt;
&lt;p&gt;Started the day with a workshop on pair programming, which they&#39;re strongly encouraging us to do. I paired up with Reed to work on a Mastermind clone in JavaScript. He shared some of his JavaScript philosophy, and made some analogies between the DOM and the sorta environment you&#39;d have in Smalltalk/Erlang... both of which are languages I wanna try out. Consider function calls as &#34;messages&#34; to elements in the DOM. We made a pretty-looking board with some interactivity, but didn&#39;t implement the game logic. Reed is good at this JavaScript thing! He also showed me a cool Emacs package for interactively writing regex, I will definitely add it to my Emacs config.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/recurse/mastermind.png&#34;
     alt=&#34;Our basic interface for the Mastermind boardgame, with round coloured circles for pegs and a submit button.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Our Mastermind clone.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I&#39;m going to fill in this blog post as I go along, seems easier than trying to remember everything at the end of the week.&lt;/p&gt;
&lt;p&gt;Next up, I wanted to get my feet wet and actually start a programming project. What better for that than a small generative art piece! I got the gist of how to visualise the Lorenz attractor from a &lt;a href=&#34;https://thecodingtrain.com/challenges/12-lorenz-attractor&#34;&gt;Coding Train&lt;/a&gt; video, which I then went ahead and did.&lt;/p&gt;
&lt;p&gt;The only stumbling block was figuring out whether I could draw it in 2d, given that &lt;a href=&#34;https://github.com/vydd/sketch&#34;&gt;sketch&lt;/a&gt;, the Common Lisp drawing framework I use, does not support 3d and that The Coding Train&#39;s version is in 3d. I realised I could just ignore the z dimension when drawing, and I could use the z value to determine the colour of the line.&lt;/p&gt;
&lt;figure&gt;
&lt;video width=&#34;400&#34; height=&#34;400&#34; class=&#34;centered&#34; controls&gt;
    &lt;source src=&#34;/static/video/recurse/lorenz.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;figcaption&gt;The Lorenz attractor!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I made it so that pressing the space key resets the drawing and randomises the parameters. It was kinda awkward to record this video, though -- I had to rush to press the &#39;record&#39; button after starting the animation. So tomorrow I think I&#39;ll work on adding to sketch the ability to save a video of an animation, probably by piping video output to ffmpeg.&lt;/p&gt;
&lt;p&gt;I ended the day by starting to read about the &lt;a href=&#34;http://www.bittorrent.org/beps/bep_0003.html&#34;&gt;BitTorrent protocol&lt;/a&gt;, since I want to implement it in order to learn more about computer networking.&lt;/p&gt;
&lt;h3 id=&#34;day-3-friday-january-5th&#34;&gt;Day 3 (Friday, January 5th)&lt;/h3&gt;
&lt;p&gt;Tried to catch up with all the messages on Zulip -- there are a lot! At some point I&#39;ll have to filter everything down to make it more manageable. For now, I&#39;m rolling with the chaos.&lt;/p&gt;
&lt;p&gt;Started my BitTorrent client project. Found that &lt;a href=&#34;https://github.com/andrei-dubovik/centrality&#34;&gt;someone else&lt;/a&gt; has already implemented such a client in Common Lisp. I don&#39;t intend to use their code, but it will be useful to have a reference and to see what packages they used.&lt;/p&gt;
&lt;p&gt;After skimming the &lt;a href=&#34;http://www.bittorrent.org/beps/bep_0003.html&#34;&gt;specification&lt;/a&gt;, I jumped into writing a parser for the bencoding text format. It has integers like &#34;i123e&#34; and strings like &#34;4:spam&#34;, as well as lists and dictionaries. I&#39;ve been meaning to try out &lt;a href=&#34;https://github.com/scymtym/esrap&#34;&gt;esrap&lt;/a&gt; for parsing in Common Lisp, and this seemed like the perfect opportunity! It uses the idea of parser generators, which I think are like composable building blocks for parsing.&lt;/p&gt;
&lt;p&gt;I ran into some early trouble with esrap due to an annoying technical issue. Basically, I was trying to use the &#39;?&#39; symbol from the esrap package without having access to it. This was frustrating because it felt like I was squandering my day on a trivial issue.&lt;/p&gt;
&lt;p&gt;There are edge cases in even the simplest of tasks, like parsing bencoded integers: &#34;i0e&#34; is valid, &#34;i01e&#34; is invalid, and &#34;i-0e&#34; is invalid. On that note, esrap has nice error messages!&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;BENCODE&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;benteger&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;i01e&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;[...]&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;At&lt;/span&gt;

  &lt;span class=&#34;nv&#34;&gt;i01e&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Column&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Position&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;INTEGER:&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;While&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;parsing&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;INTEGER.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Expected:&lt;/span&gt;

     &lt;span class=&#34;k&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;character&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LATIN_SMALL_LETTER_E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;[Condition&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ESRAP-PARSE-ERROR]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&#39;s a taste of what the DSL looks like for defining grammar rules! Courtesy of macros. Maybe I should give a presentation on macros, even though I&#39;m still learning about them.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defrule&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;benteger&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\i&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;nv&#34;&gt;nonzero&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;digit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
         &lt;span class=&#34;sc&#34;&gt;#\e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Parsing bencoded strings is a little tricky, because the length of the string is determined by the integer prefix. I had to go outside the constraints of the &lt;code&gt;defrule&lt;/code&gt; syntax and write a custom &lt;code&gt;parse-bencoded-string&lt;/code&gt; function, which, thankfully, integrates well with esrap parsing. I was then able to define the rest of the parser in 4 lines of code:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defrule&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;parse-bencoded-string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defrule&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ben&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;benteger&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defrule&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ben&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:function&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defrule&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dict&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ben&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:function&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Testing:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;BENCODE&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;list&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;l4:spam4:eggse&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;spam&amp;quot;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;eggs&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BENCODE&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;dict&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;d3:cow3:moo4:spam4:eggse&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;cow&amp;quot;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;moo&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;spam&amp;quot;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;eggs&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty neat! &lt;a href=&#34;https://github.com/Kevinpgalligan/cl-torrent&#34;&gt;Here&#39;s the code so far&lt;/a&gt;. Next week I&#39;ll come back to this and write unit tests to make sure I&#39;ve covered all the edge cases. I haven&#39;t done unit testing in Common Lisp before, so it&#39;ll require some effort to set up. Seems like a good candidate for pair programming!&lt;/p&gt;
&lt;p&gt;I&#39;m trying to reach out to people with similar interests, but it&#39;s hard to keep track of everyone. I&#39;ll start attending the daily check-ins next week, and also some of the meetings like &#34;Creative Coding&#34; and &#34;Emulators + VMs&#34;, which will hopefully lead to new connections.&lt;/p&gt;
&lt;p&gt;To finish the week, I made a 2-line &lt;a href=&#34;https://github.com/vydd/sketch/pull/133&#34;&gt;pull request&lt;/a&gt; to &lt;a href=&#34;https://github.com/vydd/sketch&#34;&gt;sketch&lt;/a&gt; (don&#39;t draw a border around images by default!) and described my proposal to the other developers about how to fix a tricky bug where the first render call gets lost due to the window getting resized.&lt;/p&gt;
&lt;p&gt;Posting this now because I want my weeks to start on a Monday and end on a Friday. Hopefully I&#39;m not being too verbose!&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/rc1.html</link>
        <pubDate>Fri, 05 Jan 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/rc1.html</guid>
    </item>
    <item>
        <title>A Recursive Christmas</title>
        <description>&lt;p&gt;I&#39;m happy to report that this January I&#39;ll be starting a 3-month programming retreat at the &lt;a href=&#34;https://www.recurse.com/&#34;&gt;Recurse Center&lt;/a&gt; (RC)! It&#39;s basically like a writing retreat, but for programming. Since I got rejected the first time I applied, and I found it helpful when preparing my second application to read other people&#39;s experiences, I figured I&#39;d do the same thing here. I&#39;ll also list the &lt;a href=&#34;#project-ideas&#34;&gt;project ideas&lt;/a&gt; I have for my batch, which I find VERY EXCITING to think about.&lt;/p&gt;
&lt;p&gt;By the way, in the spirit of Christmas, here&#39;s a Palestine-themed animation I made of nested Christmas trees. Source code &lt;a href=&#34;https://github.com/Kevinpgalligan/sketches/blob/master/src/thesketches/xmas.lisp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;video width=&#34;200&#34; height=&#34;200&#34; class=&#34;centered&#34; controls&gt;
    &lt;source src=&#34;/static/video/recurse/xmas.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;h3 id=&#34;first-application&#34;&gt;First Application&lt;/h3&gt;
&lt;p&gt;There are three stages to the RC application process: a written application, a conversational interview, and a pair programming interview. The written application is meant to determine your motivations and your programming background. I felt like my attempt at the written application was pretty strong, and indeed, I managed to pass that stage of the interview. I&#39;ll share my final written application in the next section.&lt;/p&gt;
&lt;p&gt;The conversational interview is where I got rejected. They don&#39;t provide feedback after the interview, but I can guess what went wrong. My motivations for attending RC were not clear or well thought-out. I said I liked the structure provided by RC, and that I thought it would help me to stay motivated -- but the RC website specifically says that they&#39;re looking for self-guided and self-motivated people! I also thought the interviewer would appreciate my openness when I shared my one worry about attending RC and said that, in the aftermath of my PhD experience, I sometimes find difficult programming to be anxiety-inducing, which makes me procrastinate and avoid it. In retrospect, I shouldn&#39;t have been so self-deprecating. An empathetic interviewer might even have rejected me for the good of my mental health!&lt;/p&gt;
&lt;p&gt;Ultimately, I don&#39;t know why I got rejected, and I can only speculate. Needless to say, I was gutted, because I&#39;d been fantasising for many years about attending RC. The RC website says that 6% of attendees get in on their 2nd (or later) attempt, which is supposed to be encouraging, but seems like a pretty small percentage to me??? Still, I was determined to try again after the mandatory 3-month waiting period, and self-reflection had at least given me an idea of how to improve.&lt;/p&gt;
&lt;h3 id=&#34;second-application&#34;&gt;Second Application&lt;/h3&gt;
&lt;p&gt;I did a crapload of research for my second application. I combed through the RC website, and read upwards of 20 articles and blog posts by people who&#39;d applied to RC. I used these sources for inspiration and to better prepare myself. I also seriously reflected on my motivations, and concluded that the reason I wanted to attend RC specifically was for the community it provides. Anyone can go into the mountains and do a programming retreat by themselves, but it wouldn&#39;t be half as fun or as beneficial as working with other people!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Kevinpgalligan/e03091ff2536f436c2fb56c16b6cdea1&#34;&gt;Here&lt;/a&gt; is my second written application, or something very close to it! Besides revising my motivations, I also tried to be more detailed about what I wanted to work on, and what types of projects I&#39;d worked on in the past.&lt;/p&gt;
&lt;p&gt;The conversational interview was shorter this time, down from 30 minutes to 15 minutes. It also felt way less intense than the first one. I was prepared for all the questions, since either they were taken from the written application or I&#39;d encountered them during my preparations. The questions were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What&#39;s your programming background?&lt;/li&gt;
&lt;li&gt;What do you want to work on at RC?&lt;/li&gt;
&lt;li&gt;What was a programming problem you encountered, and how did you resolve it?&lt;/li&gt;
&lt;li&gt;How will you tell that your batch has been a success?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end, I had the opportunity to ask my own questions, so I asked the interviewer what their experience at RC had been; how people divide their time between programming and interacting with others; and how flexible RC is in terms of people attending remotely (answer: 100% flexible).&lt;/p&gt;
&lt;p&gt;I managed not to self-deprecate this time. The interviewer was really friendly, and I think there was a lot of crossover between what they&#39;d worked on and what I wanted to work on. Also, I think I conveyed my enthusiasm and excitement for RC a lot better this time, since I remember smiling a lot (out of genuine enthusiasm) when the interviewer talked about their experience. Despite these positive signs, I had gotten good vibes from the interviewer during the first application, so my heart rate still doubled when I received a follow-up email from RC, to the extent that I could hear my heartbeat pounding in my ears. I hid in the bathroom to open the email, just in case I burst into tears. I was relieved to find, however, that I had passed the conversational interview this time!&lt;/p&gt;
&lt;p&gt;Next up was the pair programming interview. Beforehand, you&#39;re required to write a short program. During the interview, you then pair up with your interviewer to add a small feature to that program. I chose to write a toy version of Space Invaders, where the aliens were circles and the player was a rectangle. I also prepared by skimming &lt;a href=&#34;https://martinfowler.com/articles/on-pair-programming.html&#34;&gt;this&lt;/a&gt; article on pair programming. At the start of the interview, I spent a lot of time talking through my program from top to bottom. Maybe too much time, but the interviewer gave the go-ahead and could&#39;ve interrupted me if I was taking too long. We then worked on adding the ability to shoot bullets, just about managing to complete the collision-detection logic before running out of time. The point of this interview isn&#39;t to complete the task, but to find out what you&#39;re like to work with, so I wasn&#39;t worried about how much progress I&#39;d made. My approach was basically to talk through every single thing I was doing and to regularly prompt the interviewer for feedback. In practice, this meant I ended a lot of sentences by saying &#34;if that makes sense&#34; or &#34;if that sounds good to you&#34;.&lt;/p&gt;
&lt;p&gt;I somehow ended up enjoying this interview a lot, despite being tired and sick with a headcold. The programming went smoothly, the interviewer was nice, and they were helpful in catching a bug or two. It is, in fact, fun to program with other people! Still, the pounding in my ears returned when I received the follow-up email today, and it was with relief and happiness that I read the good news.&lt;/p&gt;
&lt;p&gt;The whole process took 1 week. My batch starts on January 3rd. For accountability, I&#39;m going to post a weekly update, so stay tuned! I&#39;m looking forward to meeting cool programmers and to 12 weeks of (hopefully) anxiety-free programming!&lt;/p&gt;
&lt;h3 id=&#34;project-ideas&#34;&gt;Project Ideas&lt;/h3&gt;
&lt;p&gt;Below are all the project ideas I have, grouped by the following categories: networking, systems, graphics, languages, software, workflow, music, computer science fundamentals, hacking, and maths &amp;amp; machine learning. (Yes, I have too many interests). I&#39;ve compiled them over many years, from many different sources -- including my brain.&lt;/p&gt;
&lt;p&gt;There&#39;s no way I&#39;ll complete even half of them, so my plan is to do whatever makes me feel most excited on any particular day and see what happens. The projects I&#39;m planning to start with are marked with a star emoji ⭐. If you have any suggestions or want to team up with me on any of these ideas, please let me know!&lt;/p&gt;
&lt;h5 id=&#34;networking&#34;&gt;Networking&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;⭐ Implement a BitTorrent client.&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.theory.org/BitTorrentSpecification&#34;&gt;http://wiki.theory.org/BitTorrentSpecification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kristenwidman.com/blog/how-to-write-a-bittorrent-client-part-1/&#34;&gt;http://www.kristenwidman.com/blog/how-to-write-a-bittorrent-client-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bittorrent.org/beps/bep_0003.html&#34;&gt;http://www.bittorrent.org/beps/bep_0003.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network traffic visualiser.&lt;/li&gt;
&lt;li&gt;Reverse engineer a network protocol, e.g. for a web-based game.&lt;/li&gt;
&lt;li&gt;Learn how to troubleshoot a network connection with dig, ping and traceroute.&lt;/li&gt;
&lt;li&gt;Trace ping, traceroute, netstat, DHCP, DNS, ARP, SSL (SSLsniff &amp;amp; SSLstrip).&lt;/li&gt;
&lt;li&gt;Implement a command-line SMTP mailer.&lt;/li&gt;
&lt;li&gt;Play around with DNS, maybe implement it? (and see: &lt;a href=&#34;https://www.dns.toys/&#34;&gt;https://www.dns.toys/&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Implement a program to spy on local WiFi.&lt;/li&gt;
&lt;li&gt;More ideas: FTP-based file transfer program; a bandwidth monitor; a port scanner; a mail checker (enter POP or IMAP protocol, web server &amp;amp; IP, and application checks for mail); IP -&amp;gt; country; whois based on IP.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;systems&#34;&gt;Systems&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Reroute microphone input to another computer across the network.&lt;/li&gt;
&lt;li&gt;Call a C function using assembly, and vice versa.&lt;/li&gt;
&lt;li&gt;Device driver for my electronic piano.&lt;/li&gt;
&lt;li&gt;C extension for higher level language.&lt;/li&gt;
&lt;li&gt;Annotate the assembly output of a Hello World C program.&lt;/li&gt;
&lt;li&gt;Hand-write an ELF binary file (inspired by: &lt;a href=&#34;https://blinry.org/rc-month-1/&#34;&gt;https://blinry.org/rc-month-1/&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Implement an assembler/linker from scratch (also &lt;a href=&#34;https://blinry.org/rc-month-1/&#34;&gt;https://blinry.org/rc-month-1/&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Parser for ELF file format.&lt;/li&gt;
&lt;li&gt;Implement a debugger.&lt;/li&gt;
&lt;li&gt;Print &#34;hello world&#34; during the boot process.&lt;/li&gt;
&lt;li&gt;Try out alternative operating systems (Plan9, Free BSD).&lt;/li&gt;
&lt;li&gt;Operating Systems books.&lt;ul&gt;
&lt;li&gt;Operating System Design: The Xinu Approach.&lt;/li&gt;
&lt;li&gt;The Design and Implementation of the FreeBSD Operating System.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn strace: &lt;a href=&#34;https://jvns.ca/blog/2021/04/03/what-problems-do-people-solve-with-strace/&#34;&gt;https://jvns.ca/blog/2021/04/03/what-problems-do-people-solve-with-strace/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create my own filesystem (whatever that means).&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;graphics&#34;&gt;Graphics&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;⭐ Implement various generative art ideas, see: The Coding Train.&lt;/li&gt;
&lt;li&gt;⭐ Add features to the sketch generative art framework (&lt;a href=&#34;https://github.com/vydd/sketch&#34;&gt;https://github.com/vydd/sketch&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;3d renderer using 2d graphics primitives (draw skyscrapers).&lt;/li&gt;
&lt;li&gt;Implement a rasteriser.&lt;/li&gt;
&lt;li&gt;Learn about shaders: shadertoy and Book of Shaders.&lt;/li&gt;
&lt;li&gt;Write Common Lisp bindings for Godot game engine.&lt;/li&gt;
&lt;li&gt;Make a game (e.g. chessbots, players program each type of piece using a DSL).&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;languages&#34;&gt;Languages&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;⭐ Implement a Forth interpreter in Lisp.&lt;/li&gt;
&lt;li&gt;Implement a Forth compiler:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nornagon/jonesforth/blob/master/jonesforth.S&#34;&gt;https://github.com/nornagon/jonesforth/blob/master/jonesforth.S&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ratfactor.com/forth/forth_talk_2023.html&#34;&gt;https://ratfactor.com/forth/forth_talk_2023.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implement a machine code-generating compiler (book: Engineering a Compiler).&lt;/li&gt;
&lt;li&gt;Read: On Lisp (macros).&lt;/li&gt;
&lt;li&gt;Read: The Common Lisp Condition System.&lt;/li&gt;
&lt;li&gt;Read: Lisp in Small Pieces (advanced implementation of Lisps).&lt;/li&gt;
&lt;li&gt;Play around with: Smalltalk (&lt;a href=&#34;http://wiki.squeak.org/squeak/377&#34;&gt;http://wiki.squeak.org/squeak/377&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Use J/APL for mathsy stuff.&lt;/li&gt;
&lt;li&gt;Other languages of interest: OCaml, Guile, Prolog.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;software&#34;&gt;Software&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;⭐ Finish my &lt;a href=&#34;https://github.com/Kevinpgalligan/RewindRSS&#34;&gt;RSS feed generator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Update my site generator to not regenerate pages that haven&#39;t changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;workflow&#34;&gt;Workflow&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Try out the Nyxt browser.&lt;/li&gt;
&lt;li&gt;Learn Magit for Emacs.&lt;/li&gt;
&lt;li&gt;Write an Emacs plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;music&#34;&gt;Music&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;⭐ Finish webcam theremin.&lt;/li&gt;
&lt;li&gt;Read: &#34;Theory and Practice of Electronic Music&#34;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;hacking&#34;&gt;Hacking&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Maybe useful: &lt;a href=&#34;https://github.com/hackclub/some-assembly-required&#34;&gt;https://github.com/hackclub/some-assembly-required&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read: &#34;Metasploit: The Penetration Tester&#39;s Guide&#34;&lt;/li&gt;
&lt;li&gt;Do: &lt;a href=&#34;https://cryptopals.com/&#34;&gt;https://cryptopals.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do: &lt;a href=&#34;https://github.com/guyinatuxedo/nightmare&#34;&gt;https://github.com/guyinatuxedo/nightmare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do: &lt;a href=&#34;https://overthewire.org/wargames/bandit/&#34;&gt;https://overthewire.org/wargames/bandit/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CTF challenges.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;computer-science-fundamentals&#34;&gt;Computer science fundamentals&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;⭐ Finish computer emulator based on Code: The Hidden Language of Computer Hardware and Software.&lt;/li&gt;
&lt;li&gt;Write BASIC interpreter in assembly (for emulator?).&lt;/li&gt;
&lt;li&gt;Read Paradigms of Artificial Intelligence Programming (algorithms in Common Lisp).&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;maths-machine-learning&#34;&gt;Maths &amp;amp; machine learning&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Book: Learning From Data.&lt;/li&gt;
&lt;li&gt;Andrew Ng&#39;s machine learning lectures.&lt;/li&gt;
&lt;li&gt;Reinforcement Learning: An Introduction (a book that uses Lisp!).&lt;/li&gt;
&lt;li&gt;Code up stuff from Martin Gardner articles.&lt;/li&gt;
&lt;li&gt;Implement principal component analysis.&lt;/li&gt;
&lt;li&gt;Implement BCH and other error correction codes.&lt;/li&gt;
&lt;li&gt;Read: How to Solve It.&lt;/li&gt;
&lt;li&gt;Implement Fourier transform algorithm.&lt;/li&gt;
&lt;li&gt;Do more Project Euler problems.&lt;/li&gt;
&lt;/ul&gt;</description>
        <link>https://kevingal.com/blog/recurse.html</link>
        <pubDate>Thu, 28 Dec 2023 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/recurse.html</guid>
    </item>
    <item>
        <title>Reflections on a PhD</title>
        <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I&#39;ve spent about 13% of my life obtaining a PhD. This article is for anyone who&#39;s wondering what that was like or whether they should do one themselves. I&#39;ll give a high-level sketch of my PhD experience, try to explain what research is like, discuss some of the challenges, and then draw my conclusions on whether it&#39;s a worthwhile thing to do.&lt;/p&gt;
&lt;p&gt;Before we begin, here&#39;s the obligatory disclaimer: all PhDs are different. They vary by university, country, supervisor, field of study, personality, and a million other things. I did mine at Maynooth University in Ireland. It took 4 years. I studied channel coding, which is a jumble of computer science, maths, and electronic engineering. I had 3 years of work experience beforehand, because of which I didn&#39;t have to rely entirely on my PhD stipend. My perspective is coloured by these details and will be different from that of, say, an American history PhD. That said, I&#39;ll try to give the broadest perspective I can.&lt;/p&gt;
&lt;p&gt;Another disclaimer: I think it&#39;s hard to understand what a PhD is REALLY like based on the ramblings of a random person on the internet. In retrospect, I didn&#39;t truly understand what I was getting myself into, despite reading articles like this one. Knowledge doesn&#39;t make up for experience. So, if you&#39;re considering whether to do a PhD, you will ideally want to acquire research experience beforehand in order to make a fully-informed decision.&lt;/p&gt;
&lt;h3 id=&#34;what-was-it-like&#34;&gt;What was it like?&lt;/h3&gt;
&lt;p&gt;I decided to do a PhD after working as a software developer for 3 years. I was bored with my job, and while I could&#39;ve looked for a new one, I had always intended to return to university, and then seemed like the best time to do so. My motivation was that I wanted more freedom to learn new things, and I wanted to expand my career options.&lt;/p&gt;
&lt;p&gt;I emailed a few Ireland-based researchers to enquire about postgraduate opportunities, without success. Then I found out about the new structured PhD programs that were being introduced to Ireland. Basically, Science Foundation Ireland (SFI) was copying the &#34;cohort&#34; model from other countries, in which groups of students start their PhD at the same time and follow a program that includes taught courses and training. This sounded good to me, so I applied to 3 of these programs. The only one I ended up interviewing for, and the one I joined, was the &lt;a href=&#34;https://www.data-science.ie/&#34;&gt;SFI Center for Research Training in Data Science&lt;/a&gt;. Let&#39;s just call it the CRT. While my background was in computer science, the term &#34;data science&#34;, and the CRT, are broad enough that they encompass people with lots of different backgrounds, from physicists to psychologists. Historians... probably not.&lt;/p&gt;
&lt;p&gt;Something that prospective PhD students have to consider is how they&#39;re going to pay for it. Unless you&#39;re filthy stinking rich, of course, or unless you want to be filthy stinking in debt. One option is for your potential supervisor to help you prepare a funding application. Another option is to enslave yourself to a company that will fund you to do research on their behalf. In general, it&#39;s more difficult to get funding in the humanities. Fortunately, my program was fully funded by SFI and their &#34;enterprise alliance&#34;, i.e. corporate backers. This freed me from having to find a supervisor or decide on a research project in advance, which I appreciated.&lt;/p&gt;
&lt;p&gt;I was part of the first ever cohort of the CRT. There were 30 students, split across 3 Irish universities: Maynooth University, University of Limerick, and University College Dublin. For the first 6 months of the program, I did courses and projects with my fellow students. These times were interesting, sociable, and fun. I was fulfilling my desire to learn new things, and I was highly motivated -- I set up my website during that time! Depending on the department you&#39;re studying in, a PhD can be an isolating experience, but being in a cohort reduces the risk of that, and my department in particular had a great social scene. COVID-19 torpedoed said social scene, of course, and we spent significant parts of the next 2 years in lockdown, but it was still nice to have other students to share the experience with, and to have emotional support when things weren&#39;t going so well.&lt;/p&gt;
&lt;p&gt;After working on assignments and projects for those few months, we had to seek out and select a supervisor. Some students knew in advance what they would be studying and who their supervisor would be. I did not, and I stumbled into my research area - channel coding - by accident, as I had not even been aware of its existence before I spoke with my future supervisor. Channel coding seemed to offer a mixture of computer science and maths, which were my subjects of interest. Also, my supervisor had more concrete project ideas than some of the other researchers I spoke with. So channel coding it was to be. At this point, all the students branched off and we started working on the research that would occupy us for the remainder of the 4 years.&lt;/p&gt;
&lt;p&gt;The end goal of a PhD, in material terms, is a thesis. A PhD student must create a body of original, publishable research (more on that in a second), write it in thesis form, and then defend it before a panel of experts at their viva / thesis defence&lt;sup id=&#34;fnref:snake&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:snake&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. The PhD can be thought of as an apprenticeship. In exchange for teaching you Sacred Techniques™ and helping you to put together a thesis, your supervisor gets you to crank out research papers, which in turn helps them advance their career.&lt;/p&gt;
&lt;p&gt;Besides working on research with my supervisor and other collaborators, I had the opportunity to take part in activities such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conferences. One of the ways to have your research accepted is to submit it to peer-reviewed conferences. Once you pass the peer review, you travel to the conference and present your work.&lt;/li&gt;
&lt;li&gt;Industry placements. The &#34;enterprise alliance&#34; got its pound of flesh in the end, as all students in the CRT were required to do a 3-month industry placement. I did mine at Valeo, a car technology company.&lt;/li&gt;
&lt;li&gt;Research placements. I had a co-supervisor in Boston, and was funded to visit their research group for 3 months.&lt;/li&gt;
&lt;li&gt;Training events &amp;amp; courses. Universities usually require you to take classes and accumulate a certain number of credits before you can graduate. My program also included presentation training, masterclasses, mental health workshops, etc.&lt;/li&gt;
&lt;li&gt;Teaching &amp;amp; tutoring. Students may be required to teach as part of their funding agreement. Some get paid extra for it, some don&#39;t. There was no such teaching requirement at Maynooth University.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;/blog/over.html&#34;&gt;I submitted my thesis&lt;/a&gt; almost exactly 4 years from the day I started, and am now awaiting my viva. I&#39;ll say it again: this experience was unique to me, and all PhDs are different. In the USA, for example, students usually spend their first year just doing coursework. PhDs also tend to take longer over there. My aim here has only been to give a flavour of what my PhD was like, which I hope will be another datapoint in your conception of PhDs in general.&lt;/p&gt;
&lt;h3 id=&#34;whats-research-tho&#34;&gt;What&#39;s research tho?&lt;/h3&gt;
&lt;p&gt;Besides mandatory coursework, the only thing that directly contributes towards getting a PhD is research. I never fully understood what research was before I did a PhD, so here is an explanation for my past self. Let&#39;s start with a definition from the Merriam-Webster dictionary:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;research (n): investigation or experimentation aimed at the discovery and interpretation of facts, revision of accepted theories or laws in the light of new facts, or practical application of such new or revised theories or laws.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This &#34;investigation&#34; can take wildly different forms depending on the field of study. It might involve translating historical records, or running experiments in a lab, or writing computer code, or conducting a survey, or analysing data from that survey, or reading a heckload of books. What&#39;s common to all fields, though, is that you have to review the existing literature, and you have to add to that literature by writing up your findings.&lt;/p&gt;
&lt;p&gt;What&#39;s a literature review? All research is built on the work of those who came before, so to give yourself a starting point, and to avoid being unoriginal, you have to familiarise yourself with existing work - the &#34;literature&#34; - in your field. In my experience, literature review basically comes down to scouring the internet / Google Scholar for papers, skim-reading those papers, reading textbooks, tracking down references from a bibliography, etc. This will be more or less involved depending on how big the field is and how much your supervisor can guide you.&lt;/p&gt;
&lt;p&gt;Everyone has to write up their findings and have them quality-checked by other researchers. Without this peer review process, crackpots would be able to publish their Theories of Everything alongside proper research. So, you can&#39;t escape the cold, hard reality of having to write words on a page. A lot of words. The exact quantity of words will depend on your field. History PhDs, for example, with whom I seem to have unresolved beef, basically have to write an entire book. My thesis is 100 widely-spaced pages with lots of pictures. Once again, it&#39;s field-dependent.&lt;/p&gt;
&lt;p&gt;Most science research is conducted through English, which can make life a bit more difficult for non-native speakers. Nobody is expected to write the next great work of literature, though. It&#39;s just another thing you learn along the way, like LaTeX or how to do a literature review. Some of my coursemates ended up feeling more comfortable writing in English than in their native languages.&lt;/p&gt;
&lt;p&gt;Once you&#39;ve written up your findings and published them through a conference or journal, you will generally want to (or will be compelled to) spread the word by giving talks, poster presentations and whatnot. I think I gave upwards of 10 presentations during my PhD, between CRT events and conferences I attended. Conferences also provide the opporunity to network with other researchers, see what everyone is working on, and find collaborators.&lt;/p&gt;
&lt;h3 id=&#34;things-you-should-know&#34;&gt;Things you should know&lt;/h3&gt;
&lt;p&gt;Let&#39;s suppose you were enchanted by my sketch of the PhD life, and you&#39;re ready to offer your soul at the altar of academia. Here are some things I think you should know before you begin that journey.&lt;/p&gt;
&lt;h4 id=&#34;supervisors-are-gods&#34;&gt;Supervisors are gods&lt;/h4&gt;
&lt;p&gt;PhD students are highly dependent on their supervisors, moreso than someone in a corporate job is dependent on their manager. Your supervisor not only &#34;manages&#34; you, but also (in theory) must play the role of teacher and guide you in your research. In some universities, they even have the final say on whether you graduate. The power imbalance is, needless to say, large, and a bad supervisor can make your life miserable.&lt;/p&gt;
&lt;p&gt;All good supervisors are alike; each bad supervisor is bad in their own way. They might be inattentive and only make themselves available to meet once per month. They might give you a hard time for wanting to take holidays. They might try to squeeze extra work out of you and end up delaying your graduation. They might try to emotionally manipulate you into working harder. They might be clueless about your research area and leave you to figure things out for yourself. They might micromanage you and not let you pick your own research topics. They might be relentlessly critical and undermine your self-confidence.&lt;/p&gt;
&lt;p&gt;While, in theory, a university may have mechanisms to change supervisor or lodge a complaint against a supervisor, I haven&#39;t heard of anyone actually using such a mechanism. Doing so is likely to cause drama or set you back in your research progress, but ultimately may be worth it if you&#39;re truly miserable and don&#39;t want to quit the PhD.&lt;/p&gt;
&lt;p&gt;All that considered, your choice of supervisor is IMPORTANT. There are many qualities you can try to optimise for in a supervisor, from their level of experience to how much free time they have. In my opinion, the most important thing is that you like and respect them, and that they will treat you with kindness. Most people get bored of their research topic by the time they finish, and most people will publish papers that are read by only a handful of people. But at least if you get on well with your supervisor, you&#39;re more likely to be happy in your day-to-day life and to avoid becoming a sad ball of stress. Talk to your potential supervisor&#39;s PhD students to get a sense of what it&#39;s like to work with them.&lt;/p&gt;
&lt;h4 id=&#34;the-mental-health-gauntlet&#34;&gt;The mental health gauntlet&lt;/h4&gt;
&lt;p&gt;Speaking of sad balls of stress, you should be aware that PhDs are often mentally taxing, as anyone who has browsed &lt;a href=&#34;https://www.reddit.com/r/PhD/&#34;&gt;r/PhD&lt;/a&gt; will know. I have, without a doubt, become a more anxious person over the past few years, which at one point resulted in me attending my university&#39;s counselling service. Emotionally, it was much more difficult than the cushy software engineering job I had before. This was during the time of COVID-19, so I don&#39;t solely blame the PhD, but I also don&#39;t know any PhD students in my department who weren&#39;t seriously stressed at some point, and I witnessed several of them crying due to PhD issues. This being in a relatively chill university with (mostly) well-intentioned supervisors!&lt;/p&gt;
&lt;p&gt;PhD students generally have to publish papers to graduate, and their supervisors generally need to publish papers for career advancement - &#34;publish or perish&#34;, they say. There is therefore a lot of pressure on students to churn out publishable research, which can be a major source of stress - particularly when their projects aren&#39;t going well. Several of my fellow students had a terrible work-life balance and ended up working evenings/weekends. Combine this with isolation (you won&#39;t necessarily have any collaborators), impostor syndrome (as you are exposed to a lot of things you don&#39;t understand), and a trash supervisor (see above)... and it can potentially take a big toll on your mental health.&lt;/p&gt;
&lt;p&gt;I&#39;m aware that these problems aren&#39;t necessarily unique to PhDs, and that even having the opportunity to do a PhD is a privilege. However, I still think it&#39;s important to acknowledge the psychological aspect of a PhD, which was more of an obstacle for me than any of the technical puzzles I faced in my research, and it&#39;s something that potential students may want to keep in mind.&lt;/p&gt;
&lt;p&gt;For a kinda silly example of how mental health and motivation can fluctuate during a PhD, here are my GitHub contributions over the past ~4 years. The periods of total inactivity tend to align with when I was feeling stressed or burnt-out. I will merely point out that the graph becomes sparser as time goes on.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/phd-reflections/github-contributions.png&#34;
     alt=&#34;A bar chart showing my GitHub contributions over the past years. They get more sparse as time goes on.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;GitHub contributions. Each contribution can be as trivial as adding a movie to a list, or fixing a typo on my blog.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;idealism-and-reality&#34;&gt;Idealism and reality&lt;/h4&gt;
&lt;p&gt;Before starting my PhD, I had a vague idea of academia as a happy place where I could spend my days studying textbooks and working on whatever fun projects I wanted. This was delusional. I will now describe some of the harsh realities of academia that my younger, doe-eyed self was unaware of.&lt;/p&gt;
&lt;p&gt;Firstly, the pressure to publish means that you can&#39;t spend your whole time studying or working on whatever you want. You might end up working on an idea you think is useless or uninteresting, just because your supervisor tells you to or because you&#39;re desperate to get ANYTHING published. Even if you have a good idea, you might spend a couple of days fleshing it out, and then spend months doing the monotonous work of gathering results, reviewing the literature, and writing it up. Some people love this, some don&#39;t. However, it&#39;s true that you are likely to have total freedom in how you plan your day. If learning is important to you, then you can schedule time every day where you watch video lectures or work through a textbook. I found myself compromising on this when I was stressed and trying to finish papers, though.&lt;/p&gt;
&lt;p&gt;You might think that academia is full of noble idealists, dedicated to the sharing of ideas and the advancement of human knowledge, and driven by their love of ✨learning✨. While such people undoubtedly exist, you are also likely to come across cynical, ruthlessly ambitious careerists. These people will churn out trash papers and cite their own work (see: The Wire, and what happens when you give the police arrest quotas). They will shoot down your paper in peer review because it treads on &#34;their turf&#34; (happened to me and others). They will drive their students to maximise research output. As in all areas of life, there are assholes.&lt;/p&gt;
&lt;p&gt;The publishing system is also imperfect, to say the least. Many of the largest journals and conferences have their research paywalled, making them inaccessible to people outside of universities. Even to get your research published usually requires a large cash payout. This has resulted in the development of work-arounds like &lt;a href=&#34;https://arxiv.org/&#34;&gt;arxiv.org&lt;/a&gt; (free online publishing) and &lt;a href=&#34;https://en.wikipedia.org/wiki/Sci-Hub&#34;&gt;Sci-Hub&lt;/a&gt; (WARNING: free access to paywalled research). Even still, like many aspects of life in a capitalist society, it&#39;s not a level playing field for everyone.&lt;/p&gt;
&lt;p&gt;While negative results (&#34;this is NOT a cure for cancer&#34;) are just as valid a contribution to human knowledge as positive results (&#34;we found the cure for cancer!&#34;), there&#39;s a heavy bias towards positive results. This necessitates the use of massive amounts of Spin™, also known as &#34;bullshitting&#34;, to make your results sound as groundbreaking as possible. Being honest about the flaws in your work can provide reviewers with a larger surface area to attack you, because in their mind, &#34;negative results&#34; are the same as &#34;bad research&#34;. For someone who prefers to be self-deprecating and honest, this is a hard reality to accept. Veteran researchers often embrace the cynicism and become expert bullshitters.&lt;/p&gt;
&lt;p&gt;Coming from the world of programming, and having a vague understanding of the scientific method and this idea called &#34;reproducibility&#34;, I expected that the philosophy of open source software would be readily embraced by the research community. In 4 years, however, I didn&#39;t find a single research paper in my field that came with source code. This stems from a combination of Jurassic-era intellectual property rules in universities, along with what a cynical person might suggest is an attempt by researchers to minimise the surface area that I mentioned before. Other viable explanations: laziness, ignorance, lack of incentives, etc. I wanted to publish source code with my papers but ran into walls, and so the cycle continues.&lt;/p&gt;
&lt;p&gt;Certain journals, conferences and universities have accumulated stores of a mysterious quality called Prestige. It&#39;s the appeal to authority falacy writ large, and yet people still fall for it. Harvard, Cambridge, Nature, Science - having these Big Names on your CV gives you more clout, &lt;a href=&#34;https://www.youtube.com/watch?v=aY985qzn7oI&amp;amp;t=364s&#34;&gt;no matter how much of a dumbass you are&lt;/a&gt;. You will undoubtedly come across people who namedrop these places because they think it makes them look smarter. When I become dictator of the world, such people will be the first to be sent on a one-way trip to the bottom of the ocean.&lt;/p&gt;
&lt;p&gt;Oh, and do I even need to mention that your research isn&#39;t going to change the world and that probably only a handful of people will ever read it? Everyone says that, so I probably don&#39;t need to. And I haven&#39;t touched on cultural problems like &lt;a href=&#34;https://www.youtube.com/watch?v=8DNRBa39Iig&#34;&gt;sexual harassment within male-dominated fields&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Despite all of the above, I feel neutral towards academia. These problems might ultimately pale in comparison with those of working as a cog in a corporate machine. There are researchers I look up to. I learned a lot of stuff that I wouldn&#39;t have otherwise. I haven&#39;t even completely discounted a career in academia. The point of this section is merely to burst the idealistic bubbles that were held by my past self so that I don&#39;t go into my PhD with unrealistic expectations - woops, too late.&lt;/p&gt;
&lt;h3 id=&#34;to-do-or-not-to-do&#34;&gt;To do or not to do&lt;/h3&gt;
&lt;p&gt;We have come to the big question: Should you do a PhD or not?&lt;/p&gt;
&lt;p&gt;My answer: Yes, if you want to.&lt;/p&gt;
&lt;p&gt;More seriously, I would suggest making sure that you have a good reason to do one. Getting to call yourself Doctor? Bad reason. Don&#39;t have anything better to do? Bad reason. Want to become a researcher or a lecturer at a university? Good reason. Think you&#39;d enjoy doing it? Probably a good reason. A question you can ask yourself to help with the decision, and which ultimately drove me to apply: &#34;Will I regret it in the future if I don&#39;t try it?&#34;&lt;/p&gt;
&lt;p&gt;Inform yourself as best you can as to what is in store for a PhD student and what the opportunity costs are. The path to a permanent position in academia might require you to be paid below your market value for a long time and to uproot your life every couple of years; for a more detailed discussion of this, I will once again link to the always-entertaining &lt;a href=&#34;https://www.youtube.com/watch?v=mExlPihH3jk&#34;&gt;Angela Collier&lt;/a&gt;. I don&#39;t have any regrets about the industry money I didn&#39;t make, but it might be a different story if I had accumulated a lifetime of debt with little prospect of paying it off, as might be the case for American history PhDs (sorry). Then again, if someone is only passionate about history research, they might not have other options.&lt;/p&gt;
&lt;p&gt;Financially speaking, it also helped that my day-to-day expenses were affordable and that I had savings to draw on for luxuries like holidays, a car, etc. Your PhD stipend, if you have one, won&#39;t leave you with much breathing room, and I know of people who ended up surviving on tins of beans at the end of the month. The PhD stipend in Ireland is generally below minimum wage, which is somehow legal because we&#39;re not classed as employees! (It&#39;s increasing in the latest government budget, but still below minimum wage). Do some research into what your quality of life will be like, if that&#39;s important to you.&lt;/p&gt;
&lt;p&gt;Even if a PhD feels like a big commitment, there&#39;s usually the possibility to drop out with a Masters degree if you end up being unhappy. It requires bravery and rational thinking, however, to follow through on that. Pride, stubbornness, inertia and the sunk-cost fallacy -- any of these can lead to the needless suffering of a poor soul as they force themselves to complete their PhD.&lt;/p&gt;
&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;I don&#39;t have any regrets about doing a PhD. I definitely would&#39;ve regretted not trying it. I met my goal of learning new things, even if it wasn&#39;t to the extent that I had hoped. I&#39;ve opened new career options for myself. I met lovely people. I developed a diverse set of skills: researching, writing, presenting. I learned what research actually is. Regarding the CRT in particular, I enjoyed being part of a cohort of students, and I appreciated the freedom it gave me to explore my options, although the restrictions of the structured program were frustrating for people who already knew what they wanted to do.&lt;/p&gt;
&lt;p&gt;Something I wish I did differently was postponing all my life decisions until after the PhD. It was easy to say &#34;I&#39;m busy for the next 4 years, I don&#39;t have to worry about what comes next&#34;. Now my viva is approaching and I haven&#39;t decided what the hell I&#39;ll do after that. I&#39;ve been handed back the steering wheel of my life and I don&#39;t know where I&#39;m driving to. This is very much a first-world problem, though, and I&#39;m conscious of being in a position of privilege that hopefully I will not put to waste.&lt;/p&gt;
&lt;p&gt;That&#39;s all I have to say about PhDs. I&#39;d be happy to receive feedback or answer any questions you may have, if you still think the self-important opinions of a not-even-graduated PhD student are worth seeking.&lt;/p&gt;
&lt;div class=&#34;footnote&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:snake&#34;&gt;
&lt;p&gt;In some countries, you also have to engage in mortal combat with a &lt;a href=&#34;https://www.mcsweeneys.net/articles/faq-the-snake-fight-portion-of-your-thesis-defense&#34;&gt;deadly snake&lt;/a&gt;.&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:snake&#34; title=&#34;Jump back to footnote 1 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        <link>https://kevingal.com/blog/phd-reflections.html</link>
        <pubDate>Wed, 15 Nov 2023 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/phd-reflections.html</guid>
    </item>
</channel>
</rss> 