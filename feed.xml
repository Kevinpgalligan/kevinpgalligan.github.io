<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>Kevin's Blog</title>
    <link>https://kevingal.com</link>
    <description>Maths, computers and stuff.</description>
    <pubDate>Mon, 27 Oct 2025 00:00:00 GMT</pubDate>
    <lastBuildDate>Mon, 27 Oct 2025 00:00:00 GMT</lastBuildDate>
    <atom:link href="https://kevingal.com/feed.xml" rel="self" type="application/rss+xml" />
    
    <item>
        <title>Camino diary, days 0-4</title>
        <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/blog/camino-diary-intro.html&#34;&gt;See here&lt;/a&gt; for the packing list, route planning, and so on.&lt;/p&gt;
&lt;h3 id=&#34;day-0-saturday-october-7th-2023-bilbao-0km&#34;&gt;Day 0, Saturday, October 7th 2023, Bilbao (0km)&lt;/h3&gt;
&lt;p&gt;Arrived in Bilbao. It was roughly 30°C outside. Decided to stay the night rather than launching straight into the journey, so I had time to visit the Guggenheim museum. There happened to be a cool Yayoi Kusama exhibition on.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231007_183905.jpg&#34;
     alt=&#34;Spindly spider statue outside the Guggenheim, near sunset, lots of people hanging around.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Weird spider outside the Guggenheim.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231007_164454.jpg&#34;
     alt=&#34;Giant red tentacles with regularly-spaced black dots on them.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Weird tentacles by Yayoi Kasuma.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Next, I went to a vegan restaurant called Veggira, which was excellent. Patatas bravas (&#34;bravas potatoes&#34;), stuffed mushrooms, red wine and a brownie with ice-cream. I happily left them a 5-star review on Google Maps.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231007_201259.jpg&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Patatas bravas and wine.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231007_201945.jpg&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Stuffed mushrooms.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231007_204045.jpg&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Chocolate brownie and vanilla ice-cream.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231007_191326.jpg&#34;
     alt=&#34;An LGBTQ+ sticker, an animal liberation sticker, and a painting on the wall of two ninja-like activists holding a happy lamb and a happy pig.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Some thematic stickers and wall art.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;While walking the streets of Bilbao I came across some people playing a game. The players wore stockings over their heads, obscuring their vision, with a ball in the foot of the stocking. The goal was to knock over a bottle of water by swinging their heads. Local tradition, maybe? One of the players almost fell on me. Gave me a laugh, anyway.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231007_191742.jpg&#34;
     alt=&#34;A woman and man with colourful stockings over their head, trying to knock over bottles of water with the stockings.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Some very drunk people playing the game.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;My Spanish was rusty, but I managed to survive all the day&#39;s interactions without anyone switching to English - woohoo! The bad news: all the reasonably-priced accommodation was booked out, so after a desperate and stressful search I had to pay €130 for a private room in a hotel called BYPILLOW Irala. The room wasn&#39;t even particularly nice. Should&#39;ve booked in advance.&lt;/p&gt;
&lt;h3 id=&#34;day-1-sunday-october-8th-portugalete-201km&#34;&gt;Day 1, Sunday, October 8th, Portugalete (20.1km)&lt;/h3&gt;
&lt;p&gt;My first day of walking. I used the map in the Buen Camino app to find my way to the route, which was only 2 blocks from my hotel. Saw my first blue and yellow camino marker! The marker depicted a scallop shell instead of an arrow. Confusingly, it wasn&#39;t clear which direction the shell was pointing.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231008_112643_1.jpg&#34;
     alt=&#34;The blue and yellow camino marker. It says &#39;Camino de Santiago&#39; on it.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Is it pointing right, or left? I think it was left. Actually, I think the blue part was supposed to be the arrow, not the shell, but I never figured that out.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After making my way out of the city, I had to climb a tall hill. My arse was thoroughly sore afterwards. Nice views of Bilbao, though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/camino/IMG_20231008_114150.jpg&#34;
     alt=&#34;The city of Bilbao. Vegetation in the foreground. Cloudless sky. Sunny. Buildings and mountains stretch off into the distance.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;figcaption&gt;Bilbao from above.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;While walking through the outskirts of Bilbao, I came across a parade of creepy giant puppets. Classic Spain.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231008_141205_1.jpg&#34;
     alt=&#34;A street with a giant puppet in the distance. The puppet seems to be dressed in traditional women&#39;s clothes.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;I guess it wasn&#39;t THAT creepy. Wicker Man vibes, though.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;At the top of the hill, there was a small monastery. Two cats lived there, and throughout the day I also saw horses, sheep, donkeys, and other animals.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231008_125531_1.jpg&#34;
     alt=&#34;Some donkeys eating grass behind a wire fence.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;My donkey friends!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231008_142230_1.jpg&#34;
     alt=&#34;Roadside graffiti&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;&#34;Fall in love, we die either way&#34;. The first of many roadside graffitis I photographed.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Arrived at my first &lt;em&gt;albergue de peregrinos&lt;/em&gt; (pilgrim hostel? pilgrim refuge? I&#39;m just gonna call them albergues), where I met plenty of pilgrims but didn&#39;t talk to anyone at length. Washed my clothes in a sink using my bar of soap, then hung them up to dry. Went for food, had to cross a river via a &#34;hanging bridge&#34; / cable car thing. It was cool, but also I&#39;m not sure why they didn&#39;t just build a regular bridge?&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231008_152649.jpg&#34;
     alt=&#34;A view of the so-called hanging bridge. It looks a bit like a suspension bridge, except instead of a bridge there&#39;s a cable car.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;The so-called hanging bridge, from a distance.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I ate outside, observing the Spanish street scenes in what was a fairly residential area, and drank 2 cañas of Radler. A caña is slightly less than half a pint.&lt;/p&gt;
&lt;h3 id=&#34;day-2-monday-october-9th-castro-urdiales-351km-552km-total&#34;&gt;Day 2, Monday, October 9th, Castro-Urdiales (35.1km, 55.2km total)&lt;/h3&gt;
&lt;p&gt;Didn&#39;t sleep well, there were sick people coughing and I was woken up twice by a mosquito buzzing in my ear. I also had to pee several times during the night thanks to those damn cañas. Then I woke up at 5am from the noise of departing pilgrims. So, I was very tired. My feelings varied between happiness and anxiety. I was still adapting to the routine, and was worried that I might get stuck paying for an overpriced hotel again.&lt;/p&gt;
&lt;p&gt;I left the albergue at 8am, accompanying two fellow pilgrims who invited me to join them. Before leaving, I also met Max, who, in the words of Simon and Garfunkel, was a most peculiar man. He asked me where I was from, and I returned the question. Little did I know, I was setting myself up to be bombarded with his sad life story for the whole day. It was a long story, he said. His parents were British-American, but he grew up in a series of Eastern European countries. He somehow moved on to talking about the toxicity of the Orthodox church and about how an Orthodox priest had once hit him on the head.&lt;/p&gt;
&lt;p&gt;The two pilgrims I set out with: Mari, a business psychologist from Germany; and Iria (not sure about the spelling), a Galician who had a job in Santiago! She said that 1000s of pilgrims arrive in Santiago every day. As we walked, several groups of passing cyclists sent a &#34;Buen Camino!&#34; our way. We came across a colony of stray cats. They were being fed by an overly-protective woman who warned us not to go near them, when all we had done was watch them quietly. Booooo to that woman!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231009_091631_1.jpg&#34;
     alt=&#34;About 20 cats hanging out under a tree. There are several bags of food and bowls of water.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;The colony of cats.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Shortly afterwards, Max came walking from the opposite direction. We informed him that he was going the wrong way, so he turned around and joined us. I was the one left talking to him, as my companions seemed reluctant to do so. We arrived at a beach town where we bought supplies in a shop and rested for a bit, while Max went on ahead. Then I left my companions because, while I appreciated their company, I was planning to walk a lot that day, and I didn&#39;t want to stall for too long.&lt;/p&gt;
&lt;p&gt;There was a diversion because fallen rocks had blocked the cliffside path ahead. When the paths rejoined, I ran into Max yet again (he had naughtily taken the blocked route) and got stuck walking with him for another couple of hours. He told me he was in a car crash at the age of 3. Both his parents died in the crash, but Vladimir Putin pulled him from the wreck and administered a life-saving dose of morphine to save his life. Then he was brought by helicopter to a Soviet military base, where he was adopted and went on to live in various Soviet states, including Armenia and Georgia.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231009_120905.jpg&#34;
     alt=&#34;Some unimposing cliffs in the distance, lush green vegetation.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Approaching the cliffs after taking my leave of Iria and Mari.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There was more. Max thought the Georgian government was out to get him. He&#39;d worked for the Georgian police for 7 years, developing tracking software, until one day, he refused his orders and got fired. Since then, they&#39;d had him poisoned several times. They&#39;d also sabotaged him by ripping tiny holes in his bag and wearing down the rubber on the soles of his shoes.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231009_141225.jpg&#34;
     alt=&#34;A view back along the coast, lots of greenery and ocean and hills.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Looking back after a couple hours of walking.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I felt sorry for Max. He&#39;d clearly had a difficult life, regardless of how true his story was. His shoes were ragged, and he said his feet were covered in blisters. He was carrying two massive backpacks, and I wondered if they contained all his worldly possessions. He told me that he survived on the generosity of strangers, so perhaps the whole spiel was intended to elicit my sympathy and financial support. I didn&#39;t feel entirely comfortable in his presence, though, and he&#39;d been talking my ear off for hours, so I was relieved when it turned out that our destinations were different and we parted ways. I do feel a little guilty that I didn&#39;t do more to help him.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231009_151949.jpg&#34;
     alt=&#34;A long and dark tunnel, with some lights. The entrance is surrounded by trees and plants.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;A tunnel where I thought I might be murdered.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I eventually arrived at a cheap, 1-star hotel in Castro-Urdiales that I&#39;d booked earlier, having walked for 8 hours that day. My feet were sore. I hoped I wouldn&#39;t get blisters.&lt;/p&gt;
&lt;h3 id=&#34;day-3-tuesday-october-10th-laredo-257km-809km-total&#34;&gt;Day 3, Tuesday, October 10th, Laredo (25.7km, 80.9km total)&lt;/h3&gt;
&lt;p&gt;A day of steep slopes, sore feet, and conversations. I started at 7:30am. The scenery was eye-catching, but the route involved a lot of walking on concrete, which I felt in my feet and legs. Before this experience, I hadn&#39;t understood why walking on hard surfaces is tough on the body.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231010_081009_1.jpg&#34;
     alt=&#34;A white, black and blonde cat. Sitting on a fence. Looking very tired and cross.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;A grumpy cat I encountered early in the morning.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;An encounter with a predator. I was walking past someone&#39;s yard when I heard the frantic clucking of chickens. A mass of feathers and flapping wings moved rapidly in my direction. I thought I was about to be attacked by some unusually violent hens, but then I caught a glimpse of a canine creature and realised that something - a dog? a wolf? - was chasing them. I dodged out of the way and hid behind the adjacent house, not wanting to go toe-to-toe with an aggressive dog or whatever it was, and not wanting to witness any chickens getting murdered.&lt;/p&gt;
&lt;p&gt;The clucking died down a few seconds later and I stepped out to see what was going on, only to catch the culprit, a fox, trotting back into the yard. It spotted me and we made eye contact. After a moment I clapped my hands and it ran away. I took a brief look around to make sure there were no mortally wounded chickens lying about, then decided it would be a good idea to inform the owner in case the fox came back for another attempt. I tried knocking on several doors in the area, and when nobody answered, I stood up on a wall in order to get a better look around. At that point, I spotted a man jog-walking towards me with 4-5 dogs. I tried to explain what had happened. He probably thought I was a lunatic, and seemed more interested in getting back to his house to make sure I hadn&#39;t messed with anything. He eventually heard me out, but seemed to think the culprit was an orange cat from the neighbourhood. I was 99% certain it was a fox (&lt;em&gt;zorro&lt;/em&gt;), though. I didn&#39;t know the Spanish for &#34;clapped my hands&#34; (&lt;em&gt;dar una palmada&lt;/em&gt;), so I had to mime that part of the story. Yay for new vocabulary!&lt;/p&gt;
&lt;p&gt;After leaving the scene, without receiving any thanks for saving the chickens, I had to climb another hill, which was rough on my now continuously-sore glutes. At the top, I met a man from Barcelona who was resting on the ground. We chatted about our respective countries and about other people we&#39;d met so far. I got some Catalan movie recommendations from him. He spoke Spanish slowly enough that I could understand him, which was nice. Later, I met an Italian woman and her mother who were doing the Camino together. The mother was suffering from all the walking and could barely muster the breath to say anything. The daughter had done the Camino several times before. She gave me a plastic yellow arrow to tie onto my bag. I didn&#39;t want to take any plastic junk, but it would&#39;ve felt rude to say no, so I was compelled to tie it to my backpack, where it remains to this day.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231010_133012.jpg&#34;
     alt=&#34;&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;A church in a town.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231010_144329.jpg&#34;
     alt=&#34;Taken from top of a hill. A dusty path that leads back along two cliffs.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Looking back at a seaside landscape I&#39;d just traversed.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I eventually made it to Laredo, where I was hosted at an old convent by an order of nuns. It only cost €10 to stay there, and it came with breakfast. Luxurious compared to the last albergue. The nuns doing the check-ins had an air of kindness about them, and I wished I could talk to them more. I was sharing a room with a nice old American man called Marty. (There needs to be an English equivalent of &lt;em&gt;estadounidense&lt;/em&gt;, instead of having to say &#34;person from the USA&#34;). I wandered the town searching for a place with veggie food, and eventually found a bar with vegetarian burgers. The following day we would leave Laredo by boat.&lt;/p&gt;
&lt;p&gt;It&#39;s from this day that I have my first memory of the October 7th attack on Israel. I&#39;m not sure if I&#39;d heard much about it before this point, absorbed as I was in the trip. I remember walking past a bar and seeing footage of Hamas militants attacking a kibbutz. I was mostly ignorant about the history of Palestine and the 80+ years of occupation it had been under prior to October 7th. I also had no idea of the genocide (as classified by Amnesty, a UN commission, and other international bodies) that was about to be committed in Gaza.&lt;/p&gt;
&lt;h3 id=&#34;day-4-wednesday-october-11th-guemes-287km-1096km-total&#34;&gt;Day 4, Wednesday, October 11th, Güemes (28.7km, 109.6km total)&lt;/h3&gt;
&lt;p&gt;All the pilgrims gathered for breakfast. We were given sponge cake, tea and coffee. My first communal meal of the Camino! Everyone filtered out of the convent and started walking towards the boat departure point, hoping to make it in time for the first crossing of the day. The walk took about 1 hour.&lt;/p&gt;
&lt;p&gt;Along the way, I introduced myself to Wesley and Aurora, a couple I recognised from the albergue in Portugalete. Wesley had actually been sleeping above me in the bunk bed there, and I had sent mental daggers his way for the (probably reasonable) amount of noise he had made in the morning. Neither of them could speak much English, and Aurora couldn&#39;t speak Spanish. Wesley fluently spoke Portuguese, Italian and French. He made heavy use of vocabulary from these languages when speaking Spanish, but somehow we were able to understand each other and got along well. Wesley was Brazilian, living in Switzerland. Aurora was French, living in Brittany. They were a Camino couple, having gotten together while doing the Camino Francés the previous year.&lt;/p&gt;
&lt;p&gt;We arrived at the beach where the boat was supposed to pick us up. Other pilgrims joined us as we waited and wrote messages in the sand. There was Felipe, a 70-something-year-old Spanish man from Sevilla who had also stayed at the albergue in Portugalete. He was dressed sportily and seemed fit for his age. Also reappearing from Portugalete was Niko, a giant, grey-bearded, monolingual French man who could often be seen speaking and laughing to himself. There were 2 young Ukrainian women from the convent - I was curious about their life situation, given that the Russian invasion of Ukraine had been launched the year before, but I wasn&#39;t sure if it would be intrusive to ask them about that.&lt;/p&gt;
&lt;p&gt;The boat came and brought us the short distance to Santoña. During the crossing, I enjoyed once again the buzz of pilgrim solidarity: music playing from a radio, laughter, and shared anticipation of the day&#39;s adventure. When the boat landed, however, I felt minor social anxiety due to the uncertainty of whether people expected to walk together or not. To avoid the discomfort, I awkwardly slipped away and walked ahead while the other pilgrims wandered around the landing point.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231011_091420.jpg&#34;
     alt=&#34;Small engine-driven boat tied to a wooden walkway. Mostly white. Several lifebuoys hanging from the boat&#39;s railing. And some bunting.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;The boat!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I followed the route along a road until I had to leave it and climb up onto some cliffs. There were beaches on either side. I sat down on a rock to rest, as my feet were pretty sore. By this point I&#39;d started following the advice that my mother had relayed to me: take a break every hour or two and air out your feet. This is supposed to help with blister prevention.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231011_101042.jpg&#34;
     alt=&#34;A long beach, seen from a height.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Looking back.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231011_101625.jpg&#34;
     alt=&#34;Another long beach seen from a height.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Looking forward.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;An Argentinian guy from the boat, Matias, caught up with me. I joined him for the next part of the trek, walking barefoot along the beach. Matias came north to do the Camino after wrapping up a seasonal job as a waiter in Andalucia. Naturally, he knew about the Argentinian director Damián Szifron, although neither of us could remember his name and referred to him as the creator of &lt;em&gt;Hermanos y detectives&lt;/em&gt; (which I&#39;ve watched) and &lt;em&gt;Los simuladores&lt;/em&gt; (which I have not). Matias normally earned a living by doing 3D modelling, along with odd jobs like food delivery, but he was re-evaluating his career and wanted to do something involving the outdoors or interacting with people. He didn&#39;t seem particularly engaged in our conversation. We left each other at the end of the beach and I walked on.&lt;/p&gt;
&lt;p&gt;At some point I ran into Aurora and Wesley again. I discovered that Aurora was a farm manager. Wesley was living his life in 1-year cycles: 6 months of work, then 6 months of travel. I think he mostly worked as a chef? He left his home in Brazil at a relatively young age. His travels brought him to the US, where he spent 2 months in immigration detention. Eventually, he made his way to Italy, where his mother and siblings had relocated, and he was able to get citizenship due to an Italian connection in the family. Currently he was living in Switzerland, where he enjoyed the outdoorsy activities like paragliding. For this trip, he drove to France on his motorbike, which he deposited at Aurora&#39;s house before setting off for Spain.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231011_140453_1.jpg&#34;
     alt=&#34;Farms, farm buildings, blistering sun.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Typical landscape from this part of the trip. The sun was verrry hot.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finally, after several hours of walking in the heat on hard asphalt roads, we arrived at Cabaña del Padre Peuto, a &lt;em&gt;donativo&lt;/em&gt; albergue (donation hostel) founded by a priest called Padre Ernesto. At these donativo albergues, you pay whatever you want for food and accommodation. Ernesto set this one up on the site of his old family home. There, with the help of volunteers, he wanted to share his life philosophy with passing pilgrims. That philosophy can be summarised as &#34;life is the real Camino&#34;. The whole place had the vibe of a hippy forest retreat. I was checked in by a friendly Mexican priest called Antonio, who was volunteering there. Then I made my bed (using disposable pillow covers &amp;amp; sheets, as usual), washed my clothes, and explored the property.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG_20231011_190522.jpg&#34;
     alt=&#34;Some white buildings.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;A snippet of the albergue exterior. I wish I got better pictures.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Before dinner, we were gathered into a circular hut with wall paintings. Here, we received a 30-minute lecture on the philosophy of the albergue. Life is a Camino: there&#39;s a start and an end and challenges along the way. You shouldn&#39;t be focused on getting to the next town when there&#39;s someone at your side who needs help, yada yada. I think it&#39;s a good message, just a bit sanctimonious. A cynical thought came to mind: &#34;every trip to the shop is a Camino, there&#39;s a start and an end and challenges along the way&#34;. I noticed some hungry people checking the time. The speaker was entertaining, at least, and the volunteer translator did an impressive job of retaining so much of what he said. Normally, Padre Ernesto was the designated speaker at these lectures, but he was well over 80 years old at this point and was tired from an interview he had done earlier in the day, so he demurred. Much emphasis was placed on how it was our &#34;responsibility&#34; to pay a fair amount for the services that were provided at the albergue.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/padre-peuto.jpg&#34;
     alt=&#34;Wall paintings depicting the philosophy of the albergue. Some pilgrims walking the Camino, then some pilgrims helping someone who appears to have fallen over.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Some of the wall paintings in the hut (source: bertstapvoets.reislogger.nl). The paintings would be relevant to something that happened to me later in the trip... (FORESHADOWING).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After the talk, it was time for dinner, which turned out to be really good. Generous helpings of vegetable soup and pasta. Padre Ernesto even came to give a short speech. He told us his life story: when he was a young priest, he&#39;d spent time working in an isolated mountainside parish. He found the way of life there inspiring, particularly how the people relied on and helped each other. This greatly influenced his life philosophy. He traveled around the world in a jeep, visiting many different countries and impoverished peoples. The dining room was basically a museum of his travels and experiences, with many souvenirs and photographs. Despite my cynicism, tears came to my eyes as I thought about how Ernesto continued to spread his message, even as he approached the end of his life.&lt;/p&gt;
&lt;p&gt;I loved the sense of community at this dinner. I got to meet some cool new people. Teresa, a German woman with a shaved head who had walked for 6 months from Germany. Three older Argentinian women whom Iria and other pilgrims had told me about. They were amused when I said they were Camino celebrities. One of them, Bianca, was an artist and would be doing a residency while in Spain. Then there was André, a poncho-wearing Dominican guy whom I had seen meditating on the grass earlier. Also at the dinner were many old faces: Marty; Wesley and Aurora; Johann and Joepke (a Dutch couple from the convent); Sonia and Mira (the Ukrainians); and Felipe.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/IMG-20231027-WA0028.jpg&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;Dinner with the gang.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I was starting to feel more comfortable initiating conversations with people. It had felt awkward at the beginning of the trip. Something about being in a well-defined role seems to make me more confident in social situations. Working on a team project, for example, where the scope of discussion is limited and the exchanges are practical in nature. On the Camino, my role was being a pilgrim, and more often than not the other pilgrims were friendly and receptive to conversation.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/camino-diary-1.html</link>
        <pubDate>Mon, 27 Oct 2025 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/camino-diary-1.html</guid>
    </item>
    <item>
        <title>Camino diary: an introduction</title>
        <description>&lt;p&gt;In October of 2023, I flew to Spain and walked over 600km along the &lt;a href=&#34;https://en.wikipedia.org/wiki/Camino_de_Santiago&#34;&gt;Camino de Santiago&lt;/a&gt;. I kept a diary throughout this journey, writing in broken Spanish. Here, I&#39;ll give a brief introduction to the series of diary entries, which I have now transcribed and translated to less-broken English.&lt;/p&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div class=&#34;toc&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#whats-a-camino&#34;&gt;What&#39;s a Camino?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-did-you-do-it&#34;&gt;Why did you do it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#which-route-did-you-take&#34;&gt;Which route did you take?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-did-you-pack&#34;&gt;What did you pack?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-did-you-plan-the-trip&#34;&gt;How did you plan the trip?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#you-kept-a-diary-wow-loser&#34;&gt;You kept a diary? Wow, loser.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-did-you-eat&#34;&gt;What did you eat?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-are-you-writing-this&#34;&gt;Why are you writing this?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;whats-a-camino&#34;&gt;What&#39;s a Camino?&lt;/h3&gt;
&lt;p&gt;The Camino de Santiago (&#34;Way of St. James&#34;) is a network of pilgrimages or walking routes. They&#39;re mostly situated in Spain, and the endpoint of all the routes is Santiago de Compostela, a city in the autonomous community of Galicia. Hundreds of thousands of people walk these routes every year. Some of them do it for spiritual reasons, but nowadays I think most people just do it for fun. The tradition is over 1000 years old.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/camino/camino-map.webp&#34;
     alt=&#34;A map of various camino routes.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;A map of Camino routes, borrowed from pilgrim.es. I did (most of) the purple one, which is called the Camino del Norte, or &#34;Northern Way&#34;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;why-did-you-do-it&#34;&gt;Why did you do it?&lt;/h3&gt;
&lt;p&gt;I can&#39;t remember how I discovered the Camino. A lot of people, especially from North America, first hear of it through a Martin Sheen movie called &lt;em&gt;The Way&lt;/em&gt;, but I haven&#39;t watched it. Someone probably mentioned it to me during the 3-month Spanish course I did in Valencia. Wherever I got the idea, I&#39;d been excited by it for a long time (adventure! introspection! nature! Spanish!), and after submitting my thesis in September of 2025 it seemed like the perfect time to go.&lt;/p&gt;
&lt;h3 id=&#34;which-route-did-you-take&#34;&gt;Which route did you take?&lt;/h3&gt;
&lt;p&gt;The Camino del Norte, or &#34;Northern Way&#34;, is a route along the coast of northern Spain. I picked it because it&#39;s less crowded than the the most popular route, the Camino Francés (&#34;French Way&#34;). I thought the pilgrims taking that route might be more interesting, and it&#39;d be less touristy.&lt;/p&gt;
&lt;!--I&#39;m not sure if this comes from a nonconformist streak or what, but I often seem to pick options from the 2nd tier of popularity. I studied Spanish in Valencia instead of Madrid or Barcelona; in school, I joined the underpopulated German class rather than one of the many crowded French classes; and my favourite programming language is the underappreciated Common Lisp. On the other hand, I follow the recommendations of others when it comes to movies, books, music and food.--&gt;

&lt;p&gt;The Norte starts in Irún, in the Basque Country of northeastern Spain. It consists of about 35 stages, depending on how you break it up. Given that I only had 30ish days to spend, I decided to skip a few stages and start in Bilbao instead. This shaved off about 150km, which happened to be the most mountainous and difficult part of the Norte, but I still had to walk over 600km.&lt;/p&gt;
&lt;p&gt;Here are the stops I &lt;em&gt;planned&lt;/em&gt; to make along the way, with particularly difficult segments marked by an X. The total distance was 667.8km.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bilbao&lt;/li&gt;
&lt;li&gt;Portugalete (19.4km)&lt;/li&gt;
&lt;li&gt;Castro Urdiales (25.4km)&lt;/li&gt;
&lt;li&gt;Laredo (25.8km)&lt;/li&gt;
&lt;li&gt;Guemes (29km)&lt;/li&gt;
&lt;li&gt;Santander (15.2km)&lt;/li&gt;
&lt;li&gt;Santillana del Mar (X 37km)&lt;/li&gt;
&lt;li&gt;Comillas (22km)&lt;/li&gt;
&lt;li&gt;Colombres (28.8km)&lt;/li&gt;
&lt;li&gt;Llanes (23.2km)&lt;/li&gt;
&lt;li&gt;Ribadesella (31.4km)&lt;/li&gt;
&lt;li&gt;Sebrayo (X 31.6km)&lt;/li&gt;
&lt;li&gt;Gijón (X 35.8km)&lt;/li&gt;
&lt;li&gt;Avilés (25.4km)&lt;/li&gt;
&lt;li&gt;Muros de Nalón (23.2km)&lt;/li&gt;
&lt;li&gt;Soto de Luiña (15.3km)&lt;/li&gt;
&lt;li&gt;Cadavedo (18.5km)&lt;/li&gt;
&lt;li&gt;Luarca (15.3km)&lt;/li&gt;
&lt;li&gt;La Caridad (30.5km)&lt;/li&gt;
&lt;li&gt;Ribadeo (21.6km)&lt;/li&gt;
&lt;li&gt;Lourenzá (X 28.4km)&lt;/li&gt;
&lt;li&gt;Abadín (25.2km)&lt;/li&gt;
&lt;li&gt;Vilalba (20.7km)&lt;/li&gt;
&lt;li&gt;Baamonde (18.6km)&lt;/li&gt;
&lt;li&gt;Sobrado (X 39.8km)&lt;/li&gt;
&lt;li&gt;Arzúa (22km)&lt;/li&gt;
&lt;li&gt;Pedrouzo (19.3km)&lt;/li&gt;
&lt;li&gt;Santiago de Compostela (19.4km)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In reality, this isn&#39;t the precise route I ended up following, and I actually got to Santiago ahead of schedule. A few reasons why:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For one segment, I took the bus instead of walking, because I had a minor injury and wanted to rest. This earned me a scoff from an annoying Camino purist or two.&lt;/li&gt;
&lt;li&gt;Among the tools I used for navigation was the Buen Camino app on my phone. I didn&#39;t realise that the stages in the app were different to the stages I&#39;d copied from pilgrim.es, and so I accidentally ended up following the app&#39;s much more ambitious schedule for the first few days.&lt;/li&gt;
&lt;li&gt;There were a few branching paths that I hadn&#39;t anticipated. Sometimes I took a more scenic route, sometimes I took a shortcut.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had a few days to spare at the end, which I used to explore Santiago and visit Finisterre. I envisioned myself reading Sylvia Plath&#39;s poem of the same name, &lt;em&gt;Finisterre&lt;/em&gt;, in the final moments of the trip. [Editor&#39;s note: well, aren&#39;t you a pretentious little sod?]&lt;/p&gt;
&lt;h3 id=&#34;what-did-you-pack&#34;&gt;What did you pack?&lt;/h3&gt;
&lt;p&gt;I had a relatively small backpack, with a capacity of 22L. It weighed 4-6kg, depending on whether my water bottle was full and whether I was carrying food. Many other pilgrims commented on how small and light my bag was. It was a conscious choice - all the guides said to be minimalist and reduce weight as much as possible. I may have taken it a bit too far, though.&lt;/p&gt;
&lt;p&gt;Here&#39;s the full list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;22L backpack.&lt;/li&gt;
&lt;li&gt;3 pairs of socks (merino wool, helps to avoid blisters).&lt;/li&gt;
&lt;li&gt;3 pairs of underwear.&lt;/li&gt;
&lt;li&gt;3 t-shirts (synthetic material, dries faster).&lt;/li&gt;
&lt;li&gt;1 pair of shorts (hiking shorts, dry quickly).&lt;/li&gt;
&lt;li&gt;trail runners (breathable, good foot support, dry quickly when wet).&lt;/li&gt;
&lt;li&gt;rain poncho (keeps bag and upper body dry).&lt;/li&gt;
&lt;li&gt;light jumper.&lt;/li&gt;
&lt;li&gt;scarf.&lt;/li&gt;
&lt;li&gt;baseball cap.&lt;/li&gt;
&lt;li&gt;sunglasses.&lt;/li&gt;
&lt;li&gt;microfiber towel (dries fast).&lt;/li&gt;
&lt;li&gt;passport.&lt;/li&gt;
&lt;li&gt;water bottle.&lt;/li&gt;
&lt;li&gt;pharmacy stuff (in a plastic bag): suncream, paracetamol, antihistamines, insect spray, blister plasters / bandages, vaseline.&lt;/li&gt;
&lt;li&gt;toothbrush and toothpaste.&lt;/li&gt;
&lt;li&gt;a bar of soap (for washing self + clothes)&lt;/li&gt;
&lt;li&gt;phone/charger.&lt;/li&gt;
&lt;li&gt;converter for sockets.&lt;/li&gt;
&lt;li&gt;e-reader.&lt;/li&gt;
&lt;li&gt;journal + pen.&lt;/li&gt;
&lt;li&gt;3 safety pins (for hanging wet clothes off the backpack when walking).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While there are some things I might change with hindsight, I feel that the packing was a success! Possible amendments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I probably should&#39;ve brought another pair of shorts, because with only 1 pair I needed a private room in order to wash and dry them.&lt;/li&gt;
&lt;li&gt;The scarf came in useful on one or two particularly chilly mornings, but mostly felt like a waste of space. And I looked kinda ridiculous wearing a scarf with shorts.&lt;/li&gt;
&lt;li&gt;It would&#39;ve been good to have a container for my soap, because it made a mess when wet. I kept it in its original, papery container, which had almost completely disintegrated by the end of the trip.&lt;/li&gt;
&lt;li&gt;The sunglasses weren&#39;t needed when I had a baseball cap. As it happened, though, I lost the baseball cap and the sunglasses got some use.&lt;/li&gt;
&lt;li&gt;I only read ~100 pages on the e-reader (&lt;em&gt;Los detectives salvajes&lt;/em&gt; was a slog), but I would be reluctant to give it up.&lt;/li&gt;
&lt;li&gt;Earphones would&#39;ve been helpful on days when I was extremely bored, but I didn&#39;t bring them because &#34;living in the moment&#34;... or something. I ended up daydreaming a lot and not paying attention to my surroundings, so I probably should&#39;ve just brought earphones.&lt;/li&gt;
&lt;li&gt;Some pilgrims marvelled at my lack of a sleeping bag, and a few albergues (hostels) didn&#39;t provide a blanket at night, but I managed to survive the cold by draping my towel &amp;amp; jumper over myself. I&#39;d suggest bringing a light sleeping bag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-did-you-plan-the-trip&#34;&gt;How did you plan the trip?&lt;/h3&gt;
&lt;p&gt;My main resource was &lt;a href=&#34;https://www.reddit.com/r/CaminoDeSantiago/&#34;&gt;r/CaminoDeSantiago&lt;/a&gt;. The discussions and guides on there cover everything you might need: routes, packing, walking tips, accommodation, weather, blister prevention, etc. I also used &lt;a href=&#34;https://www.pilgrim.es/en/northern-way/&#34;&gt;pilgrim.es&lt;/a&gt; for route planning, and the Buen Camino app was helpful too. I didn&#39;t book any accommodation before the trip, which ended up biting me on the first night. After that, I sometimes booked accommodation ahead of my arrival in a town, but that mostly wasn&#39;t necessary.&lt;/p&gt;
&lt;h3 id=&#34;you-kept-a-diary-wow-loser&#34;&gt;You kept a diary? Wow, loser.&lt;/h3&gt;
&lt;p&gt;Yep. Almost every day. And I always went back to fill in the days I missed. It was a lot of work, but I didn&#39;t have much else to do in the evenings, and I&#39;m glad to now have a record of my trip.&lt;/p&gt;
&lt;p&gt;I wrote in Spanish, for practice. This somewhat limited what I could express, but I usually managed to capture the day&#39;s events with the generous use of a dictionary. I wrote in a mixture of present and past tense, but for the transcription I&#39;m converting everything to the past tense, because otherwise it&#39;d be hard to read. I&#39;ve also done extensive editing, moved some non-chronological bits around, and added details that I neglected to write down at the time.&lt;/p&gt;
&lt;h3 id=&#34;what-did-you-eat&#34;&gt;What did you eat?&lt;/h3&gt;
&lt;p&gt;At the time I did the Camino, I was vegetarian. Sometimes I had to settle for subpar or expensive veggie food, especially in small villages, but for the most part I didn&#39;t have any issues. I ate a LOT of tortilla de patatas (Spanish omelette), as they&#39;re available in all the cafeterías. It would&#39;ve been much harder as a vegan. I suspect I would&#39;ve had to cook for myself a lot more and carry more food supplies with me.&lt;/p&gt;
&lt;h3 id=&#34;why-are-you-writing-this&#34;&gt;Why are you writing this?&lt;/h3&gt;
&lt;p&gt;Seems a shame to write so much and not share it with anyone. Also, it&#39;s fun.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/camino-diary-intro.html</link>
        <pubDate>Sun, 26 Oct 2025 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/camino-diary-intro.html</guid>
    </item>
    <item>
        <title>An Earnest Guide to Symbols in Common Lisp</title>
        <description>&lt;p&gt;Lisp programs have an extremely simple syntax, where everything is either a list or an atom. The most common type of atom is the &lt;strong&gt;symbol&lt;/strong&gt;, which is used to give names to things like variables and functions. In the Common Lisp code below, &lt;code&gt;defun&lt;/code&gt;, &lt;code&gt;pie&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are all symbols.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pie&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The symbol might be a simple data structure, but its interaction with other parts of Common Lisp - packages, the Lisp Reader, macros - is complicated. This article is a vaguely FAQ-like exploration of symbols and packages that will hopefully illuminate some of these tricky interactions. Worth reading before, after, or in parallel, is (PDF warning) &lt;a href=&#34;https://flownet.com/ron/packages.pdf&#34;&gt;The Complete Idiot&#39;s Guide to Common Lisp Packages&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;

&lt;img src=&#34;/static/img/cl-packages/cl-user.png&#34;
     alt=&#34;A box labelled &#39;common-lisp-user&#39;, with a stick figure inside and two symbols, &#39;car&#39; and &#39;cdr&#39;..&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;The common-lisp-user package and some of the symbols it contains.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div class=&#34;toc&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-a-symbol&#34;&gt;What is a symbol?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-to-be-done-with-symbols&#34;&gt;What is to be done... with symbols?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-is-the-symbol-name-in-all-caps&#34;&gt;Why is the symbol name in all-caps?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_-is-a-symbol&#34;&gt;&amp;lt;_%&amp;amp;? is a symbol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-secrets-of-the-defun&#34;&gt;The secrets of the defun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bindings-and-symbols&#34;&gt;Bindings and symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#did-you-say-naming-conventions&#34;&gt;Did you say naming conventions?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-a-package&#34;&gt;What is a package?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-do-symbols-get-added-to-a-package&#34;&gt;How do symbols get added to a package?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#print-read-consistency&#34;&gt;Print-read consistency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#whats-in-cl-user&#34;&gt;What&#39;s in CL-USER?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#playing-around-with-some-sample-packages&#34;&gt;Playing around with some sample packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#package-designators&#34;&gt;Package designators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#whats-the-deal-with-the-keyword-package&#34;&gt;What&#39;s the deal with the KEYWORD package?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#can-a-symbol-be-homeless&#34;&gt;Can a symbol be homeless?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#symbols-and-macros&#34;&gt;Symbols and macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#special-symbols-t-and-nil&#34;&gt;Special symbols: T and NIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#when-i-compile-a-function-how-does-slime-know-which-package-its-in&#34;&gt;When I compile a function, how does SLIME know which package it&#39;s in?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;what-is-a-symbol&#34;&gt;What is a symbol?&lt;/h2&gt;
&lt;p&gt;When it comes to definitions, it&#39;s helpful to consult Common Lisp&#39;s ANSI specification, published in 1994. &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/t_symbol.htm&#34;&gt;Quote&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Symbols are used [...] to name various entities in Common Lisp, including (but not limited to) linguistic entities such as variables and functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, a symbol is a data structure for identifying things. It&#39;s important to emphasise that &lt;strong&gt;symbols are not strings&lt;/strong&gt;. Each symbol has an associated name, which is represented as a string, but the symbol itself is not a string. I point this out because strings are the closest primitive data type to symbols in most other programming languages.&lt;/p&gt;
&lt;h2 id=&#34;what-is-to-be-done-with-symbols&#34;&gt;What is to be done... with symbols?&lt;/h2&gt;
&lt;p&gt;If we enter just &#34;x&#34; at the REPL, the symbol of that name will be evaluated, with the result being the &lt;strong&gt;value&lt;/strong&gt; referred to by that symbol.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[...]&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To get at the symbol itself, we need to &lt;code&gt;quote&lt;/code&gt; it so that it doesn&#39;t get evaluated, like &lt;code&gt;(quote x)&lt;/code&gt;, or &lt;code&gt;&#39;x&lt;/code&gt; for short. Let&#39;s use this knowledge to test the statement above, that a symbol is NOT the same as its name. We need the &lt;code&gt;symbol-name&lt;/code&gt; function to fetch the name from a symbol data structure.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type-of&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;SYMBOL&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-name&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;X&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-name&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; not equal!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At read time, when the raw Lisp code is slurped in and parsed, all occurrences of a particular name are mapped to a single, unique symbol. And so, in the next example, we&#39;re comparing the same symbol to itself.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; equal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Common Lisp follows the &lt;a href=&#34;https://stackoverflow.com/questions/4578574/what-is-the-difference-between-lisp-1-and-lisp-2&#34;&gt;Lisp-2 model&lt;/a&gt;, so functions and variables have separate namespaces. As such, a symbol can simultaneously identify both a function, which we fetch with &lt;code&gt;symbol-function&lt;/code&gt;, and a variable, which we fetch with &lt;code&gt;symbol-value&lt;/code&gt;. In the following example, the symbol &lt;code&gt;porridge&lt;/code&gt; refers to both a function and a variable.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;c1&#34;&gt;;; Define function.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;porridge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[...]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; Define variable.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;porridge&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[...]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; Symbol now refers to both a function and a variable.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-value&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;porridge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-function&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;porridge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;FUNCTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PORRIDGE&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; Compare the above to evaluating the symbol...&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;porridge&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; ...or invoking the function it identifies.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;porridge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;(boundp &#39;s)&lt;/code&gt; and &lt;code&gt;(fboundp &#39;s)&lt;/code&gt; identify whether the symbol &lt;code&gt;s&lt;/code&gt; is currently bound to a value or function, respectively. &lt;code&gt;(makunbound &#39;s)&lt;/code&gt; and &lt;code&gt;(fmakunbound &#39;s)&lt;/code&gt; remove the binding.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;X&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;boundp&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;fboundp&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;makunbound&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[...]&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;boundp&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each symbol also has an associated &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/26_glo_p.htm#property_list&#34;&gt;property list&lt;/a&gt;, accessed with &lt;code&gt;symbol-plist&lt;/code&gt;, but that doesn&#39;t rear its head very often. There&#39;s also &lt;code&gt;symbol-package&lt;/code&gt;, which we&#39;ll discuss later.&lt;/p&gt;
&lt;h2 id=&#34;why-is-the-symbol-name-in-all-caps&#34;&gt;Why is the symbol name in all-caps?&lt;/h2&gt;
&lt;p&gt;Good catch: we entered the symbol &lt;code&gt;&#39;x&lt;/code&gt;, but the printed symbol name was &lt;code&gt;&#34;X&#34;&lt;/code&gt;. By default, all symbol names are converted to upper case by the so-called Lisp Reader. This can be controlled with a parameter called &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/23_ab.htm&#34;&gt;readtable-case&lt;/a&gt;, which, if you really want to preserve your precious little capitalisation, can be set to &lt;code&gt;:preserve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Honestly, I think this is one of the language&#39;s biggest warts. Under the default behaviour, if you&#39;re trying to implement a formula that contains - &lt;em&gt;gasp&lt;/em&gt; - both &lt;code&gt;n&lt;/code&gt; AND &lt;code&gt;N&lt;/code&gt;, you&#39;re reduced to mutating one of the names, as if you were a wretched internet user trying to meet password requirements by going from &#34;password&#34; to &#34;Password1!&#34;. I&#39;m not sure why this behaviour was chosen as the default, but usually such things can be blamed on the ANSI standard having to maintain backward compatibility with pre-existing Lisp dialects.&lt;/p&gt;
&lt;p&gt;That said, there&#39;s a way to preserve case in symbol names regardless of &lt;code&gt;readtable-case&lt;/code&gt;. Wrap the name in &lt;code&gt;|&lt;/code&gt;s, like &lt;code&gt;&#39;|x|&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-name&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;|hi|&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;hi&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;|hi|&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; they have different names&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;_-is-a-symbol&#34;&gt;&amp;lt;_%&amp;amp;? is a symbol&lt;/h2&gt;
&lt;p&gt;The rules for symbol names are somewhat unusual, compared to other programming languages. Case in point: &lt;code&gt;&amp;lt;_%&amp;amp;?&lt;/code&gt; is a valid symbol name.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-name&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;&amp;lt;_%&amp;amp;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;_%&amp;amp;?&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What are these rules? They&#39;re described in &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/02_a.htm&#34;&gt;Section 2.1&lt;/a&gt; of the spec, and were admirably summarised by ScottBurson on Reddit -- now reproduced here with their permission.&lt;/p&gt;
&lt;p&gt;Any consecutive sequence of characters will be parsed as a symbol, except:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;whitespace.&lt;/li&gt;
&lt;li&gt;parentheses/braces/brackets.&lt;/li&gt;
&lt;li&gt;those that can be parsed as numbers.&lt;/li&gt;
&lt;li&gt;those starting with certain special characters, including &lt;code&gt;&#39;&lt;/code&gt;, &lt;code&gt;`&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, and &lt;code&gt;#&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;a single period by itself (called &#34;dot&#34;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As exceptions to these exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;any sequence of characters surrounded by &lt;code&gt;|&lt;/code&gt; is parsed as a symbol.&lt;/li&gt;
&lt;li&gt;the non-symbol meaning of any character (including &lt;code&gt;|&lt;/code&gt;) can be suppressed by preceding it with &lt;code&gt;\&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following the rules above, here are some valid symbols: &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;foo-bar&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;_%&amp;amp;?&lt;/code&gt;, &lt;code&gt;23-and-me&lt;/code&gt;, &lt;code&gt;|(|&lt;/code&gt;, and &lt;code&gt;\(&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-secrets-of-the-defun&#34;&gt;The secrets of the defun&lt;/h2&gt;
&lt;p&gt;Y&#39;know how symbols have a &lt;code&gt;symbol-function&lt;/code&gt; property? We can overwrite the value of this property with &lt;code&gt;setf&lt;/code&gt;. That&#39;s essentially what &lt;code&gt;defun&lt;/code&gt; is doing behind the scenes.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-function&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;porridge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[...]&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;porridge&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This enables us to reimplement &lt;code&gt;defun&lt;/code&gt; as a macro, a somewhat cool fact that was first demonstrated to me in the book &lt;em&gt;On Lisp&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mydefun&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;parameters&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-function&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;,name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parameters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;bindings-and-symbols&#34;&gt;Bindings and symbols&lt;/h2&gt;
&lt;p&gt;Based on what we&#39;ve covered already, it&#39;d be reasonable to expect the following code to work.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-value&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But instead this raises an error about &lt;code&gt;x&lt;/code&gt; being unbound.&lt;/p&gt;
&lt;p&gt;Here&#39;s why: the &lt;code&gt;let&lt;/code&gt; form creates a &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/26_glo_b.htm#binding&#34;&gt;lexical binding&lt;/a&gt; between the symbol &lt;code&gt;x&lt;/code&gt; and the value &lt;code&gt;1&lt;/code&gt;, which persists throughout the body of the &lt;code&gt;let&lt;/code&gt;. This is comparable to declaring a local variable in other languages. It doesn&#39;t affect the &lt;em&gt;global&lt;/em&gt; value of &lt;code&gt;x&lt;/code&gt;, which is what &lt;code&gt;symbol-value&lt;/code&gt; attempts to retrieve, and hence the error.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;x&lt;/code&gt; has already been declared a dynamic (a.k.a. global) variable, however, then the binding created by &lt;code&gt;let&lt;/code&gt; will shadow whatever global value &lt;code&gt;x&lt;/code&gt; has. Other binding constructs within the language work the same way, e.g. a function parameter called &lt;code&gt;x&lt;/code&gt; would also shadow the global variable.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[...]&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-value&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-value&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(The exact details around variables, bindings, lexical scope, dynamic scope, etc. are beyond the scope of this article).&lt;/p&gt;
&lt;p&gt;&#34;Wow,&#34; you might be thinking, &#34;Doesn&#39;t this make it easy to accidentally mutate a global variable?&#34;. Well, yes. That&#39;s why, similar to most other programming languages, Common Lisp has a naming convention for global variables. They&#39;re given &#34;earmuffs&#34;, so that &lt;code&gt;x&lt;/code&gt; becomes &lt;code&gt;*x*&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;did-you-say-naming-conventions&#34;&gt;Did you say naming conventions?&lt;/h2&gt;
&lt;p&gt;Yes, the Common Lisp community has adopted a number of &lt;a href=&#34;https://www.cliki.net/Naming+conventions&#34;&gt;naming conventions&lt;/a&gt;. Some that I&#39;ll highlight here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*x*&lt;/code&gt; is a global variable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+x+&lt;/code&gt; is a constant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;funcp&lt;/code&gt; or &lt;code&gt;func-p&lt;/code&gt; is a &lt;em&gt;predicate&lt;/em&gt; function, i.e. it returns a truthy or falsey value. I much prefer the Scheme convention, &lt;code&gt;func?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Check out that cliki page for more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-is-a-package&#34;&gt;What is a package?&lt;/h2&gt;
&lt;p&gt;It&#39;s impossible to get a full picture of how symbols work without also understanding the related concept of &lt;strong&gt;packages&lt;/strong&gt;. These are somewhat like namespaces or &#34;packages&#34; in other languages, except they&#39;re an actual data structure that we can directly query and manipulate.&lt;/p&gt;
&lt;p&gt;Again &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/t_pkg.htm&#34;&gt;quoting&lt;/a&gt; the spec:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A package is a namespace that maps symbol names to symbols [...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The main use case of packages is that they allow &lt;em&gt;your&lt;/em&gt; implementation of &lt;code&gt;fizzbuzz&lt;/code&gt; to live alongside &lt;em&gt;my&lt;/em&gt; &lt;code&gt;fizzbuzz&lt;/code&gt;. If our packages are named &lt;code&gt;apple&lt;/code&gt; and &lt;code&gt;banana&lt;/code&gt;, and they both export a symbol called &lt;code&gt;fizzbuzz&lt;/code&gt; for external use, then those symbols are referenced using &lt;code&gt;apple:fizzbuzz&lt;/code&gt; and &lt;code&gt;banana:fizzbuzz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that packages don&#39;t have any notion of variables or functions, only symbols. That&#39;s why they&#39;re sometimes described as a &#34;bag of symbols&#34;.&lt;/p&gt;
&lt;p&gt;Once a package has been created inside a running Lisp process, it&#39;s visible everywhere. If there&#39;s a package called &lt;code&gt;scooby&lt;/code&gt;, and it exports the symbol &lt;code&gt;doo&lt;/code&gt;, then that symbol can be referenced anywhere via &lt;code&gt;scooby:doo&lt;/code&gt;, with no restrictions.&lt;/p&gt;
&lt;h2 id=&#34;how-do-symbols-get-added-to-a-package&#34;&gt;How do symbols get added to a package?&lt;/h2&gt;
&lt;p&gt;When the Lisp Reader inhales some Lisp code, it has to map each symbol name to a symbol data structure. It does this by &#34;interning&#34; each name into the currently active package, which is designated by a global variable called &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/v_pkg.htm#STpackageST&#34;&gt;*package*&lt;/a&gt;. &lt;code&gt;(intern &#34;HI&#34;)&lt;/code&gt; returns the existing symbol called &#34;hi&#34; if it already exists in &lt;code&gt;*package*&lt;/code&gt;; otherwise, it adds a new symbol named &#34;hi&#34; to &lt;code&gt;*package*&lt;/code&gt; and returns it. This behaviour ensures that each occurrence of a symbol name will map to the same symbol data structure.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;intern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;|hi|&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; note: intern doesn&amp;#39;t capitalise names&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;|hi|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;intern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; they&amp;#39;re the same symbol&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(&#34;CL-USER&amp;gt;&#34; is the command prompt from the SLIME REPL, indicating that CL-USER is the currently active package).&lt;/p&gt;
&lt;p&gt;Programs always start in the COMMON-LISP-USER package, which also goes by the nickname CL-USER. This package gives access to all the symbols you know and love from the ANSI spec: &lt;code&gt;car&lt;/code&gt;, &lt;code&gt;cdr&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;defun&lt;/code&gt;, etc. We&#39;ll explore CL-USER in more detail later on. The macro &lt;code&gt;(in-package &amp;lt;package-name&amp;gt;)&lt;/code&gt; changes the currently active package.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;COMMON-LISP-USER&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;in-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:derp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;DERP&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;DERP&amp;gt;&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt; 
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;DERP&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; DERP is now the active package&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By default, &lt;code&gt;intern&lt;/code&gt; adds the symbol to the currently active package, but we can specify a different package. Let&#39;s say there&#39;s a package called &lt;code&gt;BEANS&lt;/code&gt;. Then...&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;c1&#34;&gt;;; Add symbol named TOAST to the BEANS package.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;intern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;TOAST&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;BEANS&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BEANS::TOAST&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; double colon because BEANS doesn&amp;#39;t export TOAST&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; Switch to the BEANS package.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;in-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;beans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;COMMON-LISP:PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;BEANS&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; Now we can access the TOAST symbol we added earlier.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BEANS&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-symbol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;TOAST&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;TOAST&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&#39;ve used &lt;code&gt;find-package&lt;/code&gt; and &lt;code&gt;find-symbol&lt;/code&gt; here, which are hopefully self-explanatory. We couldn&#39;t just evaluate &lt;code&gt;(quote toast)&lt;/code&gt; to verify that the symbol exists, because in the process of reading that form, the &lt;code&gt;toast&lt;/code&gt; symbol would be created and added to the active package by the Lisp Reader.&lt;/p&gt;
&lt;h2 id=&#34;print-read-consistency&#34;&gt;Print-read consistency&lt;/h2&gt;
&lt;p&gt;If you&#39;re confused by the printed representation of symbols, it might be due to print-read consistency, described by The Complete Idiot&#39;s Guide as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the invariants that Common Lisp tries to maintain is a property called print-read consistency. This property says that if you print a symbol, and then read the resulting printed representation of that symbol, the result is the same symbol, with two caveats: 1) this does not apply to uninterned symbols, and 2) [...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(To find out the other caveat, go read the original ;)&lt;/p&gt;
&lt;p&gt;For example, in our demonstration of the &lt;code&gt;intern&lt;/code&gt; function, the &lt;code&gt;toast&lt;/code&gt; symbol was printed as &#34;BEANS::TOAST&#34; when we were in the CL-USER package, while within the BEANS package it was printed as &#34;TOAST&#34;. This is because &lt;code&gt;toast&lt;/code&gt; is &lt;em&gt;internal&lt;/em&gt; to the BEANS package, and to reference it from outside the BEANS package, we have to use that double colon. If BEANS happened to export the &lt;code&gt;toast&lt;/code&gt; symbol, we&#39;d only need 1 colon and the printed representation from CL-USER would be &#34;BEANS:TOAST&#34;. &lt;em&gt;Within&lt;/em&gt; the BEANS package, we don&#39;t need a package prefix, hence why it&#39;s just &#34;TOAST&#34;.&lt;/p&gt;
&lt;h2 id=&#34;whats-in-cl-user&#34;&gt;What&#39;s in CL-USER?&lt;/h2&gt;
&lt;p&gt;It can be nice to explore this sort of question in the SLIME inspector. If you happen to have a SLIME REPL open in Emacs, enter &lt;code&gt;(find-package &#34;COMMON-LISP-USER&#34;)&lt;/code&gt; or &lt;code&gt;(find-package &#34;CL-USER&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;COMMON-LISP-USER&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;COMMON-LISP-USER&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now right click on the output, click &#34;Inspect&#34;, and you should see something like the following.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&amp;lt;PACKAGE {1000013983}&amp;gt;
--------------------
Name: &amp;quot;COMMON-LISP-USER&amp;quot;
Nicknames: &amp;quot;CL-USER&amp;quot;
Documentation:
public: the default package for user code and data
Use list: COMMON-LISP, SB-ALIEN, SB-DEBUG, SB-EXT, SB-GRAY, SB-PROFILE
Used by list: [nothing here]
4 present symbols.
0 external symbols.
4 internal symbols.
1329 inherited symbols.
0 shadowed symbols.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see the package&#39;s name, its nicknames, and its documentation. Then there&#39;s the &#34;Use list&#34;, containing all the packages that COMMON-LISP-USER inherits symbols from. My CL-USER package inherits from COMMON-LISP, as well as various packages defined by the SBCL implementation of Common Lisp, which I happen to be using. The symbols from the ANSI spec live in the COMMON-LISP package, which we can confirm with &lt;code&gt;symbol-package&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;car&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;COMMON-LISP&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(&lt;code&gt;symbol-package&lt;/code&gt; tells us the &#34;home package&#34; of a symbol; that is, where it was initially interned).&lt;/p&gt;
&lt;p&gt;Next in the inspector output, we see that CL-USER has 4 &#34;present&#34; symbols, which are symbols whose home package is CL-USER. We can check which symbols those are as follows:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;do-symbols&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-package&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;CL-USER&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;~a~%&amp;quot;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BEANS&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;S&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;hi&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;QUICKLISP-INIT&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;HI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(In the course of evaluating this, the Lisp Reader interned another symbol, &lt;code&gt;S&lt;/code&gt;, into CL-USER, and so now there are 5 present symbols).&lt;/p&gt;
&lt;p&gt;Back to the inspector output. CL-USER doesn&#39;t export any symbols, so all 4 (now 5) of the present symbols are &#34;internal symbols&#34;. Then there are 1329 inherited symbols from COMMON-LISP and the SBCL packages. We don&#39;t shadow any of those symbols. Shadowing allows you, for example, to define your own implementation of &lt;code&gt;car&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;, but it&#39;s usually considered a bad idea, since it subverts people&#39;s expectations of what those symbols refer to.&lt;/p&gt;
&lt;h2 id=&#34;playing-around-with-some-sample-packages&#34;&gt;Playing around with some sample packages&lt;/h2&gt;
&lt;p&gt;Let&#39;s define a package called &lt;code&gt;beatles&lt;/code&gt;. The most common way to do this is via the &lt;code&gt;defpackage&lt;/code&gt; macro, which has a number of options.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defpackage&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;beatles&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:use&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:export&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:play&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The options we&#39;ve used here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(:use :cl)&lt;/code&gt; -- This makes BEATLES inherit all the exported symbols from the COMMON-LISP package (nicknamed CL). You&#39;ll almost always want to do this, because otherwise you&#39;ll have to prefix all the spec-defined symbols with &lt;code&gt;cl:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(:export :play)&lt;/code&gt; -- Exporting a symbol makes it visible outside the package. We&#39;re going to define a &lt;code&gt;play&lt;/code&gt; function inside the BEATLES package and export the symbol.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why do many of these symbols have a colon as a prefix? This is a special syntax for referencing &#34;keywords&#34;, which are symbols in the &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/11_abc.htm&#34;&gt;KEYWORD package&lt;/a&gt;. A common use of keyword symbols is to avoid flooding a package namespace with symbols that will never be used again. If we wrote this defpackage form without keyword symbols, then symbols called &lt;code&gt;cl&lt;/code&gt; and &lt;code&gt;play&lt;/code&gt; would be pointlessy interned into the CL-USER package (or whichever package is active). In fact, as it stands, we&#39;re pointlessly interning the &lt;code&gt;beatles&lt;/code&gt; symbol. We could avoid this by writing &lt;code&gt;(defpackage :beatles ...)&lt;/code&gt; instead. The same applies for calls to &lt;code&gt;find-package&lt;/code&gt;, as &lt;code&gt;(find-package :beatles)&lt;/code&gt; works just as well as &lt;code&gt;(find-package &#39;beatles)&lt;/code&gt; or &lt;code&gt;(find-package &#34;BEATLES&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, let&#39;s now define some functions in the BEATLES package. Since the &lt;code&gt;play&lt;/code&gt; symbol is exported, the function it identifies will be available outside the package.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;in-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;beatles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; or (in-package :beatles)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;play&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;badum tss~%&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;she loves you yeah yeah yeah~%&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let&#39;s define another package, STONES, which inherits symbols from the BEATLES package as well as CL.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defpackage&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:stones&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:use&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:cl&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:beatles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;in-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:stones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;something something paint it black~%&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This diagram represents how I think about packages. I will be gravely insulted if you don&#39;t find it helpful. The stickperson represents the active package.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/img/cl-packages/example.png&#34;
     alt=&#34;3 boxes labelled &#39;common-lisp-user&#39;, &#39;beatles&#39; and &#39;stones&#39;. The first contains a stick figure and a few symbols: &#39;car, &#39;cdr, etc. The &#39;beatles&#39; box contains &#39;play, &#39;sing, &#39;car (from CL), etc. The &#39;stones box contains &#39;play (from &#39;beatles&#39;), &#39;sing, &#39;car (from CL), etc.&#34;
     class=&#34;centered&#34;&gt;&lt;/p&gt;
&lt;p&gt;We start off in CL-USER. The BEATLES package exports the &lt;code&gt;play&lt;/code&gt; symbol, so we can call the function it identifies, but we don&#39;t have access to the &lt;code&gt;sing&lt;/code&gt; symbol.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;beatles:play&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;badum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tss&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;beatles:sing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; (Error: The symbol SING is not external in the BEATLES package.)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we REALLY want to access an internal symbol from a package, we can use double colon syntax. However, it&#39;s usually a bad idea to circumvent the interface of a package like that.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;beatles::sing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;she&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;loves&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yeah&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yeah&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yeah&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The STONES package doesn&#39;t export any symbols, so we can&#39;t access its implementation of &lt;code&gt;sing&lt;/code&gt;. Let&#39;s try making it the active package.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;in-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:stones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;STONES&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;STONES&amp;gt;&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;STONES&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since STONES inherits symbols from BEATLES, we can call the BEATLES implementation of &lt;code&gt;play&lt;/code&gt;. Also check to make sure it&#39;s really coming from BEATLES.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;STONES&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;play&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;badum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tss&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;STONES&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;play&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;BEATLES&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;STONES didn&#39;t inherit the &lt;code&gt;sing&lt;/code&gt; symbol from BEATLES, but instead defined its own implementation of &lt;code&gt;sing&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;STONES&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;something&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;something&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;paint&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;black&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;STONES&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;sing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;PACKAGE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;STONES&amp;quot;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;BEATLES and STONES share a single symbol by the name of &#34;PLAY&#34;, since it was interned into BEATLES and then imported by STONES. In contrast, &#34;SING&#34; was interned separately into both packages and is mapped to two distinct symbols.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;STONES&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-symbol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;PLAY&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-symbol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;PLAY&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:beatles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;STONES&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-symbol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;SING&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-symbol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;SING&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:beatles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;package-designators&#34;&gt;Package designators&lt;/h2&gt;
&lt;p&gt;We&#39;ve seen that macros/functions like &lt;code&gt;defpackage&lt;/code&gt; and &lt;code&gt;find-package&lt;/code&gt; accept various data types as references to a package, including symbols, keywords and strings. These are collectively referred to as &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/26_glo_p.htm#package_designator&#34;&gt;package designators&lt;/a&gt;, defined in the standard as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a designator for a package; that is, an object that denotes a package and that is one of: a string designator (denoting the package that has the string that it designates as its name or as one of its nicknames), or a package (denoting itself).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/26_glo_s.htm#string_designator&#34;&gt;string designator&lt;/a&gt;, in turn, is defined as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a designator for a string; that is, an object that denotes a string and that is one of: a character (denoting a singleton string that has the character as its only element), a symbol (denoting the string that is its name), or a string (denoting itself). The intent is that this term be consistent with the behavior of string; implementations that extend string must extend the meaning of this term in a compatible way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&#39;s a potential gotcha. You might think that &lt;code&gt;(defpackage &#39;apple [...])&lt;/code&gt; is a valid call to &lt;code&gt;defpackage&lt;/code&gt;, because &lt;code&gt;&#39;apple&lt;/code&gt; is a symbol, which is a package designator! But actually, &lt;code&gt;&#39;apple&lt;/code&gt; is short for &lt;code&gt;(quote apple)&lt;/code&gt;, which is a list and decidedly NOT a package designator. When we &lt;em&gt;evaluate&lt;/em&gt; &lt;code&gt;(quote apple)&lt;/code&gt;, it returns the symbol called &#34;APPLE&#34;, which would be a valid package designator, but when we pass &lt;code&gt;(quote apple)&lt;/code&gt; to a macro then the macro just sees a list.&lt;/p&gt;
&lt;h2 id=&#34;whats-the-deal-with-the-keyword-package&#34;&gt;What&#39;s the deal with the KEYWORD package?&lt;/h2&gt;
&lt;p&gt;We&#39;ve already touched briefly on the KEYWORD package. In brief: keywords are symbols in the KEYWORD package, and &lt;code&gt;:blah&lt;/code&gt; is syntax sugar for &lt;code&gt;keyword:blah&lt;/code&gt;. But besides avoiding namespace pollution, what are keywords good for?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.lispworks.com/documentation/HyperSpec/Body/11_abc.htm&#34;&gt;Quoting the spec&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The KEYWORD package contains symbols, called keywords, that are typically used as special markers in programs and their associated data expressions. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a few examples of keywords being used as &#34;special markers&#34;, one of which is the use of keyword parameters in functions.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;c1&#34;&gt;;; Defining a function with a keyword parameter.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;&amp;amp;key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; Here be a wild keyword!&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; ---&amp;gt; 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another insightful quote from the spec...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Symbol tokens that start with a package marker are parsed by the Lisp reader as symbols in the KEYWORD package; see Section 2.3.4 (Symbols as Tokens). This makes it notationally convenient to use keywords when communicating between programs in different packages. For example, the mechanism for passing keyword parameters in a call uses keywords to name the corresponding arguments [...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&#39;s an example of how keywords are convenient for &#34;communicating between programs in different packages&#34;. Let&#39;s say the BEATLES package exports a &lt;code&gt;favourite&lt;/code&gt; macro that generates a print statement based on the code it receives.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;in-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:beatles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;favourite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;beatle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;beatle&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:john&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;correct~%&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;wrong~%&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we now call this macro from the STONES package...&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;STONES&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;beatles:favourite&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:john&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;correct&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;STONES&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;beatles:favourite&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:ringo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;wrong&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...it behaves as we&#39;d expect. If we&#39;d instead implemented &lt;code&gt;favourite&lt;/code&gt; using the comparison &lt;code&gt;(eq beatle &#39;john)&lt;/code&gt;, then &lt;code&gt;(beatles:favourite &#39;john)&lt;/code&gt; and &lt;code&gt;(beatles:favourite &#39;ringo)&lt;/code&gt; would, perhaps surprisingly, &lt;em&gt;both&lt;/em&gt; print &#34;wrong&#34;, because the &lt;code&gt;john&lt;/code&gt; symbol we&#39;d be interning into the STONES package would be different to the &lt;code&gt;john&lt;/code&gt; symbol in the BEATLES package.&lt;/p&gt;
&lt;p&gt;In an act of unashamed plagiarism, here&#39;s a lazy quote of more usage advice from the spec that I thought was interesting:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is generally best to confine the use of keywords to situations in which there are a finitely enumerable set of names to be selected between. For example, if there were two states of a light switch, they might be called :on and :off. &lt;/p&gt;
&lt;p&gt;In situations where the set of names is not finitely enumerable (i.e., where name conflicts might arise) it is frequently best to use symbols in some package other than KEYWORD so that conflicts will be naturally avoided. For example, it is generally not wise for a program to use a keyword as a property indicator, since if there were ever another program that did the same thing, each would clobber the other&#39;s data. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;can-a-symbol-be-homeless&#34;&gt;Can a symbol be homeless?&lt;/h2&gt;
&lt;p&gt;We&#39;ve seen how symbols have a home package, which is the package into which they were originally interned. &lt;code&gt;(symbol-package &#39;sym)&lt;/code&gt; yields this package. Here are some ways in which a symbol can become orphaned, such that &lt;code&gt;(symbol-package &#39;sym)&lt;/code&gt; returns &lt;code&gt;NIL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;1) Manually create a symbol data structure: &lt;code&gt;(make-symbol &#34;NAME-HERE&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-package&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;make-symbol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;jinkies&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2) Syntax sugar for homeless symbols: &lt;code&gt;&#39;#:name-here&lt;/code&gt;. Note that &lt;code&gt;(eq &#39;#:hi &#39;#:hi)&lt;/code&gt; returns &lt;code&gt;NIL&lt;/code&gt;, since they&#39;re different symbols that just happen to share the same name. It&#39;s only within packages that each name is mapped to a unique symbol. If you want to be miserly about the number of junk symbols you&#39;re creating, then you can use these orphan symbols to denote package and symbol names in &lt;code&gt;defpackage&lt;/code&gt;, &lt;code&gt;find-package&lt;/code&gt;, &lt;code&gt;in-package&lt;/code&gt; and elsewhere. I find it a bit verbose, though...&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defpackage&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:beatles&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:use&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:export&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:play&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-package&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;#:beatles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3) &lt;code&gt;unintern&lt;/code&gt; a symbol to remove it from a package:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-symbol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;S&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;S&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; it exists!&lt;/span&gt;
&lt;span class=&#34;ss&#34;&gt;:INTERNAL&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; and is not exported&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;unintern&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-symbol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;S&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; it does not exist anymore!&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;symbols-and-macros&#34;&gt;Symbols and macros&lt;/h2&gt;
&lt;p&gt;Here&#39;s an example that should demonstrate the relationship between symbols, the Lisp Reader, and macros. Perhaps you&#39;re like me and came up with the ingenious idea of a macro that executes its body inside a certain package, before restoring the original active package. Something like...&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:beatles&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;play&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here&#39;s how you might imagine implementing this.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;with-package&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;old-pkg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;gensym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;old-pkg&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-package&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;old-pkg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the above code should expand to something like...&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;#:g690&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;find-package&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:beatles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;play&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:g690&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...where &lt;code&gt;#:g690&lt;/code&gt; is a unique, homeless symbol produced for us by &lt;code&gt;gensym&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem with this idea is that it represents a misunderstanding of how code execution works in Common Lisp. For the sake of simplification, let&#39;s say that code execution consists of two stages: Reading and Evaluation. First, raw text is guzzled up by the Lisp Reader and converted to Lisp data structures. It&#39;s in this stage that symbols are created, and it&#39;s here that their home package is determined, based on the value of &lt;code&gt;*package*&lt;/code&gt; when Reading occurs. Next comes Evaluation, which begins with the expansion of all macros in the code. Macros are functions that operate on Lisp data structures and return Lisp data structures. By the time our &lt;code&gt;with-package&lt;/code&gt; macro is passed the list &lt;code&gt;((play))&lt;/code&gt; as its &lt;code&gt;body&lt;/code&gt; parameter, it&#39;s already too late. The &lt;code&gt;play&lt;/code&gt; symbol has been interned in whatever package was active when the Lisp Reader did its job, probably CL-USER. It doesn&#39;t matter if, when our expanded code is being evaluated, we set &lt;code&gt;*package*&lt;/code&gt; before calling &lt;code&gt;(play)&lt;/code&gt;, because &lt;code&gt;play&lt;/code&gt; has already been interned somewhere else.&lt;/p&gt;
&lt;p&gt;All that to say: the Evaluation of a form can&#39;t affect how it is read by the Lisp Reader, since Reading happens before Evaluation. We could implement something like &lt;code&gt;with-package&lt;/code&gt; using &lt;em&gt;reader macros&lt;/em&gt;, but that&#39;s a topic for another day.&lt;/p&gt;
&lt;h2 id=&#34;special-symbols-t-and-nil&#34;&gt;Special symbols: T and NIL&lt;/h2&gt;
&lt;p&gt;There are two special symbols that evaluate to themselves: &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;. When we evaluate &lt;code&gt;(symbol-value t)&lt;/code&gt;, we get back... &lt;code&gt;t&lt;/code&gt; again. These &#34;special symbols&#34; represent various things, including the boolean values true &amp;amp; false. &lt;code&gt;nil&lt;/code&gt; also represents the empty list, hence why &lt;code&gt;(listp nil)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbolp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; it&amp;#39;s a symbol!&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbol-name&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;T&amp;quot;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; I&amp;#39;m not joking, it really is a symbol&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; evaluates to itself!&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;symbolp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;when-i-compile-a-function-how-does-slime-know-which-package-its-in&#34;&gt;When I compile a function, how does SLIME know which package it&#39;s in?&lt;/h2&gt;
&lt;p&gt;If you&#39;re an Emacs user and you&#39;ve compiled a single Common Lisp form, like a function, using the &lt;code&gt;C-c C-c&lt;/code&gt; shortcut, then you may have wondered how SLIME knows which package should be active when the Lisp Reader slurps in that form. For example, you might have the following code in a buffer:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;in-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In your REPL, the currently active package is CL-USER. So when you compile the &lt;code&gt;bar&lt;/code&gt; function, why does it get added to the FOO package rather than CL-USER?&lt;/p&gt;
&lt;p&gt;This is an implementation detail of SLIME more than anything, but I remember being confused by it, so let&#39;s indulge ourselves with this brief tangent. First, let&#39;s see which Elisp function the &lt;code&gt;C-c C-c&lt;/code&gt; shortcut is bound to. Entering the help command for keyboard shortcuts, &lt;code&gt;C-h k&lt;/code&gt;, and then &lt;code&gt;C-c C-c&lt;/code&gt;, we&#39;re told that this shortcut is bound to the function &lt;code&gt;slime-compile-defun&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This function is defined in &lt;code&gt;slime.el&lt;/code&gt;. Following the link there and searching for &#34;in-package&#34;, we find the following comment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We have the concept of the &#34;current Lisp package&#34;. RPC requests always say what package the user is making them from and the Lisp side binds that package to *BUFFER-PACKAGE* to use as it sees fit. The current package is defined as the buffer-local value of &#39;slime-buffer-package&#39; if set, and otherwise the package named by the nearest IN-PACKAGE as found by text search (cl-first backwards, then forwards).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And there&#39;s our answer: unless &lt;code&gt;slime-buffer-package&lt;/code&gt; is set, SLIME first searches backwards and then forwards for the nearest IN-PACKAGE form. Not mentioned is that if no IN-PACKAGE form is found, then the code is compiled in the currently active package, whether that&#39;s CL-USER or something else.&lt;/p&gt;
&lt;p&gt;For curiosity&#39;s sake, here&#39;s the Elisp function used to search for IN-PACKAGE.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slime-search-buffer-package&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;case-fold-search&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;regexp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;^[ \t]*(\\(cl:\\|common-lisp:\\)?in-package\\&amp;gt;[ \t&amp;#39;]*&amp;quot;&lt;/span&gt;
                        &lt;span class=&#34;s&#34;&gt;&amp;quot;\\([^)]+\\)[ \t]*)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;save-excursion&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;re-search-backward&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;regexp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;re-search-forward&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;regexp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;match-string-no-properties&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;small&gt;With thanks to ScottBurson, stassats, vindarel, zacque0, kagevf, Jamie and Ordy for their feedback on this post.&lt;/small&gt;&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/cl-symbols.html</link>
        <pubDate>Wed, 04 Jun 2025 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/cl-symbols.html</guid>
    </item>
    <item>
        <title>Graphics livecoding in Common Lisp</title>
        <description>&lt;p&gt;Some Lisps, like Common Lisp, have a powerful feature that tends to go underappreciated amidst all the talk about macros: the ability to recompile your program while it&#39;s running, without restarting it. For the purposes of this post, and because it sounds cool, let&#39;s call this ability &lt;em&gt;livecoding&lt;/em&gt;&lt;sup id=&#34;fnref:livecod&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:livecod&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Entering this strange land where the programs never stop, we&#39;ll first take a brief tour of Common Lisp and one of its graphics frameworks, Sketch, before walking through a livecoded implementation of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Boids&#34;&gt;Boids algorithm&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
&lt;video loop autoplay muted class=&#34;centered&#34;&gt;
  &lt;source src=&#34;/static/img/cl-livecoding/boids-sample.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt; 
&lt;figcaption&gt;Boids!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;wait-what-exactly-is-this-livecoding-thing&#34;&gt;&#34;Wait, what exactly is this livecoding thing?&#34;&lt;/h3&gt;
&lt;p&gt;Consider the typical workflow needed to modify a running application, like a videogame.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stop the application.&lt;/li&gt;
&lt;li&gt;Change the code.&lt;/li&gt;
&lt;li&gt;(If a compiled language) Wait N time units for a full recompilation.&lt;/li&gt;
&lt;li&gt;Start the application again.&lt;/li&gt;
&lt;li&gt;Fiddle with the application to get it back to its previous state.&lt;/li&gt;
&lt;li&gt;Carry on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In a livecoding environment, the application is never stopped, which eliminates steps 1, 4 and 5. Instead, small code changes (which can be as granular as recompiling a single function) are immediately reflected in the running program. Step 3 is often instantaneous because only the changed parts of the program must be recompiled. In theory, then, you can develop an entire application while it continuously runs in the background, without ever waiting for code to recompile. This makes the development process more fluid and interactive, with minimal downtime.&lt;/p&gt;
&lt;p&gt;In Common Lisp, the workflow might look something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a small change to a single function.&lt;/li&gt;
&lt;li&gt;Recompile the function (instantaneous).&lt;/li&gt;
&lt;li&gt;Carry on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For an example of this workflow in action, check out Common Lisp and Emacs being used as an environment for &lt;a href=&#34;https://www.youtube.com/watch?v=EkYUU0UoB_0&#34;&gt;live musical performance&lt;/a&gt;. You can hear about a Lisp program being debugged remotely while running in &lt;a href=&#34;https://corecursive.com/lisp-in-space-with-ron-garret/&#34;&gt;deep space&lt;/a&gt;. Livecoding (or hot reloading, or whatever you like to call it) is also available in other languages, like Smalltalk and Erlang.&lt;/p&gt;
&lt;h3 id=&#34;a-rough-sketch-of-sketch&#34;&gt;A rough sketch of Sketch&lt;/h3&gt;
&lt;p&gt;Before jumping into Boids, let&#39;s take a brief look at &lt;a href=&#34;https://github.com/vydd/sketch&#34;&gt;Sketch&lt;/a&gt;, our Common Lisp graphics framework of choice. We&#39;ll be more concerned with big ideas than with code minutiae, but if you&#39;re unfamiliar with Common Lisp and want to understand the code samples, then please take a detour through &lt;a href=&#34;https://learnxinyminutes.com/common-lisp/&#34;&gt;Learn Common Lisp in Y Minutes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, Sketch. The Sketch API is heavily based on that of &lt;a href=&#34;https://processing.org/&#34;&gt;Processing&lt;/a&gt;. Its primary entry point is the &lt;code&gt;defsketch&lt;/code&gt; macro. The code below defines a &#34;sketch&#34; called &lt;code&gt;my-sketch&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defsketch&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-sketch&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; ...drawing code here...&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After the name of the sketch comes a list of bindings that define its state and configuration. Here, the window properties &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are set to &lt;code&gt;200&lt;/code&gt;, while &lt;code&gt;n&lt;/code&gt; is an attribute we&#39;ve added for our own use.&lt;/p&gt;
&lt;p&gt;Then comes the drawing code. This gets run in a loop while the sketch is running, once per frame. The following snippet draws 5 red circles on a black background, each of radius 10 and in random positions.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+black+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-pen&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-pen&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:fill&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+red+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;circle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After painting the background black, the all-powerful &lt;code&gt;loop&lt;/code&gt; macro is used to draw &lt;code&gt;n&lt;/code&gt; circles. The &lt;code&gt;with-pen&lt;/code&gt; macro (defined by Sketch) configures drawing properties like fill colour, stroke width and stroke colour. It takes a &#34;pen&#34; object as an argument.&lt;/p&gt;
&lt;p&gt;Here&#39;s all the code together:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defsketch&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-sketch&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+black+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-pen&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-pen&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:fill&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+red+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;circle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, to run the sketch, we compile our code and execute &lt;code&gt;(run-sketch &#39;my-sketch)&lt;/code&gt; from the REPL, resulting in...&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/cl-livecoding/sketch-sample.gif&#34;
     alt=&#34;The result: red circles flashing on a black background.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;...art.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;That&#39;s all we need to know about Sketch for now!&lt;/p&gt;
&lt;h3 id=&#34;livecoding-boids&#34;&gt;Livecoding Boids&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boids&#34;&gt;Boids&lt;/a&gt; is an algorithm from 1986 for simulating flocks of birds. In essence, it consists of applying 3 forces to the simulated birds. Quoting Wikipedia&lt;sup id=&#34;fnref:boidsref&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:boidsref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, these forces are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;separation: steer to avoid crowding local flockmates&lt;/li&gt;
&lt;li&gt;cohesion: steer to move towards the average position (center of mass) of local flockmates&lt;/li&gt;
&lt;li&gt;alignment: steer towards the average heading of local flockmates&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can we implement this ourselves? First, we need a canvas to draw on!&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defsketch&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;restart-on-change&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gray-255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;230&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only mysterious thing in this code is the &lt;code&gt;restart-on-change&lt;/code&gt; parameter, which is available in my &lt;a href=&#34;https://github.com/Kevinpgalligan/sketch&#34;&gt;fork&lt;/a&gt; of Sketch. When its value is &lt;code&gt;nil&lt;/code&gt; (false), the sketch&#39;s state - like the boid positions - won&#39;t be reset when we recompile our code.&lt;/p&gt;
&lt;p&gt;Compiling the defsketch form in Emacs (with the Ctrl-C Ctrl-C shortcut) and executing &lt;code&gt;(run-sketch &#39;boids)&lt;/code&gt; at the REPL gives us... 🥁... a gray background. Wonderful.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/cl-livecoding/boids-1-canvas.png&#34;
     alt=&#34;A light-gray background.&#34;
     class=&#34;centered&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;(Note: all going well, this modest window will run continuously throughout the entire development lifecycle).&lt;/p&gt;
&lt;p&gt;Now let&#39;s create some boids to populate our world. We add a &lt;code&gt;boid&lt;/code&gt; class to store their position and velocity, as well as a convenience function &lt;code&gt;make-boid&lt;/code&gt; to create a boid from x &amp;amp; y co-ordinates. These rely on a hopefully self-explanatory implementation of 2d vectors, which are created using the &lt;code&gt;vec2&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defclass&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:initarg&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:pos&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:accessor&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:initarg&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:velocity&lt;/span&gt;
             &lt;span class=&#34;ss&#34;&gt;:initform&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;ss&#34;&gt;:accessor&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;make-boid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;make-instance&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;boid&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:pos&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To the sketch itself, we add 20 boids in random positions, and pass them to the &lt;code&gt;draw-boids&lt;/code&gt; function in the drawing loop.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defsketch&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;restart-on-change&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;                  &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-boid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gray-255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;230&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-boids&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we then recompile defsketch (with Ctrl-C Ctrl-C)... &lt;/p&gt;
&lt;video loop autoplay muted class=&#34;centered&#34;&gt;
  &lt;source src=&#34;/static/video/cl-livecoding/boids-2-missing-draw-compile.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;...we get an error! Woops. &lt;/p&gt;
&lt;figure&gt;
&lt;video loop autoplay muted class=&#34;centered&#34;&gt;
  &lt;source src=&#34;/static/video/cl-livecoding/boids-2-missing-draw.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt; 
&lt;figcaption&gt;Before: gray canvas. After: red error screen.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;But of course! We forgot to define &lt;code&gt;draw-boids&lt;/code&gt;. The program doesn&#39;t crash, however, and we&#39;ll soon be able to recover from this setback.&lt;/p&gt;
&lt;p&gt;Here&#39;s an implementation of &lt;code&gt;draw-boids&lt;/code&gt;. We don&#39;t need to get into the weeds of how it works. For each boid, it does some unwieldy vector math to figure out which direction the boid is facing and draws a triangle pointing in that direction.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;draw-boids&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid-width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid-length&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;
          &lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;with-slots&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-pen&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:fill&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+black+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-normalise&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-rescale&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid-length&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-rescale&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid-length&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-rescale&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid-width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;perpendicular-anticlockwise&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-rescale&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid-length&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-rescale&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid-width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;perpendicular-clockwise&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;polygon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vx&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vy&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vx&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vy&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vx&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vy&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As soon as we compile &lt;code&gt;draw-boids&lt;/code&gt;, the error screen disappears and our lovely boids are drawn into place. And we didn&#39;t have to restart the program to fix it!&lt;/p&gt;
&lt;figure&gt;
&lt;video loop autoplay muted class=&#34;centered&#34;&gt;
  &lt;source src=&#34;/static/video/cl-livecoding/boids-3-define-draw.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt; 
&lt;figcaption&gt;Before: red error screen. After: boids are drawn.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There are two Common Lisp features that enable us to fix errors on-the-fly like we&#39;ve done here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Newly compiled code, and recompiled code, is immediately loaded (sometimes called &#34;hot reloading&#34;) into the running program. This opens up possibilities such as optimising a program as it runs, tweaking parameters like gravitational force and background colour, and iteratively developing a GUI.&lt;/li&gt;
&lt;li&gt;The condition system! This is somewhat like exception handling in other languages, but more powerful. Not only can we signal exceptional situations (&#34;conditions&#34;), but we can also define &#34;restarts&#34; for recovering from those situations. When a running Common Lisp program encounters an unhandled condition, control passes to the debugger, and the user is presented with a selection of restarts. Perhaps they want to recompile the offending function and continue execution from the previous stack frame. Or perhaps the error was a division by zero, and the offending function provides a restart that swaps in a value of 1 for the divisor. Suddenly, there are a lot more possibilities than just crashing the program.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Anyway, a worthy discussion of the condition system would take up a full blog post of its own. Back to Boids!&lt;/p&gt;
&lt;p&gt;Now that our boids are drawn correctly, we want them to move around and do boid things. First, we implement an &lt;code&gt;update-positions&lt;/code&gt; function, which basically adds the velocity of each boid to its position (so that the boid moves), and applies the 3 Boidian forces to update the boid&#39;s velocity. For now, the functions implementing these forces are stubbed out.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;update-positions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;max-velocity&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; Update boid positions.&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
         &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;;; Update boid velocities.&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;
          &lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-clamp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;max-velocity&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rule1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rule2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rule3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; Stubs! (For now).&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rule1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rule2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rule3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then have to modify the drawing loop to call &lt;code&gt;update-positions&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defsketch&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;restart-on-change&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
                  &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-boid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gray-255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;230&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-boids&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;update-positions&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, these changes haven&#39;t affected the boid behaviour, so let&#39;s circle back and implement &lt;code&gt;rule-1&lt;/code&gt;, which can be summarised as &#34;stay away from other boids&#34;. When a boid is less than 10 pixels from another boid, we push them away from each other to avoid crowding.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rule1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-sum&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;         &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;         &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dist&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;         &lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dist&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;v-sum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;v-sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Note: the vector functions ending in &lt;code&gt;!&lt;/code&gt;, like &lt;code&gt;v+!&lt;/code&gt;, follow the convention of storing the result in the vector passed as the first argument).&lt;/p&gt;
&lt;p&gt;When we recompile this function...&lt;/p&gt;
&lt;video loop autoplay muted class=&#34;centered&#34;&gt;
  &lt;source src=&#34;/static/video/cl-livecoding/boids-4-first-rule.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;...a pair of boids that happen to be too close to each other are sent flying off into the void. There&#39;s no counterforce to bring them back, just yet.&lt;/p&gt;
&lt;p&gt;Next, we implement &lt;code&gt;rule-2&lt;/code&gt;: boids should fly towards the average position of other boids. Our implementation could be more efficient by summing the boid positions just once, rather than doing it for every single boid, but I can&#39;t be bothered.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rule2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;         &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-scale!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-scale!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recompiling &lt;code&gt;rule-2&lt;/code&gt;, we get...&lt;/p&gt;
&lt;video loop autoplay muted class=&#34;centered&#34;&gt;
  &lt;source src=&#34;/static/video/cl-livecoding/boids-5-second-rule.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;Yes! This is starting to look vaguely like Boids. Let&#39;s add the final rule, &lt;code&gt;rule-3&lt;/code&gt;: boids should match their velocity to all the other boids. Implementation note: we probably shouldn&#39;t update the velocities until all the new velocities have been calculated, but this doesn&#39;t seem to matter too much.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rule3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;         &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-scale!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-scale!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recompiling, we see the Boids calm down a little bit.&lt;/p&gt;
&lt;video loop autoplay muted class=&#34;centered&#34;&gt;
  &lt;source src=&#34;/static/video/cl-livecoding/boids-6-third-rule.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;Since it&#39;s not very bird-like to fly around in a vortex of death, we could also give the boids a purpose by making them follow the mouse position. The result of these changes can be seen at the top of the post.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defsketch&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;restart-on-change&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
                  &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-boid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mouse-pos&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gray-255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;230&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-boids&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;update-positions&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mouse-pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defmethod&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;on-hover&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boids-mouse-pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;update-positions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mouse-pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;max-velocity&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
         &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;
          &lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-clamp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;max-velocity&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rule1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rule2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rule3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-rescale&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mouse-pos&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And with that, we have a complete implementation of Boids! At the risk of beating a dead horse, I&#39;ll re-emphasise that we did the whole thing without once restarting our program or waiting a perceivable amount of time for code to compile.&lt;/p&gt;
&lt;h3 id=&#34;closing-thoughts&#34;&gt;Closing thoughts&lt;/h3&gt;
&lt;p&gt;I hope, in this brief demonstration of livecoding, I&#39;ve given you a taste of how useful and fun this feature can be, whether you&#39;re developing a graphics application or mundane accounting software. Like I&#39;ve said, it&#39;s not unique to Common Lisp, as at least Smalltalk and Erlang have similar capabilities. It&#39;s also possible to bridge the gap in less interactive languages by making applications automatically restart themselves when a code change is detected, or by bolting on a scripting language. Just do me a favour and ask yourself, the next time you&#39;re waiting the requisite time units for your code to recompile: &lt;em&gt;How can I make this workflow more interactive? How can I make it more... like Common Lisp?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Thanks to vindarel, fstamour, June, Gideon and Julia for their feedback on this post.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=43774726&#34;&gt;Discussion&lt;/a&gt; on Hacker News.&lt;/small&gt;&lt;/p&gt;
&lt;!-- Just in case, here&#39;s the ffmpeg command I used to trim the screen recordings:
ffmpeg -i input.mp4 -ss 2 -to 4 -async 1 cut.mp4 --&gt;

&lt;div class=&#34;footnote&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:livecod&#34;&gt;
&lt;p&gt;See the &lt;a href=&#34;https://en.wikipedia.org/wiki/Live_coding&#34;&gt;Wiki page&lt;/a&gt;, and also &lt;a href=&#34;https://en.wikipedia.org/wiki/Interactive_programming&#34;&gt;interactive programming&lt;/a&gt;.&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:livecod&#34; title=&#34;Jump back to footnote 1 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:boidsref&#34;&gt;
&lt;p&gt;I also heavily leaned on &lt;a href=&#34;https://vergenet.net/~conrad/boids/pseudocode.html&#34;&gt;this webpage&lt;/a&gt; for my implementation. Thanks, Conrad!&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:boidsref&#34; title=&#34;Jump back to footnote 2 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        <link>https://kevingal.com/blog/cl-livecoding.html</link>
        <pubDate>Wed, 23 Apr 2025 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/cl-livecoding.html</guid>
    </item>
    <item>
        <title>Chess Detective: Identifying player profiles from Lichess recaps</title>
        <description>&lt;p&gt;Last year, I posted &lt;a href=&#34;/blog/chess-ratings.html&#34;&gt;an analysis&lt;/a&gt; of Lichess data, with the aim of figuring out what a &#34;normal&#34; rating fluctuation looks like. It was a garbage piece of work, because I was too lazy to properly clean the data. Another time, I &lt;a href=&#34;/blog/rc8.html&#34;&gt;paired up&lt;/a&gt; with someone at the Recurse Center to do some baby reverse engineering of the Lichess network protocol.&lt;/p&gt;
&lt;p&gt;Today we return to Lichess, that most noble of chess websites, with a different objective in mind. Lichess recently released a summary of the year for each player: how many games they played, who their most-played opponent was, and so on. Spotify Wrapped for chess, basically.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/chess-detective/lichess-recap.png&#34;
     alt=&#34;My Lichess recap for 2024. 2084 games played, 73484 moves played, 8 days and 16 hours spent playing, favourite time control was blitz, Ivanomran most played opponent, 170 puzzles solved, Sicilian Defence Alapin Variation most-played opening as white, Caro-Kann Defence Exchange Variation most-played as black.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;My Lichess Wrapped™.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I was struck by the question of whether it&#39;s possible to identify someone&#39;s profile based on the summary page of their Lichess recap. This turned out to be a lot easier than I expected, as all we really need to know is the most-played opponent and the number of games played.&lt;/p&gt;
&lt;p&gt;It all starts with the Lichess API. Lichess offers the following HTTPS endpoint for fetching someone&#39;s games:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://lichess.org/api/games/user/BLAH?since=1590969600000&amp;amp;until=1591833599999
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;BLAH&lt;/code&gt; is the username, while &lt;code&gt;since&lt;/code&gt; and &lt;code&gt;until&lt;/code&gt; specify the time period. Those numbers are unix timestamps, in milliseconds -- that is, the number of milliseconds that have passed since January 1st 1970. We can write a convenience function to spit out the unix timestamp for a given date.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;datetime&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;epoch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strptime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# REPL test.&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;2024-01-01&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1704067200000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(This is all Python, by the way).&lt;/p&gt;
&lt;p&gt;Next, another convenience function. This one assembles the URL and query string, given a username and range of dates.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_lichess_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;https://lichess.org/api/games/user/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
            &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;?since=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
            &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;amp;until=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_lichess_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;BlunderJan&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;2024-01-01&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;2025-01-01&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://lichess.org/api/games/user/BlunderJan?[...]&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here&#39;s a 1-line function to download all of someone&#39;s games in a given year, using the &lt;code&gt;requests&lt;/code&gt; library and the convenience function we wrote before. The return value of this function, &lt;code&gt;r.content&lt;/code&gt;, should be a bytestring containing the &lt;a href=&#34;https://en.wikipedia.org/wiki/Portable_Game_Notation&#34;&gt;PGN&lt;/a&gt; (Portable Game Notation) data for all the games.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;download_games&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_lichess_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-01-01&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-01-01&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;download_games&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;kpgiskpg&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# it&amp;#39;s me!&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;[Event &amp;quot;Rated bullet game&amp;quot;]&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;[Site &amp;quot;https://lichess.org/3sEETUVO&amp;quot;]&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;[...]&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point we have the PGN data stored in a variable called &lt;code&gt;s&lt;/code&gt;. The following code reads all the games contained therein and counts how many times the given user (the most-played opponent of our mystery profile) played each opponent. We use the &lt;code&gt;chess&lt;/code&gt; package to read PGN data.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;chess.pgn&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;io&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringIO&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;collections&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaultdict&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# The chess API expects to receive a stream of characters, so first&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# convert the bytestring to a string and then wrap it in a streamy thing.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringIO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Like a regular dictionary, but if a key (i.e. a username) isn&amp;#39;t present&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# when we try to access it, then defaultdict gives it an initial value of 0.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaultdict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;game&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pgn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_game&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;game&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# Add 1 to the game count for the player who IS NOT the&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# player whose games we&amp;#39;re analysing.&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;game&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Black&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;game&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;White&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;kpgiskpg&amp;quot;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;game&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;White&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we create a ranked list of all the opponents based on the number of games played, and display them. This &lt;em&gt;almost&lt;/em&gt; gives us the result: if user B is user A&#39;s most-played opponent, then user A is likely to be high in the ranking of user B&#39;s opponents.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ranked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ranked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;MostPlayedOpponent&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;SecondMostPlayedOpponent&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12344&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we wanted, we could then iterate through these players until we found someone who played exactly the number of games shown in the recap, reusing our &lt;code&gt;download_games&lt;/code&gt; function to calculate that. I&#39;m going to stop here, however, because... well... let&#39;s say, hypothetically, that I was curious to find someone&#39;s Lichess profile, and that, hypothetically, at this point in the search, a username turned up near the top of the list that was obviously theirs. While that&#39;s just a hypothetical scenario, the last piece of the puzzle is still left as an exercise for the reader.&lt;/p&gt;
&lt;p&gt;Moral of the story: if you want to share your Lichess recap without revealing your Lichess profile, then you should obscure the most-played opponent. Another thing you should probably do is add a random offset to all the numbers in the recap, since they could also be used to uniquely identify your profile if someone is obsessed enough to trawl through the entire Lichess userbase.&lt;/p&gt;
&lt;p&gt;By the way, this is my 50th blog post! Woohoo! 🎉 Stay tuned for post #51, which will be about graphics livecoding with Common Lisp.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/chess-detective.html</link>
        <pubDate>Wed, 15 Jan 2025 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/chess-detective.html</guid>
    </item>
    <item>
        <title>Reflections on the Recurse Center</title>
        <description>&lt;p&gt;Earlier this year, I spent 12 weeks at a programming retreat called the Recurse Center (RC). I wrote about the &lt;a href=&#34;/blog/recurse.html&#34;&gt;application process&lt;/a&gt;, and I shared a series of &lt;a href=&#34;/blog/tag/rc.html&#34;&gt;daily updates&lt;/a&gt; from my time there. Now, I&#39;d like to write what they playfully call a &#34;return statement&#34; and reflect on the experience as a whole&lt;sup id=&#34;fnref:return&#34;&gt;&lt;a class=&#34;footnote-ref&#34; href=&#34;#fn:return&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. We&#39;ll cover the highs, the lows, and the minutiae of life at RC.&lt;/p&gt;
&lt;p&gt;But first, here&#39;s a list of everything I did during my batch. Certain projects, like the BitTorrent client, spanned almost the entire 12 weeks, but most were mini-projects. Micro-projects, even!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Made several toy graphics applications: a visualisation of the Lorenz attractor, a slice of toast that always lands on the jammy side, a giraffe that executes a stack-based programming language, and randomly-generated trees.&lt;/li&gt;
&lt;li&gt;Contributed a few pull requests to &lt;a href=&#34;https://github.com/vydd/sketch&#34;&gt;Sketch&lt;/a&gt;, the Common Lisp graphics framework. Also contributed some documentation to the Common Lisp Cookbook.&lt;/li&gt;
&lt;li&gt;Made my own &lt;a href=&#34;https://github.com/Kevinpgalligan/cl-bittorrent&#34;&gt;BitTorrent client&lt;/a&gt;. This involved a parser for the bencoding format, a multi-threaded client for communicating with multiple peers at once, networking code for (de)serialising messages and sending them over sockets, and the actual logic for dealing with peers. The final result was an unoptimised, fragile mess, but I was able to transfer a file to myself!&lt;/li&gt;
&lt;li&gt;Improved my Emacs workflow. (Thanks to Reed, Thomas, and others. Magit is AWESOME).&lt;/li&gt;
&lt;li&gt;Tried music programming with SuperCollider, and attended the SuperCollider workshops run by Zack.&lt;/li&gt;
&lt;li&gt;Worked through several chapters of the Book of Shaders. This was my first significant experience writing shader programs.&lt;/li&gt;
&lt;li&gt;Read a lot about the workings of Forth and got part of the way to implementing a basic &lt;a href=&#34;https://github.com/Kevinpgalligan/cloroforth&#34;&gt;Forth interpreter&lt;/a&gt; - to be continued!&lt;/li&gt;
&lt;li&gt;Read a few chapters of Learn You a Haskell and learned what a monoid is. (Already forgotten).&lt;/li&gt;
&lt;li&gt;Wrote C code that could call assembly, and vice versa. To my surprise, this was moreso about understanding the compilation and linking process, than needing to write any particularly fancy code. Also learned a bit about the ELF format for executables.&lt;/li&gt;
&lt;li&gt;Made a &lt;a href=&#34;/apps/tuner.html&#34;&gt;shitty guitar tuner&lt;/a&gt; in less than 1KB, with the help of Charlie. More precisely, it&#39;s 903 bytes of HTML and JavaScript. The audio breaks when I play it on my phone, so I need to figure out how to adjust the gain for different devices.&lt;/li&gt;
&lt;li&gt;Visited the Center for Computing History and wrote a &lt;a href=&#34;/blog/center-computing.html&#34;&gt;blog post&lt;/a&gt; about it.&lt;/li&gt;
&lt;li&gt;Paired with Thomas on refactoring my barely-started &lt;a href=&#34;https://github.com/Kevinpgalligan/hidl&#34;&gt;computer emulator&lt;/a&gt; project, which is based on the book &lt;em&gt;Code: The Hidden Language of Computer Hardware and Software&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Figured out the Lichess network protocol with Raghav. (JSON-encoded messages sent over websockets). We hooked into the DOM and managed to make a chess piece move by entering a message in the chatbox. I also learned a bit about WireShark and TCP.&lt;/li&gt;
&lt;li&gt;Dipped my toe into some hacking challenges (MicroCorruption, Hacker101 CTF).&lt;/li&gt;
&lt;li&gt;Paired with Elias to implement the Luhn algorithm in J, for validating credit card numbers.&lt;/li&gt;
&lt;li&gt;Made tweaks to my website, like adding previous/next links to blog posts. This has turned out to be more of a pain than I realised, and my implementation still has a bug.&lt;/li&gt;
&lt;li&gt;Began my study of data science, working through a chapter of &lt;em&gt;Learning from Data&lt;/em&gt; and some of Andrew Ng&#39;s lectures.&lt;/li&gt;
&lt;li&gt;Pair-programmed with many other people not mentioned above. Examples of their projects: a Paxos protocol implementation, a chess engine, a ray tracer, a WebRTC implementation, CryptoPals, and an interpreter in Clojure.&lt;/li&gt;
&lt;li&gt;Attended weekly project presentations, and gave two presentations of my own: one on C-calling-assembly-calling-C, and one on the BitTorrent client.&lt;/li&gt;
&lt;li&gt;Had many &#34;coffee chats&#34; and discussions over Zoom with other Recursers. Also attended many Recurser-run events: a TIC-80 tour, the SuperCollider workshops, Graphics Goblins, ...&lt;/li&gt;
&lt;li&gt;Attended RC-run events that were intended to help us make the most of the experience, e.g. the Building Your Volitional Muscles workshop helps you figure out what to work on.&lt;/li&gt;
&lt;li&gt;There were also quite a few non-programming-related events, like Will&#39;s burnout talk, the feelings check-ins, and &#34;any topic is allowed&#34; presentations (can&#39;t remember what those were called).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you read &lt;a href=&#34;/blog/recurse.html&#34;&gt;this post&lt;/a&gt; from just before I started RC, you&#39;ll notice that I didn&#39;t get around to implementing even a fraction of the ideas I&#39;d brainstormed. I didn&#39;t make a game, write a machine code-generating compiler, or learn anything about operating systems, to name a few projects I missed. In any case, I&#39;m happy with the variety of things I worked on. I got a taste for lots of different technical subjects that I&#39;d always wanted to try. (Hacking! Network programming! Graphics!). I also enjoyed following along with the massive range of projects that other people were working on.&lt;/p&gt;
&lt;p&gt;The staff have done a great job cultivating a pleasant environment at RC. It&#39;s probably the most welcoming tech space I&#39;ve ever been part of. Every time I reached out to one of my batchmates, I got a friendly response. They were an interesting group of people, coming from backgrounds as diverse as English literature, music and physics. But most importantly, they were kind!&lt;/p&gt;
&lt;p&gt;Pair programming is highly encouraged at RC. It&#39;s a great way to spend time with people, learn from them, and get a taste for their projects. It helped to take the initiative in asking people to pair or to chat; if I hadn&#39;t done so, then I probably would&#39;ve spent most of the batch working alone! Another RC tradition is the &#34;niceties&#34;. People are encouraged to write each other nice messages when each batch ends. Then, in the &#34;never graduate&#34; ceremony, the faculty read aloud a single hand-picked nicety for each Recurser. It&#39;s a cute way to end the experience. My batch was the first one where they introduced a portal for sending and receiving niceties, where the niceties will be stored &lt;em&gt;for eternity&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As for the structure of the retreat, we were mostly left to figure things out for ourselves. The RC faculty and infrastructure enable you to make RC what you want it to be, though it&#39;s strongly encouraged to work during the office hours and to &lt;a href=&#34;https://www.recurse.com/self-directives&#34;&gt;Learn Generously&lt;/a&gt;. You can work on whatever you want, attend as many events as you want, and interact with other people as much as you want. Helpful stuff includes: Zulip for text chat (with its excellent selection of emojis 🐙), a calendar for organising events, Virtual RC/conference rooms for video &amp;amp; audio chats, staff-run events, and more!&lt;/p&gt;
&lt;p&gt;The infrastructure meant I could attend 100% remotely - yay for accessibility! The downside was that it was harder to connect with other attendees. There was a whole world of social opportunities I missed out on, like in-person events, and there were people I barely talked to because they weren&#39;t engaged in the Virtual side of RC. It also kinda sucked to be in a timezone 5 hours ahead of the RC hub in New York. I often finished programming after 10pm, at which point my brain was wired for the night and I struggled to get to sleep. I definitely wasn&#39;t taking the best care of myself over those 3 months.&lt;/p&gt;
&lt;p&gt;Besides my self-care taking a nosedive, there were other mental and emotional challenges. The fear of failure sometimes made my brain want to skive off and play chess, and then I&#39;d beat myself up about it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🧠: You wanted to do this programming retreat and now here you are wasting your life playing chess! Maybe you&#39;re permanently broken and you&#39;ll never be productive ever again!&lt;/p&gt;
&lt;p&gt;Me: Why are you so mean?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In retrospect, I think I was still burnt-out from my PhD, which I&#39;d just about wrapped up by the beginning of the batch.&lt;/p&gt;
&lt;p&gt;The BitTorrent client dragged on for almost the entire 12 weeks, when I originally expected it to be a quick &#34;warm-up&#34; project. I could&#39;ve picked up the same networking concepts by implementing a simpler protocol, and left more time for other topics. It also didn&#39;t lead to much interaction with other people because I was one of the few Recursers working on networking stuff. On the positive side, it did teach me lessons in persistence. There were moments where I despaired at the seemingly endless amount of work left to do, but by breaking it up into smaller tasks and chipping away at them every day, I eventually got to the finish line. I also figured out that it was important to let myself off the hook sometimes and work on Fun New Stuff. I could then return to the BitTorrent client feeling reinvigorated.&lt;/p&gt;
&lt;p&gt;If I could redo my batch, I&#39;d put more effort into scoping my projects, I&#39;d allow myself to drop projects if they weren&#39;t serving my interests, and I&#39;d join a study group (still feeling FOMO about the CryptoPals group). Also, I probably wouldn&#39;t read and write Zulip check-ins with such fanatical consistency. While it was helpful for feeling connected to my batchmates and led to some positive interactions, it took upwards of 30 minutes per day and I maybe could&#39;ve spent that time talking to people directly.&lt;/p&gt;
&lt;p&gt;I sometimes struggled with the interpersonal side of things. Zulip is a useful tool (when it&#39;s not blasting you with unwanted notifications), but it&#39;s also a reminder of why I shy away from social media. I found myself checking on my daily check-ins to see who had reacted to them (🐙!). Whenever there was a lack of engagement, or whenever I compared myself to other Recursers who seemed to have made stronger connections, it made me feel envious or down on myself. It can also be tough to see the many awesome things that other people are doing when you&#39;re having a bad day. (The double-edged sword of Learning Generously). This is all embarrassing to admit, but I think it&#39;s better to be open in case there are other people who have felt the same way. &lt;/p&gt;
&lt;p&gt;RC is, at the end of the day, a recruiting service. However, it&#39;s completely optional to engage with this side of things, which I appreciate. I had my CV reviewed and got some jobhunting tips, but if anything I should&#39;ve made MORE use of their services. Despite this negligence on my part, the most life-impacting outcome of attending RC was that it netted me a job, quite by accident. I&#39;d been planning a career pivot into data science and machine learning, and was building up a &lt;a href=&#34;/dsml-portfolio.html&#34;&gt;portfolio&lt;/a&gt; to that end, but hadn&#39;t gotten any interiews.&lt;/p&gt;
&lt;p&gt;Then Amy (the only other Irish person attending RC during my batch) sent me a job posting that she thought would suit me. The job would involve designing and implementing programming languages. I immediately felt excited by this prospect - much more excited than by any of the data science jobs I&#39;d seen. Funnily enough, here&#39;s something I said in my very first daily update:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Feeling tempted by people talking about their programming language projects, makes me want to dive into the &lt;em&gt;Crafting Interpreters&lt;/em&gt; book, or maybe &lt;em&gt;Engineering a Compiler&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I never did end up reading &lt;em&gt;Crafting Interpreters&lt;/em&gt; or &lt;em&gt;Engineering a Compiler&lt;/em&gt;, but I&#39;d made my own &lt;a href=&#34;https://github.com/Kevinpgalligan/ka&#34;&gt;tiny programming language before&lt;/a&gt;, which is probably what got me the job. I&#39;m now working on custom programming languages for a small Irish company called Manakau. I love working remotely (in my own timezone), my colleagues are really nice, and the programming is fun. Maybe I&#39;ll ask if I can write a blog post about it.&lt;/p&gt;
&lt;p&gt;Overall, I loved my time at RC. The other day, I read over my daily updates for the first time since I&#39;d finished the batch, and it brought back a lot of fond memories. I do think I&#39;ve become a better programmer as a result of my time there, and being in that environment helped me to learn more about myself as a person, too. Not to mention that I got a job out of it.&lt;/p&gt;
&lt;p&gt;On that note, it&#39;s time to close the book on my first ever batch at RC. I hope my batchmates are doing well, and I&#39;d be delighted to hear from them if they read this!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return Status.SUCCESS;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;footnote&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:return&#34;&gt;
&lt;p&gt;It took me an embarrassingly long time to realise that this is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Return_statement&#34;&gt;play on words&lt;/a&gt;.&amp;#160;&lt;a class=&#34;footnote-backref&#34; href=&#34;#fnref:return&#34; title=&#34;Jump back to footnote 1 in the text&#34;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        <link>https://kevingal.com/blog/rc-reflections.html</link>
        <pubDate>Thu, 21 Nov 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/rc-reflections.html</guid>
    </item>
    <item>
        <title>Calculating all possible rankings for The Circle USA Season 6</title>
        <description>&lt;p&gt;The Circle is a reality competition show where the contestants communicate solely through text. This allows them to come into the show as a &#34;catfish&#34; and assume a new identity, though most people play as themselves. At the end of each round, they rank each other from first to last and the overall top-rated players become &#34;influencers&#34;, which gives them the power to eliminate someone from the game. In the final round, the top-ranked player wins the prize money.&lt;/p&gt;
&lt;p&gt;As viewers, we are shown only a subset of the ratings (such as: Player A put Player B in 2nd place) and the final ranking. However, I&#39;m always curious how exactly the players ranked each other. Who were the backstabbers, who were the game-players, who were the do-gooders? This can be figured out with a little bit of programming.&lt;/p&gt;
&lt;p&gt;First we need to encode the final results and the known rankings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING: SPOILERS AHEAD FOR THE CIRCLE USA SEASON 6&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OLIVIA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Olivia&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;KYLE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Kyle&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;QT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;QT&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;JORDAN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Jordan&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;LAUREN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Lauren&amp;quot;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;real_final_rank&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLIVIA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KYLE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JORDAN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LAUREN&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;players&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;real_final_rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;known_rankings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLIVIA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KYLE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, for each player, we generate all the rankings they &lt;em&gt;could&lt;/em&gt; have chosen. For example, based on what we know about Olivia, she could have ranked the other players in either of the following orders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QT, Kyle, Jordan, Lauren.&lt;/li&gt;
&lt;li&gt;QT, Kyle, Lauren, Jordan.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s some Python code for doing that. It basically makes a &#34;template&#34; of the possible rankings, like &lt;code&gt;[&#34;QT&#34;, &#34;Kyle&#34;, None, None]&lt;/code&gt;. Then, using &lt;code&gt;itertools.permutations(...)&lt;/code&gt;, it fills the &lt;code&gt;None&lt;/code&gt; spots in the template using all possible orderings of the unassigned players.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;possible_rankings_per_player&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;players&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;player_known_rankings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;known_rankings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;possible_rankings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ranking_template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;players&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player_known_rankings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ranking_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;unassigned_players&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;players&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;player_known_rankings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;perm&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;itertools&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;permutations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unassigned_players&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;possible_ranking&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ranking_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;possible_ranking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;perm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;possible_ranking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;possible_ranking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;perm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;possible_rankings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;possible_ranking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;possible_rankings_per_player&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;possible_rankings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we take all possible &lt;em&gt;combinations&lt;/em&gt; of all the possible rankings, and see which combinations result in the final ordering we saw in the show. Those combinations are the candidates for the true rankings.&lt;/p&gt;
&lt;p&gt;To make this clearer: we take the 2 possible rankings made by Olivia, and combine them with all the possible rankings by QT, and all the possible rankings by Kyle, and so on. This might seem like it would result in too many possibilities, but actually it doesn&#39;t, because there are only 5 players and quite a lot of information is known.&lt;/p&gt;
&lt;p&gt;Here&#39;s the table of rankings we know about.&lt;/p&gt;
&lt;div class=&#34;cooltablewrap&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Rank&lt;/th&gt;
    &lt;th&gt;Olivia&lt;/th&gt;
    &lt;th&gt;Kyle&lt;/th&gt;
    &lt;th&gt;QT&lt;/th&gt;
    &lt;th&gt;Jordan&lt;/th&gt;
    &lt;th&gt;Lauren&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;QT&lt;/td&gt;
    &lt;td&gt;Olivia&lt;/td&gt;
    &lt;td&gt;Kyle&lt;/td&gt;
    &lt;td&gt;Lauren&lt;/td&gt;
    &lt;td&gt;Jordan&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;Kyle&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
    &lt;td&gt;Lauren&lt;/td&gt;
    &lt;td&gt;Olivia&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
    &lt;td&gt;QT&lt;/td&gt;
    &lt;td&gt;?&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;If there are &lt;code&gt;N&lt;/code&gt; unknown spots in someone&#39;s ranking, then there are &lt;code&gt;N! = N × (N-1) × ... × 1&lt;/code&gt; ways to fill those spots. That means there are &lt;code&gt;(2!)^4 × 3! = 96&lt;/code&gt; possible combinations for Season 6. Thankfully, &lt;code&gt;itertools&lt;/code&gt; comes to the rescue again and we can generate all the combinations using &lt;code&gt;itertools.product(...)&lt;/code&gt;. For every combination, we calculate the final score of each player, where 1st, 2nd, 3rd and 4th place positions are worth 3, 2, 1 and 0 points, respectively. We then order the players by their scores and check if the final ranking matches the &lt;em&gt;real&lt;/em&gt; final ranking - e.g. we have to discard any combinations that don&#39;t result in Olivia being the winner.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rankings&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;itertools&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;possible_rankings_per_player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;players&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ranking&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rankings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ranking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;players&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;final_rank&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;players&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;final_rank&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matches_real_rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;final_rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# This is a possible solution, print it out!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only annoying part is the possibility of ties. A player who tied for 2nd place could be presented on the show as having finished in 2nd place &lt;em&gt;or&lt;/em&gt; 3rd place, according to the narrative that the producers wanted to create. The &lt;code&gt;matches_real_rank(...)&lt;/code&gt; function resolves this, basically checking that the players fell within the appropriate range of positions based on who they were tied with.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;matches_real_rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;final_rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ps_with_score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final_rank&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ps_with_score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;real_final_rank&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps_with_score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps_with_score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, running the code shows that there are 5 possibilities for the true rankings. Two of them result in a tie for first place between Olivia &amp;amp; Kyle, which I don&#39;t think is what happened, &#39;cause it would then be pretty unfair for Olivia to get all the prize money.&lt;/p&gt;
&lt;p&gt;So, here are the 3 remaining possibilities! I&#39;ve highlighted in green the positions we know with certainty, including both the ones that were revealed in the show and the ones that are constant across all the possible rankings.&lt;/p&gt;
&lt;p&gt;Scenario 1: Olivia (8), Kyle (6), QT (6), Jordan (6), Lauren (4).&lt;/p&gt;
&lt;div class=&#34;cooltablewrap&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Rank&lt;/th&gt;
    &lt;th&gt;Olivia&lt;/th&gt;
    &lt;th&gt;Kyle&lt;/th&gt;
    &lt;th&gt;QT&lt;/th&gt;
    &lt;th&gt;Jordan&lt;/th&gt;
    &lt;th&gt;Lauren&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;QT&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Kyle&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Lauren&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Jordan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Kyle&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;QT&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Jordan&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Jordan&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Lauren&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;td&gt;Kyle&lt;/td&gt;
&lt;td&gt;QT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Lauren&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Jordan&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Lauren&lt;/td&gt;
&lt;td&gt;QT&lt;/td&gt;
&lt;td&gt;Kyle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Scenario 2: Olivia (8), Kyle (6), QT (6), Jordan (5), Lauren (5).&lt;/p&gt;
&lt;div class=&#34;cooltablewrap&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Rank&lt;/th&gt;
    &lt;th&gt;Olivia&lt;/th&gt;
    &lt;th&gt;Kyle&lt;/th&gt;
    &lt;th&gt;QT&lt;/th&gt;
    &lt;th&gt;Jordan&lt;/th&gt;
    &lt;th&gt;Lauren&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;QT&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Kyle&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Lauren&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Jordan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Kyle&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;QT&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Jordan&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Lauren&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Lauren&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;td&gt;Kyle&lt;/td&gt;
&lt;td&gt;QT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Jordan&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Jordan&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Lauren&lt;/td&gt;
&lt;td&gt;QT&lt;/td&gt;
&lt;td&gt;Kyle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Scenario 3: Olivia (8), Kyle (7), QT (5), Jordan (5), Lauren (5).&lt;/p&gt;
&lt;div class=&#34;cooltablewrap&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Rank&lt;/th&gt;
    &lt;th&gt;Olivia&lt;/th&gt;
    &lt;th&gt;Kyle&lt;/th&gt;
    &lt;th&gt;QT&lt;/th&gt;
    &lt;th&gt;Jordan&lt;/th&gt;
    &lt;th&gt;Lauren&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;QT&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Kyle&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Lauren&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Jordan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Kyle&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;QT&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Jordan&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Lauren&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Lauren&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Olivia&lt;/td&gt;
&lt;td&gt;Kyle&lt;/td&gt;
&lt;td&gt;Kyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Jordan&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Jordan&lt;/td&gt;
&lt;td class=&#34;incel&#34;&gt;Lauren&lt;/td&gt;
&lt;td&gt;QT&lt;/td&gt;
&lt;td&gt;QT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We&#39;re left with 2 unknowns:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Whether Olivia ranked Lauren and Jordan in 3rd or 4th place.&lt;/li&gt;
&lt;li&gt;Whether Lauren and Jordan ranked QT and Kyle in 3rd or 4th place.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, I&#39;ve made a critical assumption about how the scoring system works. The producers could easily tamper with it to achieve the outcome they want. In any case, even if my assumption is correct and there was no tampering, the producers still had to make a decision on how to break ties. Some interesting possibilities: there could&#39;ve been a 3-way tie for 2nd place, and Lauren could&#39;ve been tied for 3rd place and not have come dead last.&lt;/p&gt;
&lt;p&gt;Another interesting thing to look at is to fix the rankings of all but one player, and then see if that player could&#39;ve won by making different choices. As far as I can see, QT couldn&#39;t have won in any scenario. Kyle could&#39;ve won in Scenario 3, at least, by ranking Olivia in 3rd or 4th place. At the end of the day, however, I think the most deserving player won, as Olivia (a.k.a. Brandon) managed to stay on good terms with everyone and played with the right mixture of heart and brains.&lt;/p&gt;
&lt;p&gt;Full code is &lt;a href=&#34;https://gist.github.com/Kevinpgalligan/9e64c54b55f5f23408a67098bc83e625&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/thecircle.html</link>
        <pubDate>Sat, 11 May 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/thecircle.html</guid>
    </item>
    <item>
        <title>Rating fluctuations in chess</title>
        <description>&lt;p&gt;The ELO rating system, devised by physicist &lt;a href=&#34;https://en.wikipedia.org/wiki/Elo_rating_system&#34;&gt;Arpad Elo&lt;/a&gt;, is used in chess to rank people by their playing ability. This post is an investigation into what a typical rating fluctuation looks like, an idea that probably came to me after a particularly devastating drop in my rating. But first, let&#39;s briefly review the ELO system.&lt;/p&gt;
&lt;h4 id=&#34;the-elo-system&#34;&gt;The ELO system&lt;/h4&gt;
&lt;p&gt;Let&#39;s say someone scores 1 point for winning a game, 0 points for losing a game, and 1/2 a point for drawing a game. If their ELO rating is &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;r_{A}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5806em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and their opponent&#39;s rating is &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;r_{B}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5806em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, then their expected score (i.e. their average score over millions and millions of games) is, according to the ELO system,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;400&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;
\sigma(r_{A}, r_{B}) = \frac{1}{1+10^{(r_{B}-r_{A})/400}}.
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;σ&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.1088em;vertical-align:-0.7873em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3214em;&#34;&gt;&lt;span style=&#34;top:-2.296em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.814em;&#34;&gt;&lt;span style=&#34;top:-2.989em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mopen mtight&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3448em;&#34;&gt;&lt;span style=&#34;top:-2.3567em;margin-left:-0.0278em;margin-right:0.0714em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.1433em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3448em;&#34;&gt;&lt;span style=&#34;top:-2.3567em;margin-left:-0.0278em;margin-right:0.0714em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.1433em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose mtight&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;/400&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7873em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is a form of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Logistic_function&#34;&gt;sigmoid function&lt;/a&gt;, which is basically a fancy way of mapping numbers to the 0-1 range. It gives fairly intuitive results if we plug ratings into it. When &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;r_{A} = r_{B}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5806em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5806em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, the expected score is 0.5. Makes sense: equally strong players should win equally often. Beyond that, for every difference of 400 points between your rating and your opponent&#39;s, your expected score increases or decreases by about a factor of 10. If you&#39;re rated 400 points below someone, your expected score is about 1/10. 800 points below and it&#39;s about 1/100.&lt;/p&gt;
&lt;p&gt;Note that this doesn&#39;t give us win, draw and loss probabilities. An expected score of 9/10 could mean a 0% chance of drawing and a 90% chance of winning, or it could mean an 80% chance of winning and a 20% chance of drawing. Among its other limitations, it also doesn&#39;t account for the advantage of playing the first move. The &lt;a href=&#34;https://en.wikipedia.org/wiki/Glicko_rating_system&#34;&gt;Glicko rating system&lt;/a&gt; tries to improve on the ELO system, but still ends up using the sigmoid function. Lichess, the best chess website ever, uses Glicko-2.&lt;/p&gt;
&lt;p&gt;Here&#39;s a plot of ELO rating difference versus the expected score. If you&#39;re lagging behind someone by 800 points, you have a negligible chance of scoring anything against them. If it&#39;s only 100 points, however, then your scoring chances are actually decent, which makes me feel better for losing so many games to supposedly weaker players.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/chess-ratings/expected-result.png&#34;
     alt=&#34;A plot of ELO rating difference vs. expected score. It basically looks like a plot of the sigmoid function, i.e. a slanted backwards S.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;(a)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The last detail is how to update the ratings after a game. The player of rating &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;r_{A}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5806em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is given a new rating of&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;
r_{A} + K(s-\sigma(r_{A}, r_{B})),
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;σ&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;{&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;}&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s \in \{0,1/2,1\}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5782em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;∈&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1/2&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is their score and &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;K &amp;gt; 0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7224em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is the so-called &#34;K-factor&#34; that determines how quickly ratings change. The more your actual score differs from the expected score, the more dramatic the change in rating. So if you lose to a much worse player, &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s-\sigma(r_{A},r_{B})&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6667em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;σ&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; will be negative and relatively large, and your rating will suffer a big drop of up to &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;K&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; points. If you lose to Magnus Carlson, well, that was expected, and your rating will barely move. If you draw with someone of the same rating, then your rating won&#39;t change at all. None of this will be news to chess players.&lt;/p&gt;
&lt;h4 id=&#34;whats-a-typical-rating-fluctuation&#34;&gt;What&#39;s a typical rating fluctuation?&lt;/h4&gt;
&lt;p&gt;ELO ratings are estimates of someone&#39;s &#34;true&#34; playing strength, assuming that such a thing exists and that it can be quantified as a single number. We&#39;ll consider two approaches to determining what a typical rating fluctuation looks like. The first approach is to simulate a bunch of games. The second is to model the rating and its fluctuations as a Markov process.&lt;/p&gt;
&lt;h5 id=&#34;approach-1-simulation&#34;&gt;Approach 1: Simulation&lt;/h5&gt;
&lt;p&gt;I ran 10,000 simulations of 100 chess games. The player is given an initial rating of 1800. This is their &#34;true&#34; rating, which remains fixed, but their rating for matchmaking purposes is updated after each game and they&#39;re matched against an opponent of the exact same rating. A K-factor of &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;K=10&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; was used for the update formula, resulting in a rating change of +-5 points after each game, which seems to be about the standard for chess websites. Draws were disallowed, which meant that the probability of a win could be derived from the expected score: &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mtext&gt;win&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1800&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P(\text{win}) = \sigma(1800,r)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord text&#34;&gt;&lt;span class=&#34;mord&#34;&gt;win&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;σ&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1800&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, where &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;r&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.4306em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is the player&#39;s current rating and thus the rating of their opponent.&lt;/p&gt;
&lt;p&gt;Here&#39;s the distribution of rating fluctuations over all the simulations. It shows the maximum distance the player got from their original rating in each simulation. We see that it&#39;s highly unlikely to stay within 0-20 points of your original rating over 100 games. Most players will stray by 20-80 points. Of course, this is highly dependent on the number of games and the K-factor: more games and a higher K-factor will result in greater fluctuations.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/chess-ratings/fluctuation-hist.png&#34;
     alt=&#34;Histogram of rating fluctations. Max fluctuation of 0-20 occurs ~2% of the time, 20-40 is 50%+, 40-60 is ~35%, 60-80 is ~8%, 80-100 is ~1%.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;(b)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here&#39;s the same thing as a cumulative distribution. As we increase the max rating fluctuation along the x-axis, the y-axis tells us the percentage of simulations that had a fluctuation less than that amount. We can see that ~80% of the time, the player stayed within 60 points of their original / true rating.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/chess-ratings/fluctuation-cumulative.png&#34;
     alt=&#34;Max rating fluctuation as a cumulative distribution.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;(c)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The moral of the story is that, even assuming that someone is a probabilistic machine who plays perfectly consistently and is never tired or tilted, they&#39;re still going to see significant variance in their rating. But still, if you keep blundering your pieces and lose 10 games in a row... it may be time to take a break.&lt;/p&gt;
&lt;h5 id=&#34;approach-2-markov-model&#34;&gt;Approach 2: Markov model&lt;/h5&gt;
&lt;p&gt;The distribution of rating fluctuation can also be computed by modeling the games as a Markov process, which I &lt;a href=&#34;/blog/boardgame.html&#34;&gt;discussed previously&lt;/a&gt; in the context of board games. This saves us from running a bunch of simulations, and gives exact results rather than estimates.&lt;/p&gt;
&lt;p&gt;Each possible rating is represented by a state in the Markov model. Let&#39;s say we&#39;re in the state &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6595em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, corresponding to a rating of &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;r_{A}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5806em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. At each step of the Markov process, we increase or decrease our rating by 5 points (for &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;K=10&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, as above), which sends us to the state corresponding to &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;r_{A}+5&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (label it &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i+1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7429em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) or &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;r_{A}-5&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (label it &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7429em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;). If the transition matrix is denoted by &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, then &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1800&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P_{i-1,i} = \sigma(1800,r_{A})&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.9694em;vertical-align:-0.2861em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3117em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct mtight&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2861em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;σ&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1800&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P_{i+1,i} = 1-P_{i-1,i}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.9694em;vertical-align:-0.2861em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3117em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct mtight&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2861em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7278em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.9694em;vertical-align:-0.2861em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3117em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct mtight&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2861em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, and, for all other indices &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;j&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.854em;vertical-align:-0.1944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,  &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P_{j,i} = 0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.9694em;vertical-align:-0.2861em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3117em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mpunct mtight&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2861em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The vector &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x^{(k)}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.888em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.888em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mopen mtight&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mclose mtight&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; gives the probability of being at each possible rating after &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; games have been played. With probability 1, we start off at a particular state &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6595em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. So &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msubsup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x^{(0)}_i = 1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.3217em;vertical-align:-0.2769em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.0448em;&#34;&gt;&lt;span style=&#34;top:-2.4231em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.2198em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mopen mtight&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose mtight&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2769em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msubsup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x^{(0)}_j=0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.4578em;vertical-align:-0.413em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.0448em;&#34;&gt;&lt;span style=&#34;top:-2.4231em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.2198em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mopen mtight&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose mtight&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.413em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; for &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34;&gt;≠&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;j \ne i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8889em;vertical-align:-0.1944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&lt;span class=&#34;mrel&#34;&gt;&lt;span class=&#34;mord vbox&#34;&gt;&lt;span class=&#34;thinbox&#34;&gt;&lt;span class=&#34;rlap&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8889em;vertical-align:-0.1944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;inner&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mrel&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;fix&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6595em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;m being vague about how many possible states there are, because that depends on how many games are played. For &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; games, there are &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2N+1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7667em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; states: we can win all &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; games, lose all &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; games, or anything in between. That results in &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; being a &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(2N+1)\times(2N+1)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; matrix, with its rows corresponding to the new rating after a game and its columns corresponding to the rating before the game.&lt;/p&gt;
&lt;p&gt;To get the probability distribution of what rating we&#39;re at after &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;100&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;N=100&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; games have been played, we simply compute &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/msup&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P^N x^{(0)}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.888em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8413em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.888em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mopen mtight&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose mtight&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. This results in the following spread of ratings:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/chess-ratings/distr-markov.png&#34;
     alt=&#34;Probability distribution of what rating the player is at after 100 games. About 56% chance of being within 0-20 points of our initial rating, and the probability decreases rapidly after that.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;(d)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is different from our simulation results because we&#39;re looking only at the final rating, not the maximum or minimum rating. We could compute the distribution of maximum fluctuation and compare to the simulated version, but they should end up looking roughly the same. From the probability distribution, we can calculate that, on average, we&#39;ll end up 22.7 rating points away from our initial rating, with a standard deviation of 17.6 rating points.&lt;/p&gt;
&lt;h4 id=&#34;reality-check&#34;&gt;Reality check&lt;/h4&gt;
&lt;p&gt;While this is all interesting, it&#39;s based on a model of chess skill that doesn&#39;t necessarily reflect reality. People aren&#39;t probabilistic machines. They get tired and cranky. They get kicked out of games because of a faulty internet connection. They blunder their queen in a winning endgame, then tilt and lose 10 games in a row. A natural question, then, is how the ELO model holds up against the behaviour of real players.&lt;/p&gt;
&lt;p&gt;For this purpose, I downloaded the ratings graph for 964 Lichess users over their last 100 blitz games. The player names came from the &lt;a href=&#34;https://database.lichess.org/&#34;&gt;Lichess data dump&lt;/a&gt;, March 2024. Here&#39;s the distribution of their final ratings, relative to their initial ratings.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/chess-ratings/real-final-diff.png&#34;
     alt=&#34;Difference between initial rating and final rating for 964 Lichess users over 100 blitz games.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;(e)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The shape of the distribution is similar to the one generated by the Markov model (see plot (d)), but in the real world, ratings seem to change a lot more. There are many plausible explanations for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Players are not starting at their &#34;true&#34; rating, and could be recovering from an unlucky losing streak or coming off a lucky winning streak.&lt;/li&gt;
&lt;li&gt;The matchmaking isn&#39;t perfect and players can lose a lot of points to weaker players or win a lot of points from stronger players. Tournaments also match people of vastly different ratings.&lt;/li&gt;
&lt;li&gt;Someone&#39;s &#34;true&#34; playing strength can change even in a short period of time, e.g. they might learn a new opening trap that wins them a bunch of games.&lt;/li&gt;
&lt;li&gt;People don&#39;t play perfectly consistently.&lt;/li&gt;
&lt;li&gt;Lichess&#39;s Glicko-2 system might result in more ratings volatility (not sure on this one).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s the same plot for the max rating difference over all 100 games. For comparison, see plot (b).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/chess-ratings/real-max-diff.png&#34;
     alt=&#34;Max rating fluctuation for 964 Lichess users over 100 blitz games.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;(f)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;While it appears that some players are &lt;em&gt;more&lt;/em&gt; stable than the ELO model predicted, with a max fluctuation of less than 20 points, this is deceptive. I didn&#39;t do a great job at cleaning the data, and the dataset includes friendly games that don&#39;t affect people&#39;s ratings, as well as games that were abandoned before they started. This flaw becomes more apparent in the cumulative distribution, which can be compared with plot (c).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/chess-ratings/real-max-diff-cumulative.png&#34;
     alt=&#34;Max rating fluctuation for 964 Lichess users over 100 blitz games (cumulative version).&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;(g)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We see that a non-zero percentage of players stay at the same rating over all 100 games, which most likely means they exclusively play friendly games. I can think of two other factors that could make real-life ratings more stable than predicted by the ELO system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The simulations and Markov model don&#39;t account for draws. While draws aren&#39;t that common in blitz games between non-pro players, they still happen sometimes.&lt;/li&gt;
&lt;li&gt;They also don&#39;t account for the asymmetry of chess. Someone&#39;s effective strength can vary greatly depending on whether they&#39;re playing as white or black, and this could result in winning most of their games as white and losing most of their games as black.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h4&gt;
&lt;p&gt;I&#39;m fed up with this investigation, so I&#39;m not going to bother cleaning the data or doing any further analysis. In a future post, I do want to dig into the Lichess dataset and look at non-chess-related behaviours, like how often people ragequit.&lt;/p&gt;
&lt;p&gt;What have we learned, then? Well, not much. The ELO rating system uses the sigmoid function to map rating differences to probabilities &amp;amp; expected score. Rating fluctuations within this system can be explored via simulation or Markov processes. And it seems reasonable to claim that players, whether they&#39;re probabilistic machines or real users on Lichess, mostly don&#39;t fluctuate by more than 100 rating points over 100 games, although this is entirely dependent on the person and the rating system under consideration.&lt;/p&gt;
&lt;p&gt;The notebook containing all the analysis and plotting from this article can be found &lt;a href=&#34;https://github.com/Kevinpgalligan/ChessDive&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/chess-ratings.html</link>
        <pubDate>Tue, 09 Apr 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/chess-ratings.html</guid>
    </item>
    <item>
        <title>A Visit to the Center for Computing History</title>
        <description>&lt;p&gt;I recently had the opportunity to visit the &lt;a href=&#34;https://www.computinghistory.org.uk/&#34;&gt;Center for Computing History&lt;/a&gt; in Cambridge, England. Since it turned out to be one of my favourite museums ever, I wanted to document the experience and encourage people to go see it if they can. My motive is selfish: I want it to be successful so I can return some day!&lt;/p&gt;
&lt;p&gt;The Center has a large collection of computers, from ancient arcade machines, to videogame consoles, to 80s office computers. Most of them are running and interactive. As such, it&#39;s accessible and fun even for non-techies.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/outside.jpg&#34;
     alt=&#34;The outside of the museum: blue/grey/glass and a sign with the name of the museum.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;When you see &#34;Hello, World&#34;, you know you&#39;re in the right place.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In the lobby, visitors are greeted by a room-filling computer called the &lt;a href=&#34;https://www.megaprocessor.com/&#34;&gt;Megaprocessor&lt;/a&gt;. It was hand-assembled using finger-sized transistors, and the state of each transistor is shown by LEDs. Theoretically, you can watch binary addition unfold before your eyes! I didn&#39;t understand the architecture of the computer at all, but it was still cool to see, and you can play Tetris on it.&lt;/p&gt;
&lt;figure&gt;
&lt;video class=&#34;centered&#34; controls title=&#34;The Megaprocessor computer in action, with arcade machine noises in the background.&#34;&gt;
    &lt;source src=&#34;/static/video/center-computing/megaprocessor.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;figcaption&gt;Those are noisy arcade machines in the background.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In a side room there&#39;s a selection of computers from the 80s. The interface for many of them is a keyboard and a BASIC terminal, rather than the graphical user interfaces and mice that we&#39;re used to today. I wrote a FizzBuzz-like BASIC program on one of the computers, with the aid of a bulky instruction manual.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/fizzbuzz-program.jpg&#34;
     alt=&#34;Fizzbuzz program.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/fizzbuzz.jpg&#34;
     alt=&#34;And its execution.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;figcaption&gt;The FizzBuzz(ish) program and its output.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I think the monitor is CRT-based, which could be why the screen appears to be faded. If that&#39;s the case, my camera picked up on the rapid refreshing of the screen that our puny human brains are too slow to perceive.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/manual-1.jpg&#34;
     alt=&#34;The Manual.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/manual-2.jpg&#34;
     alt=&#34;The Manual.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/manual-3.jpg&#34;
     alt=&#34;The Manual.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/basic-graphics.jpg&#34;
     alt=&#34;The Manual.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;figcaption&gt;The manual. Includes: basics of BASIC, assembly language, music, graphics...&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here&#39;s a transcription of the BASIC program I wrote:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nl&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;LET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;LET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;REPEAT&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;PROCTEST&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;IF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;PRINT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;FIZZ&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;PROCTEST&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;IF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;PRINT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;BUZZ&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;110&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;120&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNTIL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;il&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;130&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;DEF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;PROCTEST&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;140&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;LET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Y&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;il&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;160&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;REPEAT&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;170&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;IF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Y&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;190&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNTIL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;X&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;ENDPROC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This BASIC dialect is surprisingly advanced, and allows the definition of procedures &amp;amp; functions (with arguments!). In my ugly implementation, however, everything gets passed around through global variables. Woops. There was an even worse prototype that had GOTOs everywhere.&lt;/p&gt;
&lt;p&gt;The development process is interesting. At least, it&#39;s interesting for someone who didn&#39;t cut their teeth programming at a BASIC REPL. Here are some key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You enter one line of code at a time, with a line number at the start of each line. If you don&#39;t include a line number, the code gets executed as soon as you press the return key. Interactive development!&lt;/li&gt;
&lt;li&gt;The command &#34;LIST&#34; prints out all the lines of your program so far, ordered by line number. I&#39;m not sure what happens if your program is too long to fit on the screen.&lt;/li&gt;
&lt;li&gt;&#34;RENUMBER&#34; replaces all the line numbers so that they start at 10 and increase in multiples of 10. This is useful when you&#39;re missing a line of code somewhere but there&#39;s no space to put it.&lt;/li&gt;
&lt;li&gt;&#34;DELETE m,n&#34; deletes all the lines from number m to number n.&lt;/li&gt;
&lt;li&gt;When the program is ready, you type &#34;RUN&#34;.&lt;/li&gt;
&lt;li&gt;I think there&#39;s also a command to save the current program to disk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This computer&#39;s version of BASIC has built-in support for graphics and music programming. SuperCollider and p5js, watch out! There was another computer nearby that had a voice synthesizer, which was fun to mess around with.&lt;/p&gt;
&lt;p&gt;The final room, and the largest one, is the gallery, which is like an aircraft hangar full of computers, arcade machines, and exhibitions. As in the other rooms, most of the machines are interactive. My favourite part was probably the game consoles, ordered by release date and accompanied by a history of the games industry. All of the consoles were playable! I got to play Mario games on the NES and SNES, Sonic on a Sega, and Crash Bandicoot on a Playstation!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/crash.jpg&#34;
     alt=&#34;Crash Bandicoot on a PS1.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/mario.jpg&#34;
     alt=&#34;Mario on a SNES.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/spectrum.jpg&#34;
     alt=&#34;Some random game on a ZX Spectrum.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;img src=&#34;/static/img/center-computing/mac.jpg&#34;
     alt=&#34;Some Mac computers.&#34;
     class=&#34;centerfloat&#34;&gt;
&lt;figcaption&gt;A selection of consoles and computers from the gallery: Crash Bandicoot on a PS1, Mario on a SNES, a ZX Spectrum, and some Macs&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There are much older machines on display, but the game consoles resonated the most for me because they&#39;ve seeped into my consciousness from popular culture.&lt;/p&gt;
&lt;p&gt;They have a Mac that belonged to Douglas Adams. They couldn&#39;t recover any files from the hard-drive, unfortunately.&lt;/p&gt;
&lt;p&gt;They also have the original (clay?) model of the &lt;a href=&#34;https://www.youtube.com/watch?v=Y-6DzI-krUQ&#34;&gt;Creatures&lt;/a&gt; game world, which was photographed / scanned to create the game assets! (That&#39;s a link to an awesome video about the AI in Creatures).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/static/img/center-computing/creatures.jpg&#34;
     alt=&#34;The model for the Creatures game world.&#34;
     class=&#34;centered&#34;&gt;
&lt;figcaption&gt;The level map of Creatures!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;10/10 museum experience. I would highly recommend checking it out if you ever find yourself in that part of the world.&lt;/p&gt;</description>
        <link>https://kevingal.com/blog/center-computing.html</link>
        <pubDate>Fri, 15 Mar 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/center-computing.html</guid>
    </item>
    <item>
        <title>Tiny Metronome now has a 903-byte sibling</title>
        <description>&lt;p&gt;With the help of Charlie from RC, I managed to make a &lt;a href=&#34;/apps/tuner.html&#34;&gt;tiny guitar tuner&lt;/a&gt; in 903 bytes. It uses the same code-golfing tricks as the &lt;a href=&#34;/blog/metronome.html&#34;&gt;tiny metronome&lt;/a&gt;: &lt;code&gt;!1&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, HTML attribute values don&#39;t need to be surrounded by quotes, ternary conditionals can be shorter than if-else statements (&lt;code&gt;p?(s1,s2):(s3,s4)&lt;/code&gt; saves 8 bytes over &lt;code&gt;if(p){s1;s2;}else{s3;s4;}&lt;/code&gt;), buttons are created dynamically with JavaScript, etc.&lt;/p&gt;
&lt;p&gt;It uses the WebAudio API to make sound. The most annoying part was making sure there were no pops or crackles in the audio output, especially when it was started and stopped abruptly. This was possible to resolve by ramping the gain (kinda like the volume) up and down, and by tweaking its max value.&lt;/p&gt;
&lt;p&gt;Here&#39;s the code, with newlines added so that it doesn&#39;t spill out of the page. Cower before its obscurity!&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Tuner&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;viewport&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;width=&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;device-width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;max-width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;line-height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;82&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;110&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;147&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;196&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;247&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;330&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;E,A,D,G,B,E&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=!&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;linearRampToValueAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AudioContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createOscillator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createGain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setValueAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;111&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;disconnect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;disconnect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}});&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;[...&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,()=&amp;gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=!&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=!&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))));&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <link>https://kevingal.com/blog/tuner.html</link>
        <pubDate>Thu, 22 Feb 2024 00:00:00 GMT</pubDate>
        <guid>https://kevingal.com/blog/tuner.html</guid>
    </item>
</channel>
</rss> 